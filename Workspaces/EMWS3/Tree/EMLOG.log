*------------------------------------------------------------*
User:                pkumari1
Date:                April 20, 2017
Time:                01:31:35
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 20, 2017
Time:                01:31:26
*------------------------------------------------------------*
14715  proc freq data=EMWS3.Tree_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.TreeMETA;
14717  run;
 
NOTE: There were 14 observations read from the data set EMWS3.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.TreeMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14754  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14755  length ORDER $20;
14756  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14757     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14758  set EMWS3.IDS2_TARGETBUY_DM( where=(_TYPE_="TARGET"));
14759  NumLevels=2;
14760  select(upcase(ORDER));
14761  when('DESC') ORDER = 'Descending';
14762  when('ASC') ORDER = 'Ascending';
14763  when('FMTDESC') ORDER = 'Formatted Descending';
14764  when('FMTASC') ORDER = 'Formatted Ascending';
14765  otherwise ORDER = 'Descending';
14766  end;
14767  output;
14768  run;
 
NOTE: There were 1 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
14769  title9 ' ';
14770  proc print data=WORK.Tree_EVENT noobs label;
14771  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14772  title9 ' ';
14773  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14774  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14775  title10;
 
"No decisions defined for target "TargetBuy"."
14776  proc print data = EMWS3.Ids2_TargetBuy_DM noobs label;
14777  var _type_ variable label;
14778  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14779  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14780  title9 ' ';
14781  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14782  run;
 
NOTE: There were 7 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14783  title10;
 
14784  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15309  *------------------------------------------------------------*;
15310  * Tree: Generation of macros and macro variables;
15311  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15312  *------------------------------------------------------------*;
 
15313  %let EMEXCEPTIONSTRING=;
15314  *------------------------------------------------------------*;
15315  * TRAIN: Tree;
15316  *------------------------------------------------------------*;
15317  %let EM_ACTION = TRAIN;
15318  %let syscc = 0;
15319  %macro main;
15320
15321    %if %upcase(&EM_ACTION) = CREATE %then %do;
15322      filename temp catalog 'sashelp.emmodl.tree_create.source';
15323      %include temp;
15324      filename temp;
15325
15326      %em_tree_create;
15327    %end;
15328
15329     %else
15330     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15331
15332         filename temp catalog 'sashelp.emmodl.tree_train.source';
15333         %include temp;
15334         filename temp;
15335         %em_tree_train;
15336     %end;
15337
15338    %else
15339    %if %upcase(&EM_ACTION) = SCORE %then %do;
15340      filename temp catalog 'sashelp.emmodl.tree_score.source';
15341      %include temp;
15342      filename temp;
15343
15344      %em_tree_score;
15345
15346    %end;
15347
15348    %else
15349    %if %upcase(&EM_ACTION) = REPORT %then %do;
15350
15351         filename temp catalog 'sashelp.emmodl.tree_report.source';
15352         %include temp;
15353         filename temp;
15354
15355         %em_tree_report;
15356     %end;
15357
15358    %else
15359    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15360
15361         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15362         %include temp;
15363         filename temp;
15364         %EM_TREE_OPENTREEVIEWER;
15365
15366     %end;
15367
15368    %else
15369    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15370
15371         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15372         %include temp;
15373         filename temp;
15374         %EM_TREE_CLOSETREEVIEWER;
15375
15376     %end;
15377
15378
15379     %doendm:
15380  %mend main;
15381
15382  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15384 +%macro em_tree_train;
15386 +   %if &EM_IMPORT_DATA eq %then %do;
15387 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15388 +       %put &em_codebar;
15389 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15390 +       %put &errormsg;
15391 +       %put &em_codebar;
15392 +       %goto doendm;
15393 +   %end;
15394 +   %else
15395 +       %let EMEXCEPTIONSTRING =;
15397 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15398 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15399 +        %put &em_codebar;
15400 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15401 +        %put &errormsg;
15402 +        %put &em_codebar;
15403 +        %goto doendm;
15404 +   %end;
15406 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15407 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15408 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15409 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15410 +        %put &em_codebar;
15411 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15412 +        %put &errormsg;
15413 +        %put &em_codebar;
15414 +        %goto doendm;
15415 +   %end;
15417 +   /* Initialize property macro variables */
15418 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15419 +   %include temp;
15420 +   filename temp;
15422 +   %EM_SetProperties;
15424 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15425 +   %EM_GETNAME(key=EMTREE, type=DATA);
15426 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15427 +     /* if import eq Y and no importtable defined, throw an exception */
15428 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15429 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15430 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15431 +         %put &em_codebar;
15432 +         %put &errmsg;
15433 +         %put &em_codebar;
15434 +         %goto doendm;
15435 +      %end;
15436 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15437 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15438 +         %put &em_codebar;
15439 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15440 +         %put &errormsg;
15441 +         %put &em_codebar;
15442 +         %goto doendm;
15443 +      %end;
15444 +      %else %do;
15445 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15446 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15447 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15448 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15449 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15450 +         %let dsid = %sysfunc(close(&dsid));
15451 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15452 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15453 +            %put &em_codebar;
15454 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15455 +            %put &errormsg;
15456 +            %put &em_codebar;
15457 +            %goto doendm;
15458 +         %end;
15459 +      %end;
15460 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15461 +         proc delete data=&EM_USER_EMTREE;
15462 +         run;
15463 +      %end;
15464 +   %end;
15465 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15466 +      proc delete data=&EM_USER_EMTREE;
15467 +      run;
15468 +   %end;
15470 +   /* load tree macros */
15471 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15472 +   %include temp;
15473 +   filename temp;
15475 +   /* data sets */
15476 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15477 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15478 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15480 +   /* files */
15481 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15483 +   /* check actual num of target levels */
15484 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15485 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15486 +                              nLevel=_nTargetLevel );
15487 +      %if &_nTargetLevel  > 2 %then %do;
15488 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15489 +        %put &em_codebar;
15490 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15491 +        %put &errormsg;
15492 +        %put &em_codebar;
15493 +        %goto doendm;
15494 +      %end;
15495 +   %end;
15497 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15498 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15499 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15500 +        %let costflag=0;
15501 +        data _null_;
15502 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15503 +          if eof then call symput("costflag", _N_);
15504 +        run;
15505 +        %if &costflag gt 0 %then %do;
15506 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15507 +          %put &em_codebar;
15508 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15509 +          %put &errormsg;
15510 +          %put &em_codebar;
15511 +          %goto doendm;
15512 +       %end;
15513 +     %end;
15514 +   %end;
15516 +   /* determine if multiple targets will be processed */
15517 +   %let em_tree_multipleTargets=N;
15518 +   %let em_tree_numTarget = 1;
15519 +   %let em_tree_targetVars=;
15521 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15522 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15523 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15524 +         %let em_tree_multipleTargets=N;
15525 +      %end;
15526 +      %else %do;
15527 +         /* create macro array of targets  */
15528 +         data _null_;
15529 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15530 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15531 +           if eof then
15532 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15533 +        run;
15535 +        %if &em_tree_numTarget gt 1 %then %do;
15536 +           %let em_tree_multipleTargets=Y;
15537 +        %end;
15538 +      %end;
15539 +   %end;
15541 +   /* create view of only necessary variable for performance reasons */
15542 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15543 +   data &tempData / view=&tempData;
15544 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15545 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15546 +       %EM_TARGET
15547 +     %end;
15548 +     %else %do;
15549 +       %if &em_tree_numTarget ne 0 %then %do;
15550 +         %do i=1 %to &em_tree_numTarget;
15551 +            &&em_tree_targetVars&i
15552 +         %end;
15553 +       %end;
15554 +     %end;
15555 +     );
15556 +   run;
15558 +   /* run Tree procedure */
15559 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15561 +   /* Check return code and throw exception if error is detected */
15562 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15563 +   %if &syserr %then %do;
15564 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15565 +     %goto doendm;
15566 +   %end;
15568 +   /* add decision score code if multiple targets are processed */
15569 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15570 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15571 +   %end;
15573 +   /* create outfit dataset if multiple score statements have been executed */
15574 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15576 +   /* create English Rules */
15577 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15578 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15579 +       %em_tree_makeEnglishRules;
15581 +       /* English Rules */
15582 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15584 +     %end;
15585 +   filename x;
15587 +   %doendm:
15588 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15589 +%macro EM_SetProperties;
15591 +   /* train properties */
15592 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15634 +   /* properties for interactive sample */
15635 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15640 +   /* report properties */
15641 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15655 +   /* score properties */
15656 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15659 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS3.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15661 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15662 +  %global &nLevel;
15663 +  proc dmdb batch data=&indata
15664 +    classout=_tmp_dmdbout;
15665 +    class &target;
15666 +  run;
15667 +  data _tmp_dmdbout;
15668 +    set _tmp_dmdbout;
15669 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15670 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15671 +  run;
15672 +  data _null_;
15673 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15674 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15675 +    %let dsid = %sysfunc(close(&dsid));
15676 +     call symput("&nLevel", put(&_obs, Best12.));
15677 +  run;
15679 +  proc datasets lib=work nolist;
15680 +     delete _tmp_dmdbout;
15681 +  run;
15682 +  quit;
15683 +%Mend EM_CheckBinaryTargetLevel;
15686 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15688 +  /* determine the number of obs in training data */
15689 +  proc sql;
15690 +    reset noprint;
15691 +    select count(*) into :em_nobs from &indata;
15692 +  quit;
15694 +  /* determine the number of input variables */
15695 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15696 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15698 +  /* retrieve targetEvent from decmeta */
15699 +  %let targetEvent=;
15700 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15701 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15702 +      data _null_;
15703 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15704 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15705 +      run;
15706 +    %end;
15707 +  %end;
15709 +  /* create targetTable if multipleTar eq Y */
15710 +  data temptarget;
15711 +    set &EM_DATA_VARIABLESET;
15712 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15713 +  run;
15715 + /* data sets */
15716 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15717 + %EM_GETNAME(key=EMTREE,        type=DATA);
15718 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15719 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15720 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15721 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15722 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15723 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15724 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15725 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15727 + /* files */
15728 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15729 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15731 + /* turn on pmml if requested */
15732 + %let nnpmml=0;
15733 + %if %symexist(EM_PMML) %then %do;
15734 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15735 +       %let nnpmml=1;
15737 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15738 +%end;
15740 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15742 + %if &nnpmml or &numClassTarget %then %do;
15744 +       /* create dmdb needed for pmml generation */
15745 +       %let tree_maxlevel = 512;
15746 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15747 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15748 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15749 +         %end;
15750 +       %end;
15751 +       %if &tree_maxlevel gt 0 %then %do;
15752 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15753 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15754 +       %end;
15756 +       %let targetOrderString =;
15757 +       %let targetString = ;
15758 +       data _null_;
15759 +          length orderString nameString $10000;
15760 +          retain orderString nameString;
15761 +          set &em_data_variableset end=eof;
15762 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15763 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15764 +          %end;
15765 +          %else %do;
15766 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15767 +          %end;          select(order);
15768 +            when('')        order ='DESC';
15769 +            when('FMTASC')  order='ASCFMT';
15770 +            when('FMTDESC') order='DESFMT';
15771 +            otherwise;
15772 +          end;
15773 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15774 +          nameString = trim(nameString)!!' '!!trim(NAME);
15776 +          if eof then do;
15777 +             call symput('targetOrderString', trim(orderString));
15778 +             call symput('targetString', trim(nameString));
15779 +          end;
15780 +       run;
15782 +       %let arborkluge= "work._treeDMDB";
15784 +       proc dmdb batch data=&indata
15785 +       %if &nnpmml %then %do;
15786 +           PMML
15787 +       %end;
15788 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15791 +   %if &nnpmml %then %do;
15792 +        %if "%EM_ID" ne "" %then %do;
15793 +          id %EM_ID;
15794 +        %end;
15795 +        %if &EM_NUM_CLASS gt 0 %then %do;
15796 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15797 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15798 +               &targetOrderString;
15799 +        %end;
15800 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15801 +          var %EM_INTERVAL;
15802 +        %end;
15803 +        target &targetString %EM_INTERVAL_TARGET;
15804 +        %if "%EM_FREQ" ne "" %then %do;
15805 +          freq %EM_FREQ;
15806 +        %end;
15807 +  %end;
15808 +  %else %do;
15809 +      class  &targetOrderString;
15810 +      target &targetString %EM_INTERVAL_TARGET;
15811 +  %end;
15812 +       run;
15813 +       quit;
15815 +       proc datasets lib=work nolist;
15816 +          delete classout varout;
15817 +       run;
15818 +       quit;
15820 +    %end;
15821 + %end;
15823 + /* run Arbor procedure */
15824 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15825 +  proc arbor data=&INDATA
15827 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15828 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15829 +  %end;
15831 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15832 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15833 +  %end;
15835 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15836 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15837 +  %end;
15839 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15840 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15841 +  %end;
15843 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15844 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15845 +  %end;
15847 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15848 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15849 +  %end;
15850 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15851 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15852 +  %end;
15853 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15854 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15855 +  %end;
15857 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15858 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15859 +      alpha = &EM_PROPERTY_SIGLEVEL
15860 +    %end;
15861 +  %end;
15863 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15864 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15865 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15866 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15867 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15869 +        padjust =
15870 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15871 +          &chaid
15872 +        %end;
15873 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15874 +          DEPTH
15875 +        %end;
15876 +      %end;
15877 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15878 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15879 +         pvars = &num_inputs
15880 +      %end;
15881 +    %end;
15882 +  %end;
15883 +  %else %do;
15884 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15885 +         padjust = NONE
15886 +      %end;
15887 +  %end;
15889 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15890 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15891 +    Maxrules = &num_nrules
15892 +  %end;
15894 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15895 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15896 +    Maxsurrs = &num_nsurrs
15897 +  %end;
15899 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15900 +     Missing=&EM_PROPERTY_MISSINGVALUE
15901 +  %end;
15903 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15904 +     USEVARONCE
15905 +  %end;
15907 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15908 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15909 +  %end;
15912 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15913 +    event = "&targetEvent"
15914 +  %end;
15916 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15917 +     DECSEARCH
15918 +  %end;
15920 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15921 +     PRIORSSEARCH
15922 +  %end;
15924 +  %if &arbor_1 ne %then %do;
15925 +    &arbor_1
15926 +  %end;
15928 +  %if &em_arbor ne %then %do;
15929 +     &em_arbor
15930 +  %end;
15931 +  ;
15932 + %end;
15933 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15934 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15935 +       interact;
15936 + %end;
15937 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15938 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15939 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15940 +    %put &em_codebar;
15941 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15942 +    %put &errormsg;
15943 +    %put &em_codebar;
15944 +    %goto doendm;
15945 +   %end;
15946 +   %else %do;
15947 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15948 +       interact;
15949 +   %end;
15950 + %end;
15952 + %else %do;
15953 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15954 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15955 +    %put &em_codebar;
15956 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15957 +    %put &errormsg;
15958 +    %put &em_codebar;
15959 +    %goto doendm;
15960 +   %end;
15961 +   %else %do;
15962 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15963 +        interact;
15964 +   %end;
15965 + %end;
15967 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15968 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15969 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15970 +    %end;
15972 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15973 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15974 +    %end;
15976 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15977 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15978 +    %end;
15980 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15981 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15982 +    %end;
15984 +    %if "%EM_FREQ" ne "" %then %do;
15985 +       freq %EM_FREQ;
15986 +    %end;
15988 +    %if "&multipleTar" eq "Y" %then %do;
15989 +       /* cycle through all target vars in variableset */
15990 +       %let tdsid = %sysfunc(open(temptarget));
15991 +       %if &tdsid %then %do;
15992 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15993 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15994 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15995 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15996 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15997 +             target &var / level = &lvl
15998 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15999 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16000 +             %end;
16001 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16002 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16003 +             %end;
16004 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16005 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16006 +             %end;
16007 +          %end;
16008 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16009 +       %end;
16010 +       useTarget variable = %EM_TARGET;
16011 +    %end;
16012 +    %else %do;
16013 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16014 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16015 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16016 +      %end;
16017 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16018 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16019 +      %end;
16020 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16021 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16022 +      %end;
16023 +    %end;
16025 +    %if "&multipleTar" eq "N" %then %do;
16026 +      &EM_DEC_STATEMENT;
16027 +    %end;
16029 +    Performance &EM_PROPERTY_PERFORMANCE
16030 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16031 +      nodesize=&EM_PROPERTY_NODESAMPLE
16032 +    %end;
16033 +    ;
16035 +    %if "&intFlag" eq "Y" %then %do;
16036 +       INTERACT Largest;
16037 +       Train maxnewdepth=0;
16038 +    %end;
16040 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16041 +         Assess
16042 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16043 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16044 +              %put &em_codebar;
16045 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16046 +              %put &errormsg;
16047 +              %put &em_codebar;
16048 +            %end;
16049 +            %else %do;
16050 +               Validata=&EM_IMPORT_VALIDATE
16051 +            %end;
16052 +         %end;
16053 +         %else %do;
16054 +           NoValidata
16055 +         %end;
16056 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16057 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16058 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16059 +               %if &dsid %then %do;
16060 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16061 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16062 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16063 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16064 +                   %else %do;
16065 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16066 +                      %else %let measure= MISC;
16067 +                   %end;
16068 +                 %end;
16069 +               %end;
16070 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16071 +            %end;
16072 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16073 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16074 +                 %let measure=ASE;
16075 +              %end;
16076 +              %else %do;
16077 +                 %let measure=MISC;
16078 +              %end;
16079 +            %end;
16080 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16081 +              %let measure=ASE;
16082 +            %end;
16083 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16084 +               %let measure = LIFT;
16085 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16086 +               %if &dsid %then %do;
16087 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16088 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16089 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16090 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16091 +                 %end;
16092 +               %end;
16093 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16094 +            %end;
16095 +            measure=&measure
16096 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16097 +               event = "&targetEvent"
16098 +            %end;
16099 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16100 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16101 +            %end;
16102 +         %end;
16103 +         %if "&multipleTar" eq "N" %then %do;
16104 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16105 +               CV
16106 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16107 +                 CVNITer = &EM_PROPERTY_CVNITER
16108 +               %end;
16109 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16110 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16111 +               %end;
16112 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16113 +                 CVSeed = &EM_PROPERTY_CVSEED
16114 +               %end;
16115 +            %end;
16116 +         %end;
16117 +       %end;
16118 +      ;
16120 +      %if "&intFlag" ne "Y" %then %do;
16121 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16122 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16123 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16124 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16126 +          SUBTREE &subtree
16127 +          %if "&subtree" eq "NLEAVES" %then %do;
16128 +            =&EM_PROPERTY_NSUBTREE
16129 +          %end;
16130 +          ;
16131 +        %end;
16133 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16134 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16135 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16136 +          %end;
16137 +       %end;
16138 +      %end;
16139 + %end;
16142 + MakeMacro nleaves = nleaves;
16143 + save
16144 + %if "&EM_USER_EMTREE" ne "" %then %do;
16145 +   MODEL=&EM_USER_EMTREE
16146 + %end;
16147 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16148 +   SEQUENCE=&EM_USER_OUTSEQ
16149 + %end;
16150 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16151 +   IMPORTANCE=&EM_USER_OUTIMPORT
16152 + %end;
16153 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16154 +   NODESTAT=&EM_USER_OUTNODES
16155 + %end;
16156 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16157 +   SUMMARY=&EM_USER_OUTSUMMARY
16158 + %end;
16159 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16160 +   STATSBYNODE=&EM_USER_OUTSTATS
16161 + %end;
16162 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16163 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16164 + %end;
16165 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16166 +   Pathlistnonmissing=&EM_USER_OUTPATH
16167 + %end;
16168 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16169 +   RULES = &EM_USER_OUTRULES
16170 + %end;
16171 + ;
16173 + %if "&intFlag" ne "Y" %then %do;
16175 +   %let lookupString = ;
16176 +   %if ^%symexist(EM_OPTION) %then
16177 +      %let EM_OPTION=;
16179 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16180 +      %let lookupString = LOOKUP=SELECT;
16181 +   %end;
16183 +   %let codetext=;
16184 +   %let norescodetxt=;
16186 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16187 +     %let codetext=&codetext DUMMY;
16188 +     %let norescodetxt=&norescodetxt DUMMY;
16189 +   %end;
16190 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16191 +     %let codetext=&codetext NOLEAFID;
16192 +     %let norescodetxt=&norescodetxt NOLEAFID;
16193 +   %end;
16194 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16195 +     %let norescodetxt=&norescodetxt NOPRED;
16196 +   %end;
16198 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16199 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16201 +   %if &nnpmml %then %do;
16202 +     code pmml;
16203 +   %end;
16205 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16206 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16207 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16208 +   %end;
16209 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16210 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16211 +   %end;
16212 + %end;
16214 + run;
16215 + quit;
16217 + /*%em_checkerror(); */
16218 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16219 +   /* Delete DMDB catalog */
16220 +   proc datasets lib=work nolist;
16221 +       delete _treeDMDB / mt=cat;
16222 +  run;
16223 +  %end;
16225 + %if &nnpmml %then %do;
16226 +    ods pmml close;
16227 + %end;
16229 +  %doendm:
16231 +%mend em_tree_runTreeProcedure;
16233 +%macro em_tree_createFitStats( multipleTar= );
16236 +  /* create targetTable is multipleTar eq Y */
16237 +  data temptarget;
16238 +    set &EM_DATA_VARIABLESET;
16239 +    where ROLE="TARGET";
16240 +  run;
16242 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16243 +   data &EM_USER_EMOUTFIT;
16244 +     length target $32;
16245 +     merge work.fit_train
16246 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16247 +       work.fit_valid
16248 +     %end;
16249 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16250 +       work.fit_test
16251 +     %end;
16252 +     ;
16253 +     %if "&multipleTar" eq "N" %then %do;
16254 +       target="%EM_TARGET";
16255 +     %end;
16256 +     %else %do;
16257 +       target = _TARGET_;
16258 +     %end;
16259 +     drop _NW_ _SUMW_
16260 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16261 +        _VSUMW_
16262 +     %end;
16263 +     ;
16264 +   run;
16266 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16267 +     proc datasets library=work nolist;
16268 +       delete fit_valid;
16269 +     run;
16270 +   %end;
16271 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16272 +     proc datasets library=work nolist;
16273 +       delete fit_test;
16274 +     run;
16275 +   %end;
16277 +%mend em_tree_createFitStats;
16280 +%macro em_tree_makeEnglishRules;
16282 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16283 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16285 +  /* verify that necessary tables exist and if not, skip processing */
16286 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16287 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16288 +    %goto doendm;
16289 +  %end;
16290 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16291 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16292 +    %goto doendm;
16293 +  %end;
16295 +  /* determine length of variable in outpath dataset */
16296 +  %let vlength= ;
16297 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16298 +  %if &dsid ne %then %do;
16299 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16300 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16301 +  %end;
16302 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16304 +  data tempoutpath;
16305 +    length varname $&vlength;
16306 +    retain varname;
16307 +    set &EM_USER_OUTPATH;
16309 +    if ^missing(variable) then varname=variable;
16310 +    else if ^missing(var_name) then varname=var_name;
16311 +    output;
16312 +  run;
16314 +  /* create an array of generated predicted variable names */
16315 +  %let tree_pred_vars = ;
16316 +  %let tree_pred_label = ;
16317 +  %let numpred= 0;
16318 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16320 +    data _null_;
16321 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16322 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16323 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16324 +     if eof then
16325 +       call symput('numpred', strip(put(_N_, BEST.)));
16326 +    run;
16327 +  %end;
16329 +  /* determine if NPRIORS exists in outnodes  */
16330 +  %local nprior_flag;
16331 +  data _null_;
16332 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16333 +    if eof then do;
16334 +      call symput('nprior_flag', strip(put(npriors, best.)));
16335 +    end;
16336 +  run;
16338 +  proc sort data=tempoutpath; by node; run;
16339 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16341 +  data tempoutpath;
16342 +    merge tempoutpath(in=_a) outnodes(keep= node
16343 +    %if "&nprior_flag" ne "." %then %do;
16344 +      NPRIORS
16345 +    %end;
16346 +    %else %do;
16347 +      N
16348 +    %end;
16349 +    %if &numpred gt 0 %then %do;
16350 +      %do i=1 %to &numpred;
16351 +        &&tree_pred_vars&i
16352 +      %end;
16353 +    %end;
16354 +    );
16355 +    by node;
16356 +    if _a;
16357 +  run;
16359 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16361 +  data _null_;
16362 +    file x;
16363 +    set tempoutpath;
16364 +    by node descending varname;
16365 +    retain origvar oldnode string;
16366 +    length origvar $32 oldnode 8 string $200;
16368 +    if _N_ = 1 then do;
16369 +      origvar = varname;
16370 +      oldnode = node;
16371 +    end;
16373 +    if first.node then do;
16374 +       put "&EM_CODEBAR";
16375 +       put " Node = " node;
16376 +       put "&EM_CODEBAR";
16377 +    end;
16379 +      if first.varname then do;
16380 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16381 +            if MISSING(CHARACTER_VALUE) then do;
16382 +             if NUMERIC_VALUE ne .  then do;
16383 +              if ^first.node then do;
16384 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16385 +              end;
16386 +              else do;
16387 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16388 +              end;
16389 +             end;
16390 +            end;
16391 +            else do;
16392 +              if ^first.node then do;
16393 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16394 +              end;
16395 +              else do;
16396 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16397 +              end;
16398 +             end;
16399 +         end;
16400 +         else if RELATION in ("=") then do;
16401 +            if ^first.node then do;
16402 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16403 +            end;
16404 +            else do;
16405 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16406 +            end;
16407 +         end;
16408 +         else if RELATION in ("ISMISSING") then do;
16409 +            if ^first.node then do;
16410 +              string = " AND "|| strip(varname) || " equals Missing";
16411 +            end;
16412 +            else do;
16413 +              string = "if "|| strip(varname) ||" equals Missing";
16414 +            end;
16415 +         end;
16416 +         else if RELATION in ("ISNOTMISSING") then do;
16417 +            if ^first.node then do;
16418 +              string = " AND "|| strip(varname) || " equals All Values";
16419 +            end;
16420 +            else do;
16421 +              string = "if "|| strip(varname) ||" equals All Values";
16422 +            end;
16423 +         end;
16424 +         if ^missing(varname) then origvar = varname;
16425 +         oldnode=node;
16427 +      end;
16428 +      else do;
16429 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16430 +          if MISSING(CHARACTER_VALUE) then do;
16431 +           if  NUMERIC_VALUE ne .  then do;
16432 +            if ^MISSING(string) then
16433 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16434 +            else
16435 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16436 +           end;
16437 +          end;
16438 +          else do;
16439 +            if ^MISSING(string) then
16440 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16441 +            else
16442 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16443 +          end;
16445 +         end;
16446 +         else if RELATION in ("=") then do;
16447 +           string = strip(string)||", "||strip(character_value);
16448 +         end;
16449 +         else if RELATION in ("ISMISSING") then do;
16451 +         end;
16452 +         if ^missing(varname) then origvar = varname;
16453 +         oldnode=node;
16454 +      end;
16455 +      if last.varname then do;
16456 +         if RELATION in ("ISMISSING") then do;
16457 +           if ^first.varname then do;
16458 +             string = strip(string) || " or MISSING";
16459 +           end;
16460 +         end;
16461 +         put string;
16462 +         if ^missing(varname) then origvar = varname;
16463 +         oldnode=node;
16464 +      end;
16466 +      if last.node then do;
16467 +         put "then ";
16468 +         put " Tree Node Identifier   = " node;
16470 +         %if "&nprior_flag" ne "." %then %do;
16471 +           put " Number of Observations = " NPRIORS;
16472 +         %end;
16473 +         %else %do;
16474 +           put " Number of Observations = " N;
16475 +         %end;
16477 +         %if &numpred gt 0 %then %do;
16478 +           %do i=1 %to &numpred;
16479 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16480 +           %end;
16481 +         %end;
16483 +         put " ";
16484 +         if ^missing(varname) then origvar = varname;
16485 +         oldnode=node;
16486 +      end;
16488 +  run;
16490 +  proc datasets lib=work nolist;
16491 +    delete tempoutpath outnodes;
16492 +  run;
16494 +  %doendm:
16495 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.15 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS3.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS3.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 11112 out of 11112 training cases.
NOTE: Using memory pool with 176443392 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 2853968 bytes of work memory.
NOTE: The subtree sequence contains 29 subtrees. The largest has 57 nodes and 29 leaves.
NOTE: Using subtree with 57 nodes and 29 leaves.
NOTE: Using subtree with 57 nodes and 29 leaves.
NOTE: Created macro variable NLEAVES equal to 29.
NOTE: The data set EMWS3.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS3.TREE_EMTREE has 1416 observations and 4 variables.
NOTE: The data set EMWS3.TREE_OUTNODES has 57 observations and 24 variables.
NOTE: The data set EMWS3.TREE_OUTPATH has 187 observations and 7 variables.
NOTE: The data set EMWS3.TREE_OUTRULES has 425 observations and 6 variables.
NOTE: The data set EMWS3.TREE_OUTSEQ has 29 observations and 20 variables.
NOTE: The data set EMWS3.TREE_OUTSTATS has 399 observations and 5 variables.
NOTE: The data set EMWS3.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS3.TREE_OUTTOPOLOGY has 57 observations and 5 variables.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\TREEFLOW.sas opened.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           0.90 seconds
      cpu time            0.51 seconds
 
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS3.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.92 seconds
      cpu time            0.53 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS3.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 187 observations read from the data set EMWS3.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 187 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 187 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 187 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set EMWS3.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 57 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 187 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 57 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 187 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 187 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 187 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=20Apr2017:01:31:28,
      Create Time=20Apr2017:01:31:28
 
NOTE: 347 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 187 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16497
16498  *------------------------------------------------------------*;
16499  * End TRAIN: Tree;
16500  *------------------------------------------------------------*;
 
16501  *------------------------------------------------------------*;
16502  * Close any missing semi colons;
16503  *------------------------------------------------------------*;
16504  ;
16505  ;
16506  ;
16507  ;
16508  quit;
16509  *------------------------------------------------------------*;
16510  * Close any unbalanced quotes;
16511  *------------------------------------------------------------*;
16512  /*; *"; *'; */
16513  ;
16514  run;
16515  quit;
16516  /* Reset EM Options */
16517  options formchar="|----|+|---+=|-/\<>*";
16518  options nocenter ls=256 ps=10000;
16519  goptions reset=all device=GIF NODISPLAY;
 
16520  proc sort data=WORK.EM_USER_REPORT;
16521  by ID VIEW;
16522  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 20, 2017
Time:                01:31:30
*------------------------------------------------------------*
16624  %let EMEXCEPTIONSTRING=;
16625  *------------------------------------------------------------*;
16626  * SCORE: Tree;
16627  *------------------------------------------------------------*;
16628  %let EM_ACTION = SCORE;
16629  %let syscc = 0;
16630  %macro main;
16631
16632    %if %upcase(&EM_ACTION) = CREATE %then %do;
16633      filename temp catalog 'sashelp.emmodl.tree_create.source';
16634      %include temp;
16635      filename temp;
16636
16637      %em_tree_create;
16638    %end;
16639
16640     %else
16641     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16642
16643         filename temp catalog 'sashelp.emmodl.tree_train.source';
16644         %include temp;
16645         filename temp;
16646         %em_tree_train;
16647     %end;
16648
16649    %else
16650    %if %upcase(&EM_ACTION) = SCORE %then %do;
16651      filename temp catalog 'sashelp.emmodl.tree_score.source';
16652      %include temp;
16653      filename temp;
16654
16655      %em_tree_score;
16656
16657    %end;
16658
16659    %else
16660    %if %upcase(&EM_ACTION) = REPORT %then %do;
16661
16662         filename temp catalog 'sashelp.emmodl.tree_report.source';
16663         %include temp;
16664         filename temp;
16665
16666         %em_tree_report;
16667     %end;
16668
16669    %else
16670    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16671
16672         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16673         %include temp;
16674         filename temp;
16675         %EM_TREE_OPENTREEVIEWER;
16676
16677     %end;
16678
16679    %else
16680    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16681
16682         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16683         %include temp;
16684         filename temp;
16685         %EM_TREE_CLOSETREEVIEWER;
16686
16687     %end;
16688
16689
16690     %doendm:
16691  %mend main;
16692
16693  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16695 +%macro em_tree_score;
16697 +   /* determine if multiple targets will be processed */
16698 +   %let em_tree_multipleTargets=N;
16699 +   %let em_tree_numTarget=1;
16700 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16701 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16702 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16703 +         %let em_tree_multipleTargets=N;
16704 +      %end;
16705 +      %else %do;
16706 +         /* create macro array of targets  */
16707 +         data _null_;
16708 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16709 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16710 +           if eof then
16711 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16712 +        run;
16714 +        %if &em_tree_numTarget gt 1 %then %do;
16715 +           %let em_tree_multipleTargets=Y;
16716 +        %end;
16717 +      %end;
16718 +   %end;
16720 +   /* build flow and publish scoring code */
16721 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16722 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16724 +   filename treeflow "&EM_USER_TREEFLOW";
16725 +   filename treepub "&EM_USER_TREEPUBLISH";
16727 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16728 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16730 +   %em_copyfile(infref=treeflow, outfref=flowref);
16731 +   %em_copyfile(infref=treepub, outfref=pubref);
16733 +   filename treeflow;
16734 +   filename treepub;
16736 +   /* if priors are used, add code to generate unadjusted residuals in export */
16737 +   %let useAdjPriors = N;
16738 +   data _null_;
16739 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16740 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16741 +   run;
16742 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16743 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16744 +      %include temp;
16745 +      filename temp;
16747 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16748 +      filename adjref "&EM_USER_adjResidualCode";
16749 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16751 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16753 +      filename adjref;
16754 +   %end;
16756 +   /* LEAF */
16757 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16758 +      data _null_;
16759 +        file flowref mod;
16760 +        put 'drop _LEAF_;';
16761 +      run;
16763 +      data _null_;
16764 +        file pubref mod;
16765 +        put 'drop _LEAF_;';
16766 +      run;
16768 +   %end;
16770 +   filename flowref;
16771 +   filename pubref;
16773 +   /* em_metachange code */
16774 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16775 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16776 +   %end;
16778 +   /* variable selection based on importance stat    */
16779 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16780 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16781 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16782 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16783 +     %let obs = %sysfunc(fetch(&dsid));
16784 +     %do %while(&obs=0);
16785 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16786 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16787 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16788 +       %let obs = %sysfunc(fetch(&dsid));
16789 +     %end;
16790 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16791 +   %end;
16793 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16794 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16795 +    %let tree_pred_vars = ;
16796 +    %let tree_pred_lvl =;
16797 +    %let numpred= 0;
16799 +    data _null_;
16800 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16801 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16802 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16803 +     if eof then
16804 +       call symput('numpred', strip(put(_N_, BEST.)));
16805 +    run;
16806 +   %end;
16808 +   %if &numpred ne 0 %then %do;
16809 +    %do i=1 %to &numpred;
16810 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16811 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16812 +    %end;
16813 +   %end;
16815 +   /* determine if multiple targets will be processed */
16816 +   %let em_tree_multipleTargets=N;
16817 +   %let em_tree_numTarget=1;
16818 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16819 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16820 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16821 +         %let em_tree_multipleTargets=N;
16822 +      %end;
16823 +      %else %do;
16824 +        data _null_;
16825 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16826 +          if eof then
16827 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16828 +        run;
16830 +        %if &em_tree_numTarget gt 1 %then %do;
16831 +           %let em_tree_multipleTargets=Y;
16832 +        %end;
16833 +     %end;
16834 +   %end;
16836 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16837 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16839 +      /* variable importance */
16840 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16841 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16843 +         %let validexist=0;
16844 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16845 +           %let validexist=1;
16846 +         %end;
16848 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16849 +         /* and the columns may not be generated                                                                                 */
16850 +         %let em_tree_cvexists=;
16851 +         %let em_tree_surrexists=.;
16852 +         data _null_;
16853 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16854 +            if eof then do ;
16855 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16856 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16857 +            end;
16858 +         run;
16860 +         data &EM_USER_OUTIMPORT;
16861 +            set &EM_USER_OUTIMPORT;
16863 +            /* format columns based on Precison value specified */
16864 +            format importance 15.&EM_PROPERTY_PRECISION
16865 +                 %if &validexist %then %do;
16866 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16867 +                 %end;
16868 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16869 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16870 +                 %end;
16871 +            ;
16872 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16873 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16874 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16875 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16876 +                 %if "&em_tree_surrexists" ne "" %then %do;
16877 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16878 +                 %end;
16879 +                 %if &validexist %then %do;
16880 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16881 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16882 +                 %end;
16883 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16884 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16885 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16886 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16887 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16888 +                 %end;
16889 +            ;
16890 +         run;
16892 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16893 +      %end;
16894 +   %end;
16896 +   %doendm:
16897 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=20Apr2017:01:31:29,
      Create Time=20Apr2017:01:31:29
 
NOTE: 492 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=20Apr2017:01:31:29,
      Create Time=20Apr2017:01:31:29
 
NOTE: 470 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=19230,
      Last Modified=20Apr2017:01:31:29,
      Create Time=20Apr2017:01:31:29
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=18557,
      Last Modified=20Apr2017:01:31:29,
      Create Time=20Apr2017:01:31:29
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS3.TREE_OUTIMPORT.
NOTE: The data set EMWS3.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16898
16899  *------------------------------------------------------------*;
16900  * End SCORE: Tree;
16901  *------------------------------------------------------------*;
 
16902  proc sort data=WORK.EM_METACHANGE;
16903  by key uname;
16904  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16905  filename x "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\CDELTA_TRAIN.sas";
16906  data _null_;
16907  file x;
16908  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
16909  put 'ROLE = "REJECTED";';
16910  put 'end;';
16911  put 'else ';
16912  put 'if upcase(NAME) = "DEMREG" then do;';
16913  put 'ROLE = "REJECTED";';
16914  put 'end;';
16915  put 'else ';
16916  put 'if upcase(NAME) = "DEMTVREG" then do;';
16917  put 'ROLE = "REJECTED";';
16918  put 'end;';
16919  put 'else ';
16920  put 'if upcase(NAME) = "PROMCLASS" then do;';
16921  put 'ROLE = "REJECTED";';
16922  put 'end;';
16923  put 'else ';
16924  put 'if upcase(NAME) = "PROMSPEND" then do;';
16925  put 'ROLE = "REJECTED";';
16926  put 'end;';
16927  put 'else ';
16928  put 'if upcase(NAME) = "PROMTIME" then do;';
16929  put 'ROLE = "REJECTED";';
16930  put 'end;';
16931  put 'else ';
16932  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
16933  put 'ROLE = "ASSESS";';
16934  put 'end;';
16935  put 'else ';
16936  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
16937  put 'ROLE = "ASSESS";';
16938  put 'end;';
16939  put 'else ';
16940  put 'if upcase(NAME) = "_NODE_" then do;';
16941  put 'ROLE = "SEGMENT";';
16942  put 'LEVEL = "NOMINAL";';
16943  put 'end;';
16944  run;
 
NOTE: The file X is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=20Apr2017:01:31:29,
      Create Time=20Apr2017:00:12:40
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16945  filename x;
NOTE: Fileref X has been deassigned.
 
16946  filename emflow "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas";
16947  *------------------------------------------------------------*;
16948  * Tree: Scoring DATA data;
16949  *------------------------------------------------------------*;
16950  data EMWS3.Tree_TRAIN
16951  / view=EMWS3.Tree_TRAIN
16952  ;
16953  set EMWS3.Part_TRAIN
16954  ;
16955  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas.
16956 +****************************************************************;
16957 +******             DECISION TREE SCORING CODE             ******;
16958 +****************************************************************;
16959 +
16960 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16961 +LENGTH F_TargetBuy  $   12;
16962 +LENGTH I_TargetBuy  $   12;
16963 +LENGTH _WARN_  $    4;
16964 +
16965 +******              LABELS FOR NEW VARIABLES              ******;
16966 +label _NODE_ = 'Node' ;
16967 +label _LEAF_ = 'Leaf' ;
16968 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
16969 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
16970 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
16971 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
16972 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
16973 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
16974 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
16975 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
16976 +label F_TargetBuy = 'From: TargetBuy' ;
16977 +label I_TargetBuy = 'Into: TargetBuy' ;
16978 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
16979 +label _WARN_ = 'Warnings' ;
16980 +
16981 +
16982 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16983 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
16984 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
16985 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
16986 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
16987 +
16988 +
16989 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
16990 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
16991 +
16992 +******             ASSIGN OBSERVATION TO NODE             ******;
16993 +IF  NOT MISSING(DemAge ) AND
16994 +  DemAge  <                 44.5 THEN DO;
16995 +  IF  NOT MISSING(DemAffl ) AND
16996 +    DemAffl  <                  9.5 THEN DO;
16997 +    _ARBFMT_1 = PUT( DemGender , $1.);
16998 +     %DMNORMIP( _ARBFMT_1);
16999 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17000 +      IF  NOT MISSING(DemAffl ) AND
17001 +        DemAffl  <                  6.5 THEN DO;
17002 +        _NODE_  =                   16;
17003 +        _LEAF_  =                    1;
17004 +        P_TargetBuy0  =     0.65573770491803;
17005 +        P_TargetBuy1  =     0.34426229508196;
17006 +        Q_TargetBuy0  =     0.65573770491803;
17007 +        Q_TargetBuy1  =     0.34426229508196;
17008 +        V_TargetBuy0  =     0.59696969696969;
17009 +        V_TargetBuy1  =      0.4030303030303;
17010 +        I_TargetBuy  = '0' ;
17011 +        U_TargetBuy  =                    0;
17012 +        END;
17013 +      ELSE DO;
17014 +        IF  NOT MISSING(DemAge ) AND
17015 +                          39.5 <= DemAge  THEN DO;
17016 +          _NODE_  =                   33;
17017 +          _LEAF_  =                    3;
17018 +          P_TargetBuy0  =     0.56852791878172;
17019 +          P_TargetBuy1  =     0.43147208121827;
17020 +          Q_TargetBuy0  =     0.56852791878172;
17021 +          Q_TargetBuy1  =     0.43147208121827;
17022 +          V_TargetBuy0  =     0.57219251336898;
17023 +          V_TargetBuy1  =     0.42780748663101;
17024 +          I_TargetBuy  = '0' ;
17025 +          U_TargetBuy  =                    0;
17026 +          END;
17027 +        ELSE DO;
17028 +          _NODE_  =                   32;
17029 +          _LEAF_  =                    2;
17030 +          P_TargetBuy0  =     0.38622754491017;
17031 +          P_TargetBuy1  =     0.61377245508982;
17032 +          Q_TargetBuy0  =     0.38622754491017;
17033 +          Q_TargetBuy1  =     0.61377245508982;
17034 +          V_TargetBuy0  =     0.37978142076502;
17035 +          V_TargetBuy1  =     0.62021857923497;
17036 +          I_TargetBuy  = '1' ;
17037 +          U_TargetBuy  =                    1;
17038 +          END;
17039 +        END;
17040 +      END;
17041 +    ELSE DO;
17042 +      _ARBFMT_1 = PUT( DemGender , $1.);
17043 +       %DMNORMIP( _ARBFMT_1);
17044 +      IF _ARBFMT_1 IN ('M' ) THEN DO;
17045 +        IF  NOT MISSING(DemAge ) AND
17046 +                          39.5 <= DemAge  THEN DO;
17047 +          _NODE_  =                   35;
17048 +          _LEAF_  =                    5;
17049 +          P_TargetBuy0  =                 0.82;
17050 +          P_TargetBuy1  =                 0.18;
17051 +          Q_TargetBuy0  =                 0.82;
17052 +          Q_TargetBuy1  =                 0.18;
17053 +          V_TargetBuy0  =     0.84615384615384;
17054 +          V_TargetBuy1  =     0.15384615384615;
17055 +          I_TargetBuy  = '0' ;
17056 +          U_TargetBuy  =                    0;
17057 +          END;
17058 +        ELSE DO;
17059 +          _NODE_  =                   34;
17060 +          _LEAF_  =                    4;
17061 +          P_TargetBuy0  =      0.6255707762557;
17062 +          P_TargetBuy1  =     0.37442922374429;
17063 +          Q_TargetBuy0  =      0.6255707762557;
17064 +          Q_TargetBuy1  =     0.37442922374429;
17065 +          V_TargetBuy0  =     0.65945945945945;
17066 +          V_TargetBuy1  =     0.34054054054054;
17067 +          I_TargetBuy  = '0' ;
17068 +          U_TargetBuy  =                    0;
17069 +          END;
17070 +        END;
17071 +      ELSE DO;
17072 +        _NODE_  =                   19;
17073 +        _LEAF_  =                    6;
17074 +        P_TargetBuy0  =     0.87012987012987;
17075 +        P_TargetBuy1  =     0.12987012987012;
17076 +        Q_TargetBuy0  =     0.87012987012987;
17077 +        Q_TargetBuy1  =     0.12987012987012;
17078 +        V_TargetBuy0  =     0.86792452830188;
17079 +        V_TargetBuy1  =     0.13207547169811;
17080 +        I_TargetBuy  = '0' ;
17081 +        U_TargetBuy  =                    0;
17082 +        END;
17083 +      END;
17084 +    END;
17085 +  ELSE DO;
17086 +    _ARBFMT_1 = PUT( DemGender , $1.);
17087 +     %DMNORMIP( _ARBFMT_1);
17088 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17089 +      IF  NOT MISSING(DemAffl ) AND
17090 +                        11.5 <= DemAffl  THEN DO;
17091 +        IF  NOT MISSING(DemAffl ) AND
17092 +                          14.5 <= DemAffl  THEN DO;
17093 +          _NODE_  =                   39;
17094 +          _LEAF_  =                   10;
17095 +          P_TargetBuy0  =     0.06467661691542;
17096 +          P_TargetBuy1  =     0.93532338308457;
17097 +          Q_TargetBuy0  =     0.06467661691542;
17098 +          Q_TargetBuy1  =     0.93532338308457;
17099 +          V_TargetBuy0  =     0.05729166666666;
17100 +          V_TargetBuy1  =     0.94270833333333;
17101 +          I_TargetBuy  = '1' ;
17102 +          U_TargetBuy  =                    1;
17103 +          END;
17104 +        ELSE DO;
17105 +          _NODE_  =                   38;
17106 +          _LEAF_  =                    9;
17107 +          P_TargetBuy0  =     0.19787985865724;
17108 +          P_TargetBuy1  =     0.80212014134275;
17109 +          Q_TargetBuy0  =     0.19787985865724;
17110 +          Q_TargetBuy1  =     0.80212014134275;
17111 +          V_TargetBuy0  =     0.22535211267605;
17112 +          V_TargetBuy1  =     0.77464788732394;
17113 +          I_TargetBuy  = '1' ;
17114 +          U_TargetBuy  =                    1;
17115 +          END;
17116 +        END;
17117 +      ELSE DO;
17118 +        IF  NOT MISSING(DemAge ) AND
17119 +                          40.5 <= DemAge  THEN DO;
17120 +          _NODE_  =                   37;
17121 +          _LEAF_  =                    8;
17122 +          P_TargetBuy0  =     0.46491228070175;
17123 +          P_TargetBuy1  =     0.53508771929824;
17124 +          Q_TargetBuy0  =     0.46491228070175;
17125 +          Q_TargetBuy1  =     0.53508771929824;
17126 +          V_TargetBuy0  =     0.37234042553191;
17127 +          V_TargetBuy1  =     0.62765957446808;
17128 +          I_TargetBuy  = '1' ;
17129 +          U_TargetBuy  =                    1;
17130 +          END;
17131 +        ELSE DO;
17132 +          _NODE_  =                   36;
17133 +          _LEAF_  =                    7;
17134 +          P_TargetBuy0  =     0.26206896551724;
17135 +          P_TargetBuy1  =     0.73793103448275;
17136 +          Q_TargetBuy0  =     0.26206896551724;
17137 +          Q_TargetBuy1  =     0.73793103448275;
17138 +          V_TargetBuy0  =      0.2369337979094;
17139 +          V_TargetBuy1  =     0.76306620209059;
17140 +          I_TargetBuy  = '1' ;
17141 +          U_TargetBuy  =                    1;
17142 +          END;
17143 +        END;
17144 +      END;
17145 +    ELSE DO;
17146 +      IF  NOT MISSING(DemAffl ) AND
17147 +                        14.5 <= DemAffl  THEN DO;
17148 +        _NODE_  =                   23;
17149 +        _LEAF_  =                   13;
17150 +        P_TargetBuy0  =     0.11111111111111;
17151 +        P_TargetBuy1  =     0.88888888888888;
17152 +        Q_TargetBuy0  =     0.11111111111111;
17153 +        Q_TargetBuy1  =     0.88888888888888;
17154 +        V_TargetBuy0  =     0.17567567567567;
17155 +        V_TargetBuy1  =     0.82432432432432;
17156 +        I_TargetBuy  = '1' ;
17157 +        U_TargetBuy  =                    1;
17158 +        END;
17159 +      ELSE DO;
17160 +        IF  NOT MISSING(DemAffl ) AND
17161 +                          12.5 <= DemAffl  THEN DO;
17162 +          _NODE_  =                   41;
17163 +          _LEAF_  =                   12;
17164 +          P_TargetBuy0  =     0.38028169014084;
17165 +          P_TargetBuy1  =     0.61971830985915;
17166 +          Q_TargetBuy0  =     0.38028169014084;
17167 +          Q_TargetBuy1  =     0.61971830985915;
17168 +          V_TargetBuy0  =     0.48333333333333;
17169 +          V_TargetBuy1  =     0.51666666666666;
17170 +          I_TargetBuy  = '1' ;
17171 +          U_TargetBuy  =                    1;
17172 +          END;
17173 +        ELSE DO;
17174 +          _NODE_  =                   40;
17175 +          _LEAF_  =                   11;
17176 +          P_TargetBuy0  =     0.58394160583941;
17177 +          P_TargetBuy1  =     0.41605839416058;
17178 +          Q_TargetBuy0  =     0.58394160583941;
17179 +          Q_TargetBuy1  =     0.41605839416058;
17180 +          V_TargetBuy0  =     0.65551839464882;
17181 +          V_TargetBuy1  =     0.34448160535117;
17182 +          I_TargetBuy  = '0' ;
17183 +          U_TargetBuy  =                    0;
17184 +          END;
17185 +        END;
17186 +      END;
17187 +    END;
17188 +  END;
17189 +ELSE DO;
17190 +  IF  NOT MISSING(DemAffl ) AND
17191 +                    12.5 <= DemAffl  THEN DO;
17192 +    IF  NOT MISSING(DemAffl ) AND
17193 +                      16.5 <= DemAffl  THEN DO;
17194 +      IF  NOT MISSING(DemAffl ) AND
17195 +                        19.5 <= DemAffl  THEN DO;
17196 +        _NODE_  =                   31;
17197 +        _LEAF_  =                   29;
17198 +        P_TargetBuy0  =                    0;
17199 +        P_TargetBuy1  =                    1;
17200 +        Q_TargetBuy0  =                    0;
17201 +        Q_TargetBuy1  =                    1;
17202 +        V_TargetBuy0  =                 0.04;
17203 +        V_TargetBuy1  =                 0.96;
17204 +        I_TargetBuy  = '1' ;
17205 +        U_TargetBuy  =                    1;
17206 +        END;
17207 +      ELSE DO;
17208 +        _ARBFMT_1 = PUT( DemGender , $1.);
17209 +         %DMNORMIP( _ARBFMT_1);
17210 +        IF _ARBFMT_1 IN ('M' ,'F' ) THEN DO;
17211 +          _NODE_  =                   50;
17212 +          _LEAF_  =                   27;
17213 +          P_TargetBuy0  =               0.2625;
17214 +          P_TargetBuy1  =               0.7375;
17215 +          Q_TargetBuy0  =               0.2625;
17216 +          Q_TargetBuy1  =               0.7375;
17217 +          V_TargetBuy0  =     0.28169014084507;
17218 +          V_TargetBuy1  =     0.71830985915492;
17219 +          I_TargetBuy  = '1' ;
17220 +          U_TargetBuy  =                    1;
17221 +          END;
17222 +        ELSE DO;
17223 +          _NODE_  =                   51;
17224 +          _LEAF_  =                   28;
17225 +          P_TargetBuy0  =     0.72727272727272;
17226 +          P_TargetBuy1  =     0.27272727272727;
17227 +          Q_TargetBuy0  =     0.72727272727272;
17228 +          Q_TargetBuy1  =     0.27272727272727;
17229 +          V_TargetBuy0  =                  0.9;
17230 +          V_TargetBuy1  =                  0.1;
17231 +          I_TargetBuy  = '0' ;
17232 +          U_TargetBuy  =                    0;
17233 +          END;
17234 +        END;
17235 +      END;
17236 +    ELSE DO;
17237 +      _ARBFMT_1 = PUT( DemGender , $1.);
17238 +       %DMNORMIP( _ARBFMT_1);
17239 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17240 +        _NODE_  =                   29;
17241 +        _LEAF_  =                   26;
17242 +        P_TargetBuy0  =     0.53221957040572;
17243 +        P_TargetBuy1  =     0.46778042959427;
17244 +        Q_TargetBuy0  =     0.53221957040572;
17245 +        Q_TargetBuy1  =     0.46778042959427;
17246 +        V_TargetBuy0  =     0.46172839506172;
17247 +        V_TargetBuy1  =     0.53827160493827;
17248 +        I_TargetBuy  = '0' ;
17249 +        U_TargetBuy  =                    0;
17250 +        END;
17251 +      ELSE DO;
17252 +        _NODE_  =                   28;
17253 +        _LEAF_  =                   25;
17254 +        P_TargetBuy0  =     0.76029962546816;
17255 +        P_TargetBuy1  =     0.23970037453183;
17256 +        Q_TargetBuy0  =     0.76029962546816;
17257 +        Q_TargetBuy1  =     0.23970037453183;
17258 +        V_TargetBuy0  =     0.77935943060498;
17259 +        V_TargetBuy1  =     0.22064056939501;
17260 +        I_TargetBuy  = '0' ;
17261 +        U_TargetBuy  =                    0;
17262 +        END;
17263 +      END;
17264 +    END;
17265 +  ELSE DO;
17266 +    _ARBFMT_1 = PUT( DemGender , $1.);
17267 +     %DMNORMIP( _ARBFMT_1);
17268 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17269 +      IF  NOT MISSING(DemAffl ) AND
17270 +        DemAffl  <                  8.5 THEN DO;
17271 +        IF  NOT MISSING(DemAffl ) AND
17272 +          DemAffl  <                  5.5 THEN DO;
17273 +          IF  NOT MISSING(DemAge ) THEN DO;
17274 +            _NODE_  =                   52;
17275 +            _LEAF_  =                   14;
17276 +            P_TargetBuy0  =     0.94025157232704;
17277 +            P_TargetBuy1  =     0.05974842767295;
17278 +            Q_TargetBuy0  =     0.94025157232704;
17279 +            Q_TargetBuy1  =     0.05974842767295;
17280 +            V_TargetBuy0  =     0.91891891891891;
17281 +            V_TargetBuy1  =     0.08108108108108;
17282 +            I_TargetBuy  = '0' ;
17283 +            U_TargetBuy  =                    0;
17284 +            END;
17285 +          ELSE DO;
17286 +            _NODE_  =                   53;
17287 +            _LEAF_  =                   15;
17288 +            P_TargetBuy0  =     0.78571428571428;
17289 +            P_TargetBuy1  =     0.21428571428571;
17290 +            Q_TargetBuy0  =     0.78571428571428;
17291 +            Q_TargetBuy1  =     0.21428571428571;
17292 +            V_TargetBuy0  =     0.79245283018867;
17293 +            V_TargetBuy1  =     0.20754716981132;
17294 +            I_TargetBuy  = '0' ;
17295 +            U_TargetBuy  =                    0;
17296 +            END;
17297 +          END;
17298 +        ELSE DO;
17299 +          _NODE_  =                   43;
17300 +          _LEAF_  =                   16;
17301 +          P_TargetBuy0  =     0.84289617486338;
17302 +          P_TargetBuy1  =     0.15710382513661;
17303 +          Q_TargetBuy0  =     0.84289617486338;
17304 +          Q_TargetBuy1  =     0.15710382513661;
17305 +          V_TargetBuy0  =     0.86320109439124;
17306 +          V_TargetBuy1  =     0.13679890560875;
17307 +          I_TargetBuy  = '0' ;
17308 +          U_TargetBuy  =                    0;
17309 +          END;
17310 +        END;
17311 +      ELSE DO;
17312 +        IF  NOT MISSING(DemAge ) THEN DO;
17313 +          IF  NOT MISSING(DemAffl ) AND
17314 +                            10.5 <= DemAffl  THEN DO;
17315 +            _NODE_  =                   55;
17316 +            _LEAF_  =                   18;
17317 +            P_TargetBuy0  =       0.690036900369;
17318 +            P_TargetBuy1  =     0.30996309963099;
17319 +            Q_TargetBuy0  =       0.690036900369;
17320 +            Q_TargetBuy1  =     0.30996309963099;
17321 +            V_TargetBuy0  =     0.69047619047619;
17322 +            V_TargetBuy1  =      0.3095238095238;
17323 +            I_TargetBuy  = '0' ;
17324 +            U_TargetBuy  =                    0;
17325 +            END;
17326 +          ELSE DO;
17327 +            _NODE_  =                   54;
17328 +            _LEAF_  =                   17;
17329 +            P_TargetBuy0  =     0.79824561403508;
17330 +            P_TargetBuy1  =     0.20175438596491;
17331 +            Q_TargetBuy0  =     0.79824561403508;
17332 +            Q_TargetBuy1  =     0.20175438596491;
17333 +            V_TargetBuy0  =     0.76797698945349;
17334 +            V_TargetBuy1  =      0.2320230105465;
17335 +            I_TargetBuy  = '0' ;
17336 +            U_TargetBuy  =                    0;
17337 +            END;
17338 +          END;
17339 +        ELSE DO;
17340 +          _NODE_  =                   45;
17341 +          _LEAF_  =                   19;
17342 +          P_TargetBuy0  =     0.55294117647058;
17343 +          P_TargetBuy1  =     0.44705882352941;
17344 +          Q_TargetBuy0  =     0.55294117647058;
17345 +          Q_TargetBuy1  =     0.44705882352941;
17346 +          V_TargetBuy0  =     0.55089820359281;
17347 +          V_TargetBuy1  =     0.44910179640718;
17348 +          I_TargetBuy  = '0' ;
17349 +          U_TargetBuy  =                    0;
17350 +          END;
17351 +        END;
17352 +      END;
17353 +    ELSE DO;
17354 +      IF  NOT MISSING(DemAffl ) AND
17355 +        DemAffl  <                  8.5 THEN DO;
17356 +        IF  NOT MISSING(DemAge ) AND
17357 +          DemAge  <                 76.5 THEN DO;
17358 +          IF  NOT MISSING(DemAffl ) AND
17359 +            DemAffl  <                  5.5 THEN DO;
17360 +            _NODE_  =                   56;
17361 +            _LEAF_  =                   20;
17362 +            P_TargetBuy0  =     0.98786039453717;
17363 +            P_TargetBuy1  =     0.01213960546282;
17364 +            Q_TargetBuy0  =     0.98786039453717;
17365 +            Q_TargetBuy1  =     0.01213960546282;
17366 +            V_TargetBuy0  =     0.98095238095238;
17367 +            V_TargetBuy1  =     0.01904761904761;
17368 +            I_TargetBuy  = '0' ;
17369 +            U_TargetBuy  =                    0;
17370 +            END;
17371 +          ELSE DO;
17372 +            _NODE_  =                   57;
17373 +            _LEAF_  =                   21;
17374 +            P_TargetBuy0  =     0.95436664044059;
17375 +            P_TargetBuy1  =      0.0456333595594;
17376 +            Q_TargetBuy0  =     0.95436664044059;
17377 +            Q_TargetBuy1  =      0.0456333595594;
17378 +            V_TargetBuy0  =     0.96105919003115;
17379 +            V_TargetBuy1  =     0.03894080996884;
17380 +            I_TargetBuy  = '0' ;
17381 +            U_TargetBuy  =                    0;
17382 +            END;
17383 +          END;
17384 +        ELSE DO;
17385 +          _NODE_  =                   47;
17386 +          _LEAF_  =                   22;
17387 +          P_TargetBuy0  =     0.90118577075098;
17388 +          P_TargetBuy1  =     0.09881422924901;
17389 +          Q_TargetBuy0  =     0.90118577075098;
17390 +          Q_TargetBuy1  =     0.09881422924901;
17391 +          V_TargetBuy0  =     0.91860465116279;
17392 +          V_TargetBuy1  =      0.0813953488372;
17393 +          I_TargetBuy  = '0' ;
17394 +          U_TargetBuy  =                    0;
17395 +          END;
17396 +        END;
17397 +      ELSE DO;
17398 +        _ARBFMT_1 = PUT( DemGender , $1.);
17399 +         %DMNORMIP( _ARBFMT_1);
17400 +        IF _ARBFMT_1 IN ('M' ) THEN DO;
17401 +          _NODE_  =                   48;
17402 +          _LEAF_  =                   23;
17403 +          P_TargetBuy0  =     0.87226697353279;
17404 +          P_TargetBuy1  =      0.1277330264672;
17405 +          Q_TargetBuy0  =     0.87226697353279;
17406 +          Q_TargetBuy1  =      0.1277330264672;
17407 +          V_TargetBuy0  =     0.88209606986899;
17408 +          V_TargetBuy1  =       0.117903930131;
17409 +          I_TargetBuy  = '0' ;
17410 +          U_TargetBuy  =                    0;
17411 +          END;
17412 +        ELSE DO;
17413 +          _NODE_  =                   49;
17414 +          _LEAF_  =                   24;
17415 +          P_TargetBuy0  =     0.94173228346456;
17416 +          P_TargetBuy1  =     0.05826771653543;
17417 +          Q_TargetBuy0  =     0.94173228346456;
17418 +          Q_TargetBuy1  =     0.05826771653543;
17419 +          V_TargetBuy0  =     0.93944099378882;
17420 +          V_TargetBuy1  =     0.06055900621118;
17421 +          I_TargetBuy  = '0' ;
17422 +          U_TargetBuy  =                    0;
17423 +          END;
17424 +        END;
17425 +      END;
17426 +    END;
17427 +  END;
17428 +
17429 +*****  RESIDUALS R_ *************;
17430 +IF  F_TargetBuy  NE '0'
17431 +AND F_TargetBuy  NE '1'  THEN DO;
17432 +        R_TargetBuy0  = .;
17433 +        R_TargetBuy1  = .;
17434 + END;
17435 + ELSE DO;
17436 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17437 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17438 +       SELECT( F_TargetBuy  );
17439 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17440 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17441 +       END;
17442 + END;
17443 +
17444 +****************************************************************;
17445 +******          END OF DECISION TREE SCORING CODE         ******;
17446 +****************************************************************;
17447 +
17448 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17449  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
17450  quit;
17451  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17452  filename emflow "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas";
17453  *------------------------------------------------------------*;
17454  * Tree: Scoring VALIDATE data;
17455  *------------------------------------------------------------*;
17456  data EMWS3.Tree_VALIDATE
17457  / view=EMWS3.Tree_VALIDATE
17458  ;
17459  set EMWS3.Part_VALIDATE
17460  ;
17461  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas.
17462 +****************************************************************;
17463 +******             DECISION TREE SCORING CODE             ******;
17464 +****************************************************************;
17465 +
17466 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17467 +LENGTH F_TargetBuy  $   12;
17468 +LENGTH I_TargetBuy  $   12;
17469 +LENGTH _WARN_  $    4;
17470 +
17471 +******              LABELS FOR NEW VARIABLES              ******;
17472 +label _NODE_ = 'Node' ;
17473 +label _LEAF_ = 'Leaf' ;
17474 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17475 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17476 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17477 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17478 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17479 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17480 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17481 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17482 +label F_TargetBuy = 'From: TargetBuy' ;
17483 +label I_TargetBuy = 'Into: TargetBuy' ;
17484 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17485 +label _WARN_ = 'Warnings' ;
17486 +
17487 +
17488 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17489 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17490 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17491 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17492 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17493 +
17494 +
17495 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17496 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17497 +
17498 +******             ASSIGN OBSERVATION TO NODE             ******;
17499 +IF  NOT MISSING(DemAge ) AND
17500 +  DemAge  <                 44.5 THEN DO;
17501 +  IF  NOT MISSING(DemAffl ) AND
17502 +    DemAffl  <                  9.5 THEN DO;
17503 +    _ARBFMT_1 = PUT( DemGender , $1.);
17504 +     %DMNORMIP( _ARBFMT_1);
17505 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17506 +      IF  NOT MISSING(DemAffl ) AND
17507 +        DemAffl  <                  6.5 THEN DO;
17508 +        _NODE_  =                   16;
17509 +        _LEAF_  =                    1;
17510 +        P_TargetBuy0  =     0.65573770491803;
17511 +        P_TargetBuy1  =     0.34426229508196;
17512 +        Q_TargetBuy0  =     0.65573770491803;
17513 +        Q_TargetBuy1  =     0.34426229508196;
17514 +        V_TargetBuy0  =     0.59696969696969;
17515 +        V_TargetBuy1  =      0.4030303030303;
17516 +        I_TargetBuy  = '0' ;
17517 +        U_TargetBuy  =                    0;
17518 +        END;
17519 +      ELSE DO;
17520 +        IF  NOT MISSING(DemAge ) AND
17521 +                          39.5 <= DemAge  THEN DO;
17522 +          _NODE_  =                   33;
17523 +          _LEAF_  =                    3;
17524 +          P_TargetBuy0  =     0.56852791878172;
17525 +          P_TargetBuy1  =     0.43147208121827;
17526 +          Q_TargetBuy0  =     0.56852791878172;
17527 +          Q_TargetBuy1  =     0.43147208121827;
17528 +          V_TargetBuy0  =     0.57219251336898;
17529 +          V_TargetBuy1  =     0.42780748663101;
17530 +          I_TargetBuy  = '0' ;
17531 +          U_TargetBuy  =                    0;
17532 +          END;
17533 +        ELSE DO;
17534 +          _NODE_  =                   32;
17535 +          _LEAF_  =                    2;
17536 +          P_TargetBuy0  =     0.38622754491017;
17537 +          P_TargetBuy1  =     0.61377245508982;
17538 +          Q_TargetBuy0  =     0.38622754491017;
17539 +          Q_TargetBuy1  =     0.61377245508982;
17540 +          V_TargetBuy0  =     0.37978142076502;
17541 +          V_TargetBuy1  =     0.62021857923497;
17542 +          I_TargetBuy  = '1' ;
17543 +          U_TargetBuy  =                    1;
17544 +          END;
17545 +        END;
17546 +      END;
17547 +    ELSE DO;
17548 +      _ARBFMT_1 = PUT( DemGender , $1.);
17549 +       %DMNORMIP( _ARBFMT_1);
17550 +      IF _ARBFMT_1 IN ('M' ) THEN DO;
17551 +        IF  NOT MISSING(DemAge ) AND
17552 +                          39.5 <= DemAge  THEN DO;
17553 +          _NODE_  =                   35;
17554 +          _LEAF_  =                    5;
17555 +          P_TargetBuy0  =                 0.82;
17556 +          P_TargetBuy1  =                 0.18;
17557 +          Q_TargetBuy0  =                 0.82;
17558 +          Q_TargetBuy1  =                 0.18;
17559 +          V_TargetBuy0  =     0.84615384615384;
17560 +          V_TargetBuy1  =     0.15384615384615;
17561 +          I_TargetBuy  = '0' ;
17562 +          U_TargetBuy  =                    0;
17563 +          END;
17564 +        ELSE DO;
17565 +          _NODE_  =                   34;
17566 +          _LEAF_  =                    4;
17567 +          P_TargetBuy0  =      0.6255707762557;
17568 +          P_TargetBuy1  =     0.37442922374429;
17569 +          Q_TargetBuy0  =      0.6255707762557;
17570 +          Q_TargetBuy1  =     0.37442922374429;
17571 +          V_TargetBuy0  =     0.65945945945945;
17572 +          V_TargetBuy1  =     0.34054054054054;
17573 +          I_TargetBuy  = '0' ;
17574 +          U_TargetBuy  =                    0;
17575 +          END;
17576 +        END;
17577 +      ELSE DO;
17578 +        _NODE_  =                   19;
17579 +        _LEAF_  =                    6;
17580 +        P_TargetBuy0  =     0.87012987012987;
17581 +        P_TargetBuy1  =     0.12987012987012;
17582 +        Q_TargetBuy0  =     0.87012987012987;
17583 +        Q_TargetBuy1  =     0.12987012987012;
17584 +        V_TargetBuy0  =     0.86792452830188;
17585 +        V_TargetBuy1  =     0.13207547169811;
17586 +        I_TargetBuy  = '0' ;
17587 +        U_TargetBuy  =                    0;
17588 +        END;
17589 +      END;
17590 +    END;
17591 +  ELSE DO;
17592 +    _ARBFMT_1 = PUT( DemGender , $1.);
17593 +     %DMNORMIP( _ARBFMT_1);
17594 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17595 +      IF  NOT MISSING(DemAffl ) AND
17596 +                        11.5 <= DemAffl  THEN DO;
17597 +        IF  NOT MISSING(DemAffl ) AND
17598 +                          14.5 <= DemAffl  THEN DO;
17599 +          _NODE_  =                   39;
17600 +          _LEAF_  =                   10;
17601 +          P_TargetBuy0  =     0.06467661691542;
17602 +          P_TargetBuy1  =     0.93532338308457;
17603 +          Q_TargetBuy0  =     0.06467661691542;
17604 +          Q_TargetBuy1  =     0.93532338308457;
17605 +          V_TargetBuy0  =     0.05729166666666;
17606 +          V_TargetBuy1  =     0.94270833333333;
17607 +          I_TargetBuy  = '1' ;
17608 +          U_TargetBuy  =                    1;
17609 +          END;
17610 +        ELSE DO;
17611 +          _NODE_  =                   38;
17612 +          _LEAF_  =                    9;
17613 +          P_TargetBuy0  =     0.19787985865724;
17614 +          P_TargetBuy1  =     0.80212014134275;
17615 +          Q_TargetBuy0  =     0.19787985865724;
17616 +          Q_TargetBuy1  =     0.80212014134275;
17617 +          V_TargetBuy0  =     0.22535211267605;
17618 +          V_TargetBuy1  =     0.77464788732394;
17619 +          I_TargetBuy  = '1' ;
17620 +          U_TargetBuy  =                    1;
17621 +          END;
17622 +        END;
17623 +      ELSE DO;
17624 +        IF  NOT MISSING(DemAge ) AND
17625 +                          40.5 <= DemAge  THEN DO;
17626 +          _NODE_  =                   37;
17627 +          _LEAF_  =                    8;
17628 +          P_TargetBuy0  =     0.46491228070175;
17629 +          P_TargetBuy1  =     0.53508771929824;
17630 +          Q_TargetBuy0  =     0.46491228070175;
17631 +          Q_TargetBuy1  =     0.53508771929824;
17632 +          V_TargetBuy0  =     0.37234042553191;
17633 +          V_TargetBuy1  =     0.62765957446808;
17634 +          I_TargetBuy  = '1' ;
17635 +          U_TargetBuy  =                    1;
17636 +          END;
17637 +        ELSE DO;
17638 +          _NODE_  =                   36;
17639 +          _LEAF_  =                    7;
17640 +          P_TargetBuy0  =     0.26206896551724;
17641 +          P_TargetBuy1  =     0.73793103448275;
17642 +          Q_TargetBuy0  =     0.26206896551724;
17643 +          Q_TargetBuy1  =     0.73793103448275;
17644 +          V_TargetBuy0  =      0.2369337979094;
17645 +          V_TargetBuy1  =     0.76306620209059;
17646 +          I_TargetBuy  = '1' ;
17647 +          U_TargetBuy  =                    1;
17648 +          END;
17649 +        END;
17650 +      END;
17651 +    ELSE DO;
17652 +      IF  NOT MISSING(DemAffl ) AND
17653 +                        14.5 <= DemAffl  THEN DO;
17654 +        _NODE_  =                   23;
17655 +        _LEAF_  =                   13;
17656 +        P_TargetBuy0  =     0.11111111111111;
17657 +        P_TargetBuy1  =     0.88888888888888;
17658 +        Q_TargetBuy0  =     0.11111111111111;
17659 +        Q_TargetBuy1  =     0.88888888888888;
17660 +        V_TargetBuy0  =     0.17567567567567;
17661 +        V_TargetBuy1  =     0.82432432432432;
17662 +        I_TargetBuy  = '1' ;
17663 +        U_TargetBuy  =                    1;
17664 +        END;
17665 +      ELSE DO;
17666 +        IF  NOT MISSING(DemAffl ) AND
17667 +                          12.5 <= DemAffl  THEN DO;
17668 +          _NODE_  =                   41;
17669 +          _LEAF_  =                   12;
17670 +          P_TargetBuy0  =     0.38028169014084;
17671 +          P_TargetBuy1  =     0.61971830985915;
17672 +          Q_TargetBuy0  =     0.38028169014084;
17673 +          Q_TargetBuy1  =     0.61971830985915;
17674 +          V_TargetBuy0  =     0.48333333333333;
17675 +          V_TargetBuy1  =     0.51666666666666;
17676 +          I_TargetBuy  = '1' ;
17677 +          U_TargetBuy  =                    1;
17678 +          END;
17679 +        ELSE DO;
17680 +          _NODE_  =                   40;
17681 +          _LEAF_  =                   11;
17682 +          P_TargetBuy0  =     0.58394160583941;
17683 +          P_TargetBuy1  =     0.41605839416058;
17684 +          Q_TargetBuy0  =     0.58394160583941;
17685 +          Q_TargetBuy1  =     0.41605839416058;
17686 +          V_TargetBuy0  =     0.65551839464882;
17687 +          V_TargetBuy1  =     0.34448160535117;
17688 +          I_TargetBuy  = '0' ;
17689 +          U_TargetBuy  =                    0;
17690 +          END;
17691 +        END;
17692 +      END;
17693 +    END;
17694 +  END;
17695 +ELSE DO;
17696 +  IF  NOT MISSING(DemAffl ) AND
17697 +                    12.5 <= DemAffl  THEN DO;
17698 +    IF  NOT MISSING(DemAffl ) AND
17699 +                      16.5 <= DemAffl  THEN DO;
17700 +      IF  NOT MISSING(DemAffl ) AND
17701 +                        19.5 <= DemAffl  THEN DO;
17702 +        _NODE_  =                   31;
17703 +        _LEAF_  =                   29;
17704 +        P_TargetBuy0  =                    0;
17705 +        P_TargetBuy1  =                    1;
17706 +        Q_TargetBuy0  =                    0;
17707 +        Q_TargetBuy1  =                    1;
17708 +        V_TargetBuy0  =                 0.04;
17709 +        V_TargetBuy1  =                 0.96;
17710 +        I_TargetBuy  = '1' ;
17711 +        U_TargetBuy  =                    1;
17712 +        END;
17713 +      ELSE DO;
17714 +        _ARBFMT_1 = PUT( DemGender , $1.);
17715 +         %DMNORMIP( _ARBFMT_1);
17716 +        IF _ARBFMT_1 IN ('M' ,'F' ) THEN DO;
17717 +          _NODE_  =                   50;
17718 +          _LEAF_  =                   27;
17719 +          P_TargetBuy0  =               0.2625;
17720 +          P_TargetBuy1  =               0.7375;
17721 +          Q_TargetBuy0  =               0.2625;
17722 +          Q_TargetBuy1  =               0.7375;
17723 +          V_TargetBuy0  =     0.28169014084507;
17724 +          V_TargetBuy1  =     0.71830985915492;
17725 +          I_TargetBuy  = '1' ;
17726 +          U_TargetBuy  =                    1;
17727 +          END;
17728 +        ELSE DO;
17729 +          _NODE_  =                   51;
17730 +          _LEAF_  =                   28;
17731 +          P_TargetBuy0  =     0.72727272727272;
17732 +          P_TargetBuy1  =     0.27272727272727;
17733 +          Q_TargetBuy0  =     0.72727272727272;
17734 +          Q_TargetBuy1  =     0.27272727272727;
17735 +          V_TargetBuy0  =                  0.9;
17736 +          V_TargetBuy1  =                  0.1;
17737 +          I_TargetBuy  = '0' ;
17738 +          U_TargetBuy  =                    0;
17739 +          END;
17740 +        END;
17741 +      END;
17742 +    ELSE DO;
17743 +      _ARBFMT_1 = PUT( DemGender , $1.);
17744 +       %DMNORMIP( _ARBFMT_1);
17745 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17746 +        _NODE_  =                   29;
17747 +        _LEAF_  =                   26;
17748 +        P_TargetBuy0  =     0.53221957040572;
17749 +        P_TargetBuy1  =     0.46778042959427;
17750 +        Q_TargetBuy0  =     0.53221957040572;
17751 +        Q_TargetBuy1  =     0.46778042959427;
17752 +        V_TargetBuy0  =     0.46172839506172;
17753 +        V_TargetBuy1  =     0.53827160493827;
17754 +        I_TargetBuy  = '0' ;
17755 +        U_TargetBuy  =                    0;
17756 +        END;
17757 +      ELSE DO;
17758 +        _NODE_  =                   28;
17759 +        _LEAF_  =                   25;
17760 +        P_TargetBuy0  =     0.76029962546816;
17761 +        P_TargetBuy1  =     0.23970037453183;
17762 +        Q_TargetBuy0  =     0.76029962546816;
17763 +        Q_TargetBuy1  =     0.23970037453183;
17764 +        V_TargetBuy0  =     0.77935943060498;
17765 +        V_TargetBuy1  =     0.22064056939501;
17766 +        I_TargetBuy  = '0' ;
17767 +        U_TargetBuy  =                    0;
17768 +        END;
17769 +      END;
17770 +    END;
17771 +  ELSE DO;
17772 +    _ARBFMT_1 = PUT( DemGender , $1.);
17773 +     %DMNORMIP( _ARBFMT_1);
17774 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17775 +      IF  NOT MISSING(DemAffl ) AND
17776 +        DemAffl  <                  8.5 THEN DO;
17777 +        IF  NOT MISSING(DemAffl ) AND
17778 +          DemAffl  <                  5.5 THEN DO;
17779 +          IF  NOT MISSING(DemAge ) THEN DO;
17780 +            _NODE_  =                   52;
17781 +            _LEAF_  =                   14;
17782 +            P_TargetBuy0  =     0.94025157232704;
17783 +            P_TargetBuy1  =     0.05974842767295;
17784 +            Q_TargetBuy0  =     0.94025157232704;
17785 +            Q_TargetBuy1  =     0.05974842767295;
17786 +            V_TargetBuy0  =     0.91891891891891;
17787 +            V_TargetBuy1  =     0.08108108108108;
17788 +            I_TargetBuy  = '0' ;
17789 +            U_TargetBuy  =                    0;
17790 +            END;
17791 +          ELSE DO;
17792 +            _NODE_  =                   53;
17793 +            _LEAF_  =                   15;
17794 +            P_TargetBuy0  =     0.78571428571428;
17795 +            P_TargetBuy1  =     0.21428571428571;
17796 +            Q_TargetBuy0  =     0.78571428571428;
17797 +            Q_TargetBuy1  =     0.21428571428571;
17798 +            V_TargetBuy0  =     0.79245283018867;
17799 +            V_TargetBuy1  =     0.20754716981132;
17800 +            I_TargetBuy  = '0' ;
17801 +            U_TargetBuy  =                    0;
17802 +            END;
17803 +          END;
17804 +        ELSE DO;
17805 +          _NODE_  =                   43;
17806 +          _LEAF_  =                   16;
17807 +          P_TargetBuy0  =     0.84289617486338;
17808 +          P_TargetBuy1  =     0.15710382513661;
17809 +          Q_TargetBuy0  =     0.84289617486338;
17810 +          Q_TargetBuy1  =     0.15710382513661;
17811 +          V_TargetBuy0  =     0.86320109439124;
17812 +          V_TargetBuy1  =     0.13679890560875;
17813 +          I_TargetBuy  = '0' ;
17814 +          U_TargetBuy  =                    0;
17815 +          END;
17816 +        END;
17817 +      ELSE DO;
17818 +        IF  NOT MISSING(DemAge ) THEN DO;
17819 +          IF  NOT MISSING(DemAffl ) AND
17820 +                            10.5 <= DemAffl  THEN DO;
17821 +            _NODE_  =                   55;
17822 +            _LEAF_  =                   18;
17823 +            P_TargetBuy0  =       0.690036900369;
17824 +            P_TargetBuy1  =     0.30996309963099;
17825 +            Q_TargetBuy0  =       0.690036900369;
17826 +            Q_TargetBuy1  =     0.30996309963099;
17827 +            V_TargetBuy0  =     0.69047619047619;
17828 +            V_TargetBuy1  =      0.3095238095238;
17829 +            I_TargetBuy  = '0' ;
17830 +            U_TargetBuy  =                    0;
17831 +            END;
17832 +          ELSE DO;
17833 +            _NODE_  =                   54;
17834 +            _LEAF_  =                   17;
17835 +            P_TargetBuy0  =     0.79824561403508;
17836 +            P_TargetBuy1  =     0.20175438596491;
17837 +            Q_TargetBuy0  =     0.79824561403508;
17838 +            Q_TargetBuy1  =     0.20175438596491;
17839 +            V_TargetBuy0  =     0.76797698945349;
17840 +            V_TargetBuy1  =      0.2320230105465;
17841 +            I_TargetBuy  = '0' ;
17842 +            U_TargetBuy  =                    0;
17843 +            END;
17844 +          END;
17845 +        ELSE DO;
17846 +          _NODE_  =                   45;
17847 +          _LEAF_  =                   19;
17848 +          P_TargetBuy0  =     0.55294117647058;
17849 +          P_TargetBuy1  =     0.44705882352941;
17850 +          Q_TargetBuy0  =     0.55294117647058;
17851 +          Q_TargetBuy1  =     0.44705882352941;
17852 +          V_TargetBuy0  =     0.55089820359281;
17853 +          V_TargetBuy1  =     0.44910179640718;
17854 +          I_TargetBuy  = '0' ;
17855 +          U_TargetBuy  =                    0;
17856 +          END;
17857 +        END;
17858 +      END;
17859 +    ELSE DO;
17860 +      IF  NOT MISSING(DemAffl ) AND
17861 +        DemAffl  <                  8.5 THEN DO;
17862 +        IF  NOT MISSING(DemAge ) AND
17863 +          DemAge  <                 76.5 THEN DO;
17864 +          IF  NOT MISSING(DemAffl ) AND
17865 +            DemAffl  <                  5.5 THEN DO;
17866 +            _NODE_  =                   56;
17867 +            _LEAF_  =                   20;
17868 +            P_TargetBuy0  =     0.98786039453717;
17869 +            P_TargetBuy1  =     0.01213960546282;
17870 +            Q_TargetBuy0  =     0.98786039453717;
17871 +            Q_TargetBuy1  =     0.01213960546282;
17872 +            V_TargetBuy0  =     0.98095238095238;
17873 +            V_TargetBuy1  =     0.01904761904761;
17874 +            I_TargetBuy  = '0' ;
17875 +            U_TargetBuy  =                    0;
17876 +            END;
17877 +          ELSE DO;
17878 +            _NODE_  =                   57;
17879 +            _LEAF_  =                   21;
17880 +            P_TargetBuy0  =     0.95436664044059;
17881 +            P_TargetBuy1  =      0.0456333595594;
17882 +            Q_TargetBuy0  =     0.95436664044059;
17883 +            Q_TargetBuy1  =      0.0456333595594;
17884 +            V_TargetBuy0  =     0.96105919003115;
17885 +            V_TargetBuy1  =     0.03894080996884;
17886 +            I_TargetBuy  = '0' ;
17887 +            U_TargetBuy  =                    0;
17888 +            END;
17889 +          END;
17890 +        ELSE DO;
17891 +          _NODE_  =                   47;
17892 +          _LEAF_  =                   22;
17893 +          P_TargetBuy0  =     0.90118577075098;
17894 +          P_TargetBuy1  =     0.09881422924901;
17895 +          Q_TargetBuy0  =     0.90118577075098;
17896 +          Q_TargetBuy1  =     0.09881422924901;
17897 +          V_TargetBuy0  =     0.91860465116279;
17898 +          V_TargetBuy1  =      0.0813953488372;
17899 +          I_TargetBuy  = '0' ;
17900 +          U_TargetBuy  =                    0;
17901 +          END;
17902 +        END;
17903 +      ELSE DO;
17904 +        _ARBFMT_1 = PUT( DemGender , $1.);
17905 +         %DMNORMIP( _ARBFMT_1);
17906 +        IF _ARBFMT_1 IN ('M' ) THEN DO;
17907 +          _NODE_  =                   48;
17908 +          _LEAF_  =                   23;
17909 +          P_TargetBuy0  =     0.87226697353279;
17910 +          P_TargetBuy1  =      0.1277330264672;
17911 +          Q_TargetBuy0  =     0.87226697353279;
17912 +          Q_TargetBuy1  =      0.1277330264672;
17913 +          V_TargetBuy0  =     0.88209606986899;
17914 +          V_TargetBuy1  =       0.117903930131;
17915 +          I_TargetBuy  = '0' ;
17916 +          U_TargetBuy  =                    0;
17917 +          END;
17918 +        ELSE DO;
17919 +          _NODE_  =                   49;
17920 +          _LEAF_  =                   24;
17921 +          P_TargetBuy0  =     0.94173228346456;
17922 +          P_TargetBuy1  =     0.05826771653543;
17923 +          Q_TargetBuy0  =     0.94173228346456;
17924 +          Q_TargetBuy1  =     0.05826771653543;
17925 +          V_TargetBuy0  =     0.93944099378882;
17926 +          V_TargetBuy1  =     0.06055900621118;
17927 +          I_TargetBuy  = '0' ;
17928 +          U_TargetBuy  =                    0;
17929 +          END;
17930 +        END;
17931 +      END;
17932 +    END;
17933 +  END;
17934 +
17935 +*****  RESIDUALS R_ *************;
17936 +IF  F_TargetBuy  NE '0'
17937 +AND F_TargetBuy  NE '1'  THEN DO;
17938 +        R_TargetBuy0  = .;
17939 +        R_TargetBuy1  = .;
17940 + END;
17941 + ELSE DO;
17942 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17943 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17944 +       SELECT( F_TargetBuy  );
17945 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17946 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17947 +       END;
17948 + END;
17949 +
17950 +****************************************************************;
17951 +******          END OF DECISION TREE SCORING CODE         ******;
17952 +****************************************************************;
17953 +
17954 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17955  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
17956  quit;
17957  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS3.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17959  proc sort data=WORK.EM_USER_REPORT;
17960  by ID VIEW;
17961  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17962  *------------------------------------------------------------*;
17963  * Tree: Computing metadata for TRAIN data;
17964  *------------------------------------------------------------*;
 
NOTE: View EMWS3.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18348  data WORK.MODELTEMP_INFO;
18349  set EMWS3.Tree_EMINFO;
18350  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18351  run;
 
NOTE: There were 0 observations read from the data set EMWS3.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18352  data EMWS3.Tree_EMINFO;
18353  length TARGET KEY $32 DATA $43;
18354  input TARGET KEY DATA $;
18355  cards;
 
NOTE: The data set EMWS3.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
18359  run;
18360  data EMWS3.Tree_EMINFO;
18361  set EMWS3.Tree_EMINFO WORK.MODELTEMP_INFO;
18362  run;
 
NOTE: There were 3 observations read from the data set EMWS3.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS3.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18363  proc sort data = EMWS3.Tree_EMINFO NOTHREADS;
18364  by TARGET KEY;
18365  run;
 
NOTE: There were 3 observations read from the data set EMWS3.TREE_EMINFO.
NOTE: The data set EMWS3.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18366  proc sort data = EMWS3.Ids2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18367  by TARGET KEY;
18368  run;
 
NOTE: There were 4 observations read from the data set EMWS3.IDS2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18369  proc sort data = EMWS3.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18370  by TARGET KEY;
18371  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS3.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18372  data EMWS3.Tree_EMINFO;
18373  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18374  by TARGET KEY;
18375  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TREE_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18376  proc datasets lib=work nolist;
18377  delete TEMP_INFO SORTEDEMINFO;
18378  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18379  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS3.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS3.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 20, 2017
Time:                01:31:31
*------------------------------------------------------------*
18403  data EMWS3.Tree_EMOUTFIT;
18404  set EMWS3.Tree_EMOUTFIT;
18405  length TargetLabel $200;
18406  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18407  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18408  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_EMOUTFIT.
NOTE: The data set EMWS3.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18409  proc sort data=EMWS3.Tree_EMREPORTFIT nothreads;
18410  by TARGET;
18411  run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE_EMREPORTFIT.
NOTE: The data set EMWS3.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18412  %let _EMwarndup = 0;
18413  %let _EMtargetdup =;
18414  %let _EMASEtargetdup =;
18415  data _null_;
18416  set EMWS3.Tree_EMOUTFIT;
18417  if .<_ASE_<0.000001 then do;
18418  call symput('_EMwarndup', '1');
18419  call symput('_EMtargetdup', target);
18420  call symput('_EMASEtargetdup', put(_ASE_, best.));
18421  end;
18422  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18423  %let EMEXCEPTIONSTRING=;
18424  *------------------------------------------------------------*;
18425  * REPORT: Tree;
18426  *------------------------------------------------------------*;
18427  %let EM_ACTION = REPORT;
18428  %let syscc = 0;
18429  %macro main;
18430
18431    %if %upcase(&EM_ACTION) = CREATE %then %do;
18432      filename temp catalog 'sashelp.emmodl.tree_create.source';
18433      %include temp;
18434      filename temp;
18435
18436      %em_tree_create;
18437    %end;
18438
18439     %else
18440     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18441
18442         filename temp catalog 'sashelp.emmodl.tree_train.source';
18443         %include temp;
18444         filename temp;
18445         %em_tree_train;
18446     %end;
18447
18448    %else
18449    %if %upcase(&EM_ACTION) = SCORE %then %do;
18450      filename temp catalog 'sashelp.emmodl.tree_score.source';
18451      %include temp;
18452      filename temp;
18453
18454      %em_tree_score;
18455
18456    %end;
18457
18458    %else
18459    %if %upcase(&EM_ACTION) = REPORT %then %do;
18460
18461         filename temp catalog 'sashelp.emmodl.tree_report.source';
18462         %include temp;
18463         filename temp;
18464
18465         %em_tree_report;
18466     %end;
18467
18468    %else
18469    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18470
18471         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18472         %include temp;
18473         filename temp;
18474         %EM_TREE_OPENTREEVIEWER;
18475
18476     %end;
18477
18478    %else
18479    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18480
18481         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18482         %include temp;
18483         filename temp;
18484         %EM_TREE_CLOSETREEVIEWER;
18485
18486     %end;
18487
18488
18489     %doendm:
18490  %mend main;
18491
18492  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18494 +%macro em_tree_makePlotDs( multipleTar= );
18496 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18497 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18498 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18499 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18501 +  /* determine if validation statistics will be displayed */
18502 +  %let validflag=N;
18503 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18504 +    /* determine if validation data exists */
18505 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18506 +      %let validflag=Y;
18507 +    %end;
18508 +  %end;
18510 +   /* retrieve name of decmeta even in presence of multiple targets */
18511 +   %let decmeta = ;
18512 +   %if &EM_DEC_DECMETA eq %then %do;
18513 +     data _Target;
18514 +       set &em_data_variableset;
18515 +       where ROLE='TARGET' and USE in('D', 'Y');
18516 +       keep NAME;
18517 +     run;
18518 +     proc sort data=_Target;
18519 +       by NAME;
18520 +     run;
18521 +     proc sort data=EM_TARGETDECINFO;
18522 +       by TARGET;
18523 +     run;
18524 +     data _Target;
18525 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18526 +       by NAME;
18527 +       if _a then do;
18528 +         call symput('decmeta', trim(DECMETA));
18529 +       end;
18530 +     run;
18531 +     proc delete data=_Target;run;
18532 +   %end;
18533 +   %else %let decmeta = &EM_DEC_DECMETA;
18536 +  /* retrieve targetEvent from decmeta */
18537 +  %let targetEvent=;
18538 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18539 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18540 +      data _null_;
18541 +       set &DECMETA(where=(_TYPE_="TARGET"));
18542 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18543 +      run;
18544 +    %end;
18545 +  %end;
18547 +  /* retrieve predicted var for targetEvent from decmeta */
18548 +  %let predTarget=;
18549 +  %let predLvl=;
18550 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18551 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18552 +      data _null_;
18553 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18554 +       call symput('predTarget', strip(VARIABLE));
18555 +       call symput('predLvl', strip(LEVEL));
18556 +      run;
18557 +    %end;
18558 +  %end;
18559 +  %else %do;
18560 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18561 +      data _null_;
18562 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18563 +       call symput('predTarget', strip(VARIABLE));
18564 +      run;
18565 +    %end;
18566 +  %end;
18568 +  /* create BelowText value */
18569 +  data belowtext;
18570 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18571 +    keep node belowtext;
18572 +  run;
18574 +  /* relace belowtext with variable label if it exists */
18575 +  data belowtext2;
18576 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18577 +    keep node belowtextlbl;
18578 +  run;
18580 +  proc sort data=belowtext; by node; run;
18581 +  proc sort data=belowtext2; by node; run;
18583 +  data belowtext;
18584 +    merge belowtext belowtext2(in=_a);
18585 +    by node;
18586 +    if _a then belowtext=belowtextlbl;
18587 +    keep node belowtext;
18588 +  run;
18590 +  /* create AboveText value */
18591 +  data abovetext;
18592 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18593 +  run;
18594 +  proc sort data=abovetext; by node numeric_value; run;
18596 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18597 +  data abovetext;
18598 +    set abovetext(rename=(node=parent));
18599 +    by parent numeric_value;
18600 +    retain abovetext tempstring flag branch origval origchar ;
18601 +    length abovetext $256;
18602 +    length tempstring origchar $64;
18604 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18605 +      if first.parent then do;
18606 +        if missing(character_value) then do;
18607 +          numeric_value = round(numeric_value, &sp_precision);
18608 +          abovetext = "< "||strip(NUMERIC_VALUE);
18609 +          branch = 1;
18610 +          origval = numeric_value;
18611 +          output;
18612 +        end;
18613 +        else do;
18614 +          abovetext = "< "||strip(CHARACTER_VALUE);
18615 +          branch = 1;
18616 +          origchar = character_value;
18617 +          output;
18618 +        end;
18620 +        if first.parent AND last.parent then do;
18621 +          if missing(character_value) then do;
18622 +            numeric_value = round(numeric_value, &sp_precision);
18623 +            branch = branch + 1;
18624 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18625 +            output;
18626 +          end;
18627 +          else do;
18628 +            branch = branch + 1;
18629 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18630 +            output;
18631 +          end;
18632 +        end;
18633 +      end;
18634 +      else if last.parent then do;
18635 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18636 +          if missing(character_value) then do;
18637 +            numeric_value = round(numeric_value, &sp_precision);
18638 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18639 +          end;
18640 +          else do;
18641 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18642 +          end;
18643 +          branch = branch + 1;
18644 +          output;
18646 +          if missing(character_value) then do;
18647 +            numeric_value = round(numeric_value, &sp_precision);
18648 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18649 +          end;
18650 +          else do;
18651 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18652 +          end;
18653 +          branch = branch + 1;
18654 +          output;
18655 +        end;
18656 +        else do;
18657 +          if missing(character_value) then do;
18658 +            numeric_value = round(numeric_value, &sp_precision);
18659 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18660 +          end;
18661 +          else do;
18662 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18663 +          end;
18664 +          branch = branch + 1;
18665 +          output;
18666 +        end;
18667 +      end;
18668 +      else do;
18669 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18670 +          if missing(character_value) then do;
18671 +            numeric_value = round(numeric_value,&sp_precision);
18672 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18673 +            origval = numeric_value;
18674 +          end;
18675 +          else do;
18676 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18677 +            origchar = character_value;
18678 +          end;
18679 +          branch = branch + 1;
18680 +          output;
18682 +        end;
18683 +        else do;
18684 +          if missing(character_value) then do;
18685 +            numeric_value = round(numeric_value, &sp_precision);
18686 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18687 +            origval = numeric_value;
18688 +          end;
18689 +          else do;
18690 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18691 +            origval = character_value;
18692 +          end;
18693 +          branch = branch + 1;
18694 +          output;
18695 +        end;
18696 +      end;
18697 +    end;
18698 +    else do;
18699 +       if first.numeric_value then do;
18700 +         flag = 0;
18701 +         abovetext = strip(CHARACTER_VALUE);
18702 +         branch = numeric_value;
18703 +         if first.numeric_value AND last.numeric_value then do;
18704 +           output;
18705 +         end;
18706 +       end;
18707 +       else if last.numeric_value then do;
18708 +         if flag=0 then do;
18709 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18710 +           length = length(strip(tempstring));
18711 +           if length < 32 then do;
18712 +             abovetext = strip(tempstring);
18713 +           end;
18714 +           else do;
18715 +             abovetext = strip(abovetext)||", ...";
18716 +             flag = 1;
18717 +           end;
18718 +         end;
18719 +         branch = numeric_value;
18720 +         output;
18721 +       end;
18722 +       else do;
18723 +         if flag=0 then do;
18724 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18725 +           length = length(strip(tempstring));
18726 +           if length < 32 then do;
18727 +             abovetext = strip(tempstring);
18728 +           end;
18729 +           else do;
18730 +             abovetext = strip(abovetext)||", ...";
18731 +             flag=1;
18732 +           end;
18733 +         end;
18734 +         branch = numeric_value;
18735 +       end;
18736 +    end;
18737 +    keep parent branch abovetext;
18738 +  run;
18740 +  /* MIssing value to abovetext */
18741 +  data tempmissing;
18742 +    set &EM_USER_OUTRULES;
18743 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18744 +    rename node=parent numeric_value=branch character_value=misschar;
18745 +  run;
18748 +  proc sort data=abovetext; by parent branch; run;
18749 +  proc sort data=tempmissing; by parent branch; run;
18750 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18752 +  data tempoutnodes;
18753 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18754 +    by parent branch;
18755 +    length traintotal validtotal 8;
18756 +    retain traintotal validtotal;
18758 +    if _a then do;
18759 +      if ^MISSING(abovetext) then do;
18760 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18761 +      end;
18762 +      else do;
18763 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18764 +      end;
18765 +    end;
18766 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18768 +    if node=1 then do;
18769 +      traintotal = N;
18770 +      validtotal=VN;
18771 +    end;
18773 +    drop role rank stat misschar belowtext;
18774 +  run;
18775 +  proc sort data=tempoutnodes; by node; run;
18776 +  proc sort data=belowtext; by node; run;
18778 +  data tempoutnodes;
18779 +    merge tempoutnodes belowtext;
18780 +    by node;
18782 +  run;
18784 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18785 +  %let adjusted = N;
18786 +  %let npriors = 0;
18787 +  data _null_ ;
18788 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18789 +    if eof then do ;
18790 +      call symput("npriors" , strip(put(_N_,best.))) ;
18791 +    end;
18792 +  run;
18793 +  %if &npriors gt 0 %then %let adjusted=Y;
18796 +  /* create a table with targetUsed and targetLevel columns for each node */
18797 +  data temptarmeta;
18798 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18799 +    %if &multipleTar eq N %then %do;
18800 +      AND USE in ('D', 'Y')
18801 +    %end;
18802 +    ));
18803 +    length TARGET $32;
18804 +    Target=name;
18805 +    keep target level;
18806 +  run;
18808 +  %if &multipleTar eq Y %then %do;
18809 +    data temptargetused;
18810 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18811 +      keep node target;
18812 +    run;
18813 +    proc sort data=temptargetused; by target; run;
18814 +    proc sort data=temptarmeta; by target; run;
18815 +    data temptargetused;
18816 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18817 +      by target;
18818 +      if _a and _b;
18819 +    run;
18820 +  %end;
18821 +  %else %do;
18822 +    data temptargetused;
18823 +      set &EM_USER_OUTSTATS;
18824 +      length target $32 tarlevel $10;
18825 +      target="%EM_TARGET";
18826 +      tarlevel="%EM_TARGET_LEVEL";
18827 +      keep node target tarlevel;
18828 +    run;
18829 +    proc sort data=temptargetused nodupkey; by node; run;
18830 +  %end;
18832 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18833 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18834 +  proc sort data=temptargetused; by node; run;
18837 +  /* create tables for all interval targets as well as all class targets */
18838 +  data tempinterval tempclass;
18839 +    merge tempoutstats temptargetused( rename=(target=targetused));
18840 +    by node;
18841 +    %if "&multipleTar" eq "Y" %then %do;
18842 +      if ((missing(Target)) OR (target=targetused ));
18843 +    %end;
18845 +    if tarlevel="INTERVAL" then output tempinterval;
18846 +    else output tempclass;
18847 +  run;
18849 +  /* iniitalize intTarget and classTarget flags */
18850 +  %let em_intNobs =0;
18851 +  %let em_classNobs = 0;
18852 +  %let em_intTarget= N;
18853 +  %let em_classTarget= N;
18855 +  proc sql;
18856 +    reset noprint;
18857 +    select count(*) into :em_intNobs from tempinterval;
18858 +  quit;
18859 +  proc sql;
18860 +    reset noprint;
18861 +    select count(*) into :em_classNobs from tempclass;
18862 +  quit;
18864 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18865 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18867 +  /* retrieve all information for interval targets */
18868 +  %if &em_intTarget eq Y %then %do;
18870 +    /* determine if leaf variable exists */
18871 +    %let dsid=%sysfunc(open(tempinterval,i));
18872 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18873 +    %let rc=%sysfunc(close(&dsid));
18875 +    proc transpose data=tempinterval
18876 +      %if &leafexists %then %do;
18877 +        (drop=leaf)
18878 +      %end;
18879 +      %if &validexist %then %do;
18880 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18881 +      %end;
18882 +      %else %do;
18883 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18884 +      %end;
18885 +      by node;
18886 +      id statname;
18887 +    run;
18888 +    data tempinterval;
18889 +      set tempinterval;
18890 +      if missing(N) then delete;
18891 +    run;
18892 +  %end;
18894 +  /* retrieve all information for class targets */
18895 +  %if &em_classTarget eq Y %then %do;
18896 +    proc sort data=tempclass; by node category; run;
18897 +    %if &validflag eq N %then %do;
18898 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18899 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18900 +    %end;
18901 +    %else %do;
18902 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18903 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18904 +    %end;
18905 +      set tempclass;
18907 +      %if &validflag eq N %then %do;
18908 +        %if "&adjusted" eq "N" %then %do;
18909 +          if statname="N" then output tempn;
18910 +        %end;
18911 +        %else %do;
18912 +          if statname="NPRIORS" then output tempn;
18913 +        %end;
18914 +        else if statname="PREDICTION" then output temppredict;
18915 +        else if statname="PROBABILITY" then output tempprob;
18916 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18917 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18918 +      %end;
18919 +      %else %do;
18920 +        %if "&adjusted" eq "N" %then %do;
18921 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18922 +        %end;
18923 +        %else %do;
18924 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18925 +        %end;
18926 +        else if statname="PREDICTION" then output temppredict;
18927 +        else if statname="PROBABILITY" then output tempprob;
18928 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18929 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18930 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18931 +      %end;
18932 +    run;
18935 +    /* determine if profit/loss exists in tempprofit */
18936 +    %let em_profitflag=0;
18937 +    %let em_lossflag=0;
18938 +    proc sql;
18939 +      reset noprint;
18940 +      select count(*) into :em_profitflag from tempprofit;
18941 +    quit;
18942 +    proc sql;
18943 +      reset noprint;
18944 +      select count(*) into :em_lossflag from temploss;
18945 +    quit;
18947 +    %if &validFlag eq Y %then %do;
18948 +      proc transpose data=tempn
18949 +        %if "&adjusted" eq "N" %then %do;
18950 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18951 +        %end;
18952 +        %else %do;
18953 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18954 +        %end;
18955 +        by node;
18956 +        id statname;
18957 +      run;
18958 +      %if &em_profitflag ne 0 %then %do;
18959 +        proc transpose data=tempprofit out=tempprofit;
18960 +          by node category;
18961 +          id statname ;
18962 +        run;
18963 +      %end;
18964 +      %if &em_lossflag ne 0 %then %do;
18965 +        proc transpose data=temploss out=temploss;
18966 +          by node category;
18967 +          id statname ;
18968 +        run;
18969 +      %end;
18970 +      data tempprob;
18971 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18972 +        by node
18973 +        %if &multipleTar eq Y %then %do;
18974 +          target
18975 +        %end;
18976 +        category;
18977 +      run;
18978 +    %end;
18980 +    /* store percentcorrect value */
18981 +    data temppredict;
18982 +      merge tempprob temppredict(in=_a);
18983 +      by node category;
18984 +      if _a then do;
18985 +        percentCorrect = statvalue;
18986 +        %if &validFlag eq Y %then %do;
18987 +          vpercentCorrect= vstatvalue;
18988 +        %end;
18989 +      end;
18990 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18991 +      %if &validFlag eq Y %then %do;
18992 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18993 +      %end;
18994 +      ;
18995 +      if missing(percentCorrect) then delete;
18996 +      drop target;
18997 +    run;
18999 +    /* build profittext */
19000 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19001 +      data tempprofittext(keep= node profittext profitloss);
19002 +        length profittext $800 profitloss 8.;
19003 +        retain profittext profitloss;
19005 +        merge tempprob
19006 +        %if &em_profitflag ne 0 %then %do;
19007 +          tempprofit
19008 +        %end;
19009 +        %else %if &em_lossflag ne 0 %then %do;
19010 +          temploss
19011 +        %end;
19012 +        ;
19013 +        by node category;
19015 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19016 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19017 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19018 +          %let profittype = ALL;
19019 +        %end;
19021 +        /* create the profitloss variable for nodecolor if selected */
19022 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19024 +        %if "&profittype" eq "ALL" %then %do;
19025 +          if strip(CATEGORY)="&targetEvent" then do;
19026 +            profitloss=statvalue;
19027 +          end;
19028 +          if first.node then do;
19029 +            %if &validFlag eq N %then %do;
19030 +             %if &em_profitflag ne 0 %then %do;
19031 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19032 +             %end;
19033 +             %if &em_lossflag ne 0 %then %do;
19034 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19035 +             %end;
19036 +            %end;
19037 +            %else %do;
19038 +             %if &em_profitflag ne 0 %then %do;
19039 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19039!+;
19040 +             %end;
19041 +             %if &em_lossflag ne 0 %then %do;
19042 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19043 +             %end;
19044 +            %end;
19045 +          end;
19046 +          else if last.node then do;
19047 +            %if &validFlag eq N %then %do;
19048 +             %if &em_profitflag ne 0 %then %do;
19049 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19050 +             %end;
19051 +             %if &em_lossflag ne 0 %then %do;
19052 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19053 +             %end;
19054 +             /*if CATEGORY="&targetEvent" then do;
19055 +               profitloss=statvalue;
19056 +             end;*/
19057 +            %end;
19058 +            %else %do;
19059 +             %if &em_profitflag ne 0 %then %do;
19060 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19060!+14.&EM_PROPERTY_SPLITPRECISION);
19061 +                if CATEGORY="&targetEvent" then do;
19062 +                 profitloss=ALTERNATIVE_PROFIT;
19063 +                end;
19064 +             %end;
19065 +             %if &em_lossflag ne 0 %then %do;
19066 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19066!+14.&EM_PROPERTY_SPLITPRECISION);
19067 +                if CATEGORY="&targetEvent" then do;
19068 +                  profitloss=ALTERNATIVE_LOSS;
19069 +                end;
19070 +             %end;
19071 +            %end;
19072 +            output;
19073 +          end;
19074 +          else do;
19075 +            %if &validFlag eq N %then %do;
19076 +             %if &em_profitflag ne 0 %then %do;
19077 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19078 +             %end;
19079 +             %if &em_lossflag ne 0 %then %do;
19080 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19081 +             %end;
19082 +            %end;
19083 +            %else %do;
19084 +             %if &em_profitflag ne 0 %then %do;
19085 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19085!+14.&EM_PROPERTY_SPLITPRECISION);
19086 +             %end;
19087 +             %if &em_lossflag ne 0 %then %do;
19088 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19088!+14.&EM_PROPERTY_SPLITPRECISION);
19089 +             %end;
19090 +            %end;
19091 +          end;
19092 +        %end;
19093 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19094 +          if strip(CATEGORY) = "&targetevent" then do;
19095 +            %if &validFlag eq N %then %do;
19096 +             %if &em_profitflag ne 0 %then %do;
19097 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19098 +             %end;
19099 +             %if &em_lossflag ne 0 %then %do;
19100 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19101 +             %end;
19102 +             profitloss=statvalue;
19103 +            %end;
19104 +            %else %do;
19105 +             %if &em_profitflag ne 0 %then %do;
19106 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19106!+;
19107 +                profitloss=ALTERNATIVE_PROFIT;
19108 +             %end;
19109 +             %if &em_lossflag ne 0 %then %do;
19110 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19111 +                profitloss=ALTERNATIVE_LOSS;
19112 +             %end;
19113 +            %end;
19114 +            output;
19115 +          end;
19116 +        %end;
19117 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19118 +          if strip(CATEGORY) = "&targetevent" then do;
19119 +            %if &validFlag eq N %then %do;
19120 +             profitloss=statvalue;
19121 +            %end;
19122 +            %else %do;
19123 +             %if &em_profitflag ne 0 %then %do;
19124 +                profitloss=ALTERNATIVE_PROFIT;
19125 +             %end;
19126 +             %if &em_lossflag ne 0 %then %do;
19127 +                profitloss=ALTERNATIVE_LOSS;
19128 +             %end;
19129 +            %end;
19130 +            output;
19131 +          end;
19132 +        %end;
19133 +      run;
19134 +    %end;
19136 +    data tempprob(keep= node probtext);
19137 +      length probtext $800;
19138 +      retain probtext;
19139 +      set tempprob ;
19140 +      by node;
19142 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19143 +      %let probtype = &EM_PROPERTY_TARGET;
19144 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19145 +        %let probtype = ALL;
19146 +      %end;
19148 +      %if "&probtype" eq "ALL" %then %do;
19149 +        if first.node then do;
19150 +          %if &validFlag eq N %then %do;
19151 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19152 +          %end;
19153 +          %else %do;
19154 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19155 +          %end;
19156 +        end;
19157 +        else if last.node then do;
19158 +          %if &validFlag eq N %then %do;
19159 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19160 +          %end;
19161 +          %else %do;
19162 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19163 +          %end;
19164 +          output;
19165 +        end;
19166 +        else do;
19167 +          %if &validFlag eq N %then %do;
19168 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19169 +          %end;
19170 +          %else %do;
19171 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19172 +          %end;
19173 +        end;
19174 +      %end;
19175 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19176 +        if strip(CATEGORY) = "&targetevent" then do;
19177 +          %if &validFlag eq N %then %do;
19178 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19179 +          %end;
19180 +          %else %do;
19181 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19182 +          %end;
19183 +          output;
19184 +        end;
19185 +      %end;
19186 +      %else %if "&probtype" eq "NONE" %then %do;
19187 +        if last.node then do;
19188 +          output;
19189 +        end;
19190 +      %end;
19191 +    run;
19192 +  %end;
19194 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19196 +  %let oldexists=0;
19197 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19198 +     data old_tree_plot;
19199 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19200 +        rename nodecolor=oldnodecolor;
19201 +     run;
19203 +     proc sort data=old_tree_plot;
19204 +        by node;
19205 +     run;
19207 +     %let oldexists=1;
19208 +  %end;
19210 +  data &EM_USER_TREE_PLOT;
19211 +    length textall $800;
19212 +    merge tempoutnodes temptargetused
19214 +    %if &em_intTarget eq Y %then %do;
19215 +      tempinterval
19216 +    %end;
19218 +    %if &em_classTarget eq Y %then %do;
19220 +      %if &validFlag eq N %then %do;
19221 +        tempn(rename=(statvalue=N))
19222 +      %end;
19223 +      %else %do;
19224 +        tempn
19225 +      %end;
19227 +      temppredict tempprob
19229 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19230 +        tempprofittext
19231 +      %end;
19232 +    %end;
19233 +    ;
19234 +    by node;
19236 +    /* build nodetext based on user selection */
19237 +    textall="";
19239 +    %if &em_intTarget eq Y %then %do;
19240 +    if tarlevel="INTERVAL" then do;
19241 +      /* Nodeid */
19242 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19243 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19244 +      %end;
19246 +      /* Target identifier if multiple targets are used */
19247 +      %if "&multipleTar" eq "Y" %then %do;
19248 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19249 +      %end;
19251 +      %if &validFlag eq Y %then %do;
19252 +         /* Column labels displayed in validflag eq Y only */
19253 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19254 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19254!+noquote ))";
19255 +         %end;
19257 +         /* Average values */
19258 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19259 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19260 +         %end;
19262 +         /* RASE */
19263 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19264 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19265 +         %end;
19267 +         /* Count */
19268 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19269 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19270 +         %end;
19271 +      %end;
19272 +      %else %do;
19273 +         /* Average values */
19274 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19275 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19276 +         %end;
19278 +         /* RASE */
19279 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19280 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19281 +         %end;
19283 +         /* Count */
19284 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19285 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19286 +         %end;
19287 +      %end;
19289 +      /* nodecolor */
19290 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19291 +        nodecolor=PREDICTION;
19292 +      %end;
19293 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19294 +        nodecolor=RASE;
19295 +      %end;
19296 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19297 +        nodecolor=1;
19298 +      %end;
19300 +    end;
19301 +    %end;
19302 +    %if &em_classTarget eq Y %then %do;
19303 +    if tarlevel^="INTERVAL" then  do;
19305 +      /* Nodeid */
19306 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19307 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19308 +      %end;
19309 +      /* Target identifier if multiple targets are used */
19310 +      %if "&multipleTar" eq "Y" %then %do;
19311 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19312 +      %end;
19314 +      /* Predicted values */
19315 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19316 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19317 +      %end;
19319 +      /* Column labels displayed in validflag eq Y only */
19320 +      %if "&ValidFlag" eq "Y" %then %do;
19321 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19322 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19322!+noquote ))";
19323 +        %end;
19324 +      %end;
19326 +      /* Target Values */
19327 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19328 +        textall=strip(textall)||"0A"x||strip(probtext);
19329 +      %end;
19331 +      /* include profit or loss for all target levels */
19332 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19333 +        textall=strip(textall)||"0A"x||strip(profittext);
19334 +      %end;
19336 +      %if &validFlag eq N %then %do;
19337 +        /* Percent Correct */
19338 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19339 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19340 +        %end;
19342 +         /* Count */
19343 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19344 +          %if "&adjusted" eq "N" %then %do;
19345 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19346 +          %end;
19347 +          %else %do;
19348 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19349 +          %end;
19350 +         %end;
19351 +      %end;
19352 +      %else %do;
19353 +        /* Percent Correct */
19354 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19355 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19356 +        %end;
19358 +         /* Count */
19359 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19360 +          %if "&adjusted" eq "N" %then %do;
19361 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19362 +          %end;
19363 +          %else %do;
19364 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19365 +          %end;
19366 +         %end;
19367 +      %end;
19369 +      /* nodecolor */
19370 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19371 +       %if &multipleTar ne Y %then %do;
19372 +        nodecolor=&predTarget;
19373 +       %end;
19374 +       %else %do;
19375 +         nodecolor=percentcorrect;
19376 +       %end;
19377 +      %end;
19378 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19379 +        nodecolor=percentcorrect;
19380 +      %end;
19381 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19382 +        nodecolor=1;
19383 +      %end;
19384 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19385 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19386 +          nodecolor=percentcorrect;
19387 +        %end;
19388 +        %else %do;
19389 +          nodecolor=profitloss;
19390 +        %end;
19391 +      %end;
19393 +    end;
19394 +    %end;
19395 +    %if &em_intTarget eq Y %then %do;
19396 +     drop  PREDICTION  TARGET TARLEVEL
19397 +     %if &ValidFlag eq Y %then %do;
19398 +         VPREDICTION
19399 +     %end;
19400 +     ;
19401 +    %end;
19402 +    %if &em_classTarget eq Y %then %do;
19403 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19404 +     %if &ValidFlag eq Y %then %do;
19405 +         VSTATVALUE
19406 +     %end;
19407 +     ;
19408 +    %end;
19410 +  run;
19412 +  /* add leaf index information to plotds - based on primary target only*/
19413 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19414 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19415 +      set &EM_USER_OUTSTATS;
19416 +      if ((statname="PROBABILITY"
19417 +      %if &validexist %then %do;
19418 +       or statname="VALID: PROBABILITY"
19419 +      %end;
19420 +      ) AND (CATEGORY="&TARGETEVENT")
19421 +      %if "&multipleTar" eq "Y" %then %do;
19422 +        AND (Target="%EM_TARGET")
19423 +      %end;
19424 +      );
19425 +    run;
19427 +    %if &validexist %then %do;
19428 +      proc sort data=tempprob; by node; run;
19429 +      %let vpredTarget = V%substr(&predTarget, 2);
19430 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19431 +         by node;
19432 +         id statname;
19433 +      run;
19434 +    %end;
19435 +  %end;
19436 +  %else %do;
19437 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19438 +      set &EM_USER_OUTSTATS;
19439 +      if ((statname="PREDICTION"
19440 +      %if &validexist %then %do;
19441 +       or statname="VALID: PREDICTION"
19442 +      %end;
19443 +      )
19444 +      %if "&multipleTar" eq "Y" %then %do;
19445 +        AND (Target="%EM_TARGET")
19446 +      %end;
19447 +      );
19448 +    run;
19449 +    %if &validexist %then %do;
19450 +      proc sort data=tempprob; by node; run;
19451 +      %let vpredTarget = V%substr(&predTarget, 2);
19452 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19453 +         by node;
19454 +         id statname;
19455 +      run;
19456 +    %end;
19457 +  %end;
19459 +  proc sort data=tempprob; by node; run;
19460 +  data tempoutnodes;
19461 +    merge tempoutnodes tempprob;
19462 +    by node;
19463 +  run;
19465 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19466 +  data tempnodes;
19467 +    retain traintotal validtotal;
19468 +    set tempnodes(where=(leaf ne . ));
19469 +    tprob=round(&predTarget, .01);
19470 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19471 +      percevent_train=round(tprob*100, .01);
19472 +    %end;
19473 +    %else %do;
19474 +      percevent_train=tprob;
19475 +    %end;
19477 +    perc_train=round((n/traintotal)*100, 0.01);
19478 +    /* leafwidth already has a *10 multiplier */
19479 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19481 +    %if &validexist %then %do;
19482 +      %let vpredTarget = V%substr(&predTarget,2);
19483 +      vprob=round(&vpredTarget, .01);
19484 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19485 +        percevent_valid=round(vprob*100, .01);
19486 +      %end;
19487 +      %else %do;
19488 +        percevent_valid=vprob;
19489 +      %end;
19490 +      perc_valid=round((vn/validtotal)*100, .01);
19491 +    %end;
19493 +    index=_N_;
19494 +    keep node index tprob perc_train percevent_train
19495 +    %if &validexist %then %do;
19496 +        vprob percevent_valid perc_valid
19497 +    %end;
19498 +    ;
19499 +  run;
19500 +  proc sort data=tempnodes; by node; run;
19501 +  data &EM_USER_TREE_PLOT;
19502 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19503 +    by node;
19504 +    if missing(node) then delete;
19505 +    %if &oldexists %then %do;
19506 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19507 +      drop oldnodecolor;
19508 +    %end;
19509 +    abovetext = compbl(abovetext);
19511 +    /* add variable labels */
19512 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19513 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19514 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19515 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19516 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19517 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19519 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19520 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19521 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19522 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19523 +          %end;
19524 +          %else %do;
19525 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19526 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19527 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19528 +          %end;
19529 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19531 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19532 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19533 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19534 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19535 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19536 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19537 +          %end;
19538 +          %else %do;
19539 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19540 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19541 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19542 +          %end;
19543 +    ;
19544 +  run;
19546 +  /* delete temporary tables */
19547 +  proc datasets lib=work nolist;
19548 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19549 +  run;
19551 +%mend em_tree_makePlotDs;
19555 +%macro em_tree_report;
19557 +   /* report properties */
19558 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19559 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19560 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19561 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19562 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19563 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19564 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19565 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19566 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19567 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19568 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19569 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19570 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19572 +   %let validexist=0;
19573 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19574 +     %let validexist=1;
19575 +   %end;
19577 +   /* determine if multiple targets will be processed */
19578 +   %let em_tree_multipleTargets=N;
19579 +   %let em_tree_numTarget=1;
19580 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19581 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19582 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19583 +         %let em_tree_multipleTargets=N;
19584 +      %end;
19585 +      %else %do;
19586 +        data _null_;
19587 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19588 +          if eof then
19589 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19590 +        run;
19592 +        %if &em_tree_numTarget gt 1 %then %do;
19593 +           %let em_tree_multipleTargets=Y;
19594 +        %end;
19595 +     %end;
19596 +   %end;
19598 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19600 +   /* variable importance */
19601 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19602 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19604 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19605 +     /* and the columns may not be generated                                                                                 */
19606 +     %let em_tree_cvexists=;
19607 +     %let em_tree_surrexists=.;
19608 +     data _null_;
19609 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19610 +       if eof then do ;
19611 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19612 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19613 +       end;
19614 +     run;
19616 +     data &EM_USER_OUTIMPORT;
19617 +         set &EM_USER_OUTIMPORT;
19618 +         /* format columns based on Precison value specified */
19619 +         format importance 15.&EM_PROPERTY_PRECISION
19620 +              %if &validexist %then %do;
19621 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19622 +              %end;
19623 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19624 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19625 +              %end;
19626 +         ;
19627 +     run;
19629 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19630 +     proc print data=&EM_USER_OUTIMPORT
19631 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19632 +          (where=((nrules>0) OR (nsurrogates>0)))
19633 +        %end;
19634 +        %else %do;
19635 +           (where=(nrules>0))
19636 +        %end;
19637 +        label noobs
19638 +        ;
19639 +     run;
19640 +     title10;
19642 +   %end;
19644 +   /* Sequence */
19645 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19646 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19647 +   data _null_ ;
19648 +      set &EM_USER_outseq (obs=2) end=eof ;
19649 +      if eof then do ;
19650 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19651 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19652 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19653 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19654 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19655 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19656 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19657 +      end;
19658 +    run;
19660 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19661 +      data &EM_USER_OUTSEQ;
19662 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19663 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19664 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19665 +           _XMISC_=_VMISC_
19666 +        %end;
19667 +        %if "&em_tree_aprof" ne "."  %then %do;
19668 +           _XAPROF_=_VAPROF_
19669 +           _XPROF_ = _VPROF_
19670 +        %end;
19671 +        %if "&em_tree_aloss" ne "."  %then %do;
19672 +           _XALOSS_=_VALOSS_
19673 +        %end;
19674 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19675 +           _XPASE_ = _VPASE_
19676 +           _XPMISC_ = _VPMISC_
19677 +        %end;
19679 +        ));
19680 +     %end;
19681 +     %else %do;
19682 +        set &EM_USER_OUTSEQ;
19683 +     %end;
19685 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19686 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19687 +            _MISC_   15.&EM_PROPERTY_PRECISION
19688 +         %end;
19689 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19690 +            _PASE_  15.&EM_PROPERTY_PRECISION
19691 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19692 +         %end;
19693 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19694 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19695 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19696 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19697 +            %end;
19698 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19699 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19700 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19701 +            %end;
19702 +         %end;
19703 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19704 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19705 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19706 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19707 +            %end;
19708 +         %end;
19709 +         %if "&em_tree_seq" ne "." %then %do;
19710 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19711 +         %end;
19712 +         %if "&em_tree_vseq" ne "." %then %do;
19713 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19714 +         %end;
19715 +         %if "&em_tree_aprof" ne "." %then %do;
19716 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19717 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19718 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19719 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19720 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19721 +           %end;
19722 +         %end;
19723 +         %else %if "&em_tree_aloss" ne "." %then %do;
19724 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19725 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19726 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19727 +           %end;
19728 +         %end;
19729 +      ;
19730 +    run;
19731 +   %end;
19733 +   /* Observation Based Importance */
19734 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19736 +      /* need to check for 0 obs */
19737 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19738 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19739 +      %let rc=%sysfunc(close(&dsid));
19741 +      %if &onobs %then %do;
19742 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19743 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19745 +         data &EM_USER_OUTOBSIMP;
19746 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19747 +           if _a;
19748 +           by _INPUT1_;
19749 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19750 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19751 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19752 +                   %end;
19753 +                   ;
19754 +         run;
19755 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19756 +      %end;
19757 +   %end;
19759 +  %end;
19761 +  /* create dataset to support tree diagram and icicle plot */
19762 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19763 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19765 +  /* display tree diagram */
19766 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19767 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19769 +  /* display icicle diagram */
19770 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19771 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19773 +  /* Leaf Statistics Plot */
19774 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19776 +  /* print leaf information to output window */
19777 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19779 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19780 +       by descending N;
19781 +     run;
19783 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19784 +     %local vn;
19785 +     data _null_;
19786 +       set t (obs=2) end=eof;
19787 +       if eof then do;
19788 +         call symput("vn", strip(put(vn, best.)));
19789 +       end;
19790 +     run;
19792 +     data t;
19793 +       set t;
19794 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19795 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19796 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19797 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19798 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19799 +       %end;
19800 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19801 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19802 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19803 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19804 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19805 +          %end;
19806 +       %end;
19807 +       ;
19808 +     run;
19810 +     /* determine if rase is found in t */
19811 +    %let dsid=%sysfunc(open(t,i));
19812 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19813 +    %let rc=%sysfunc(close(&dsid));
19815 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19816 +     proc print data=t noobs label;
19817 +       where tprob ne .;
19818 +       var node depth N tprob
19819 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19820 +         %if "&vn" ne "." %then %do;
19821 +           VN
19822 +         %end;
19823 +         vprob
19824 +       %end;
19825 +       %if &raseexists %then %do;
19826 +            RASE
19827 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19828 +              VRASE
19829 +            %end;
19830 +       %end;
19831 +       ;
19832 +     run;
19833 +     title10;
19834 +  %end;
19836 +  /* create plots that are done during training of node */
19837 +  /* display iterative plot, including reference line */
19838 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19839 +   /* %if &nleaves eq  %then %do; */
19840 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19841 +      data _null_;
19842 +        set &EM_USER_OUTTOPOLOGY end=eof;
19843 +        if eof then do;
19844 +          call symput('nleaves', LEAF);
19845 +        end;
19846 +      run;
19847 +   /* %end; */
19849 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19850 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19851 +  %end;
19853 +  /* display leaf statistics */
19854 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19856 +  /* stats by node if multiple targets = Y */
19857 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19858 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19859 +    data &EM_USER_OUTSTATS;
19860 +      set &EM_USER_OUTSTATS;
19862 +     * if STATNAME="TARGET" then delete;
19863 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19864 +      drop leaf;
19865 +    run;
19866 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19868 +  %end;
19869 +  %else %do;
19870 +    /* add outstats and outdescribe to spk but not results */
19871 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19872 +  %end;
19874 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS3.TREE_OUTIMPORT.
NOTE: The data set EMWS3.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set EMWS3.TREE_OUTSEQ.
NOTE: The data set EMWS3.TREE_OUTSEQ has 29 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS3.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 28 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set EMWS3.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 28 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 28 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 28 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 28 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 28 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set EMWS3.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 37 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 37 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 37 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 51 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 425 observations read from the data set EMWS3.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 28 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 51 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 28 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 57 observations read from the data set EMWS3.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 57 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 57 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 28 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 57 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 57 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 28 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 28 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 57 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS3.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 399 observations read from the data set EMWS3.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 399 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 399 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 342 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 399 observations read from the data set EMWS3.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 399 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 399 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 57 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 399 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 399 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 399 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 399 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 114 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 57 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 114 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 114 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 114 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 57 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 114 observations read from the data set WORK.TEMPPROB.
NOTE: There were 114 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 114 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 114 observations read from the data set WORK.TEMPPROB.
NOTE: There were 57 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 57 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 114 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 57 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 57 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 57 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 57 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 57 observations read from the data set WORK.TEMPN.
NOTE: There were 57 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 57 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE_TREE_PLOT has 57 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 399 observations read from the data set EMWS3.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 114 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 114 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 114 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 114 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 57 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 57 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 57 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 57 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 29 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 29 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 57 observations read from the data set EMWS3.TREE_TREE_PLOT.
NOTE: There were 29 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE_TREE_PLOT has 57 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 57 observations read from the data set EMWS3.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 57 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 57 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 57 observations read from the data set EMWS3.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19875
19876  *------------------------------------------------------------*;
19877  * End REPORT: Tree;
19878  *------------------------------------------------------------*;
 
19879  /* Reset EM Options */
19880  options formchar="|----|+|---+=|-/\<>*";
19881  options nocenter ls=256 ps=10000;
19882  goptions reset=all device=GIF NODISPLAY;
 
19883  proc sort data=WORK.EM_USER_REPORT;
19884  by ID VIEW;
19885  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19886  proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19887  by NAME;
19888  run;
 
NOTE: There were 14 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19889  proc sort data=EMWS3.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19890  by NAME;
19891  run;
 
NOTE: There were 14 observations read from the data set EMWS3.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19892  data WORK.ASSESS_META;
19893  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19894  by NAME;
19895  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19896  data EM_temp_assessMeta;
19897  set EMWS3.Tree_CMeta_TRAIN;
19898  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19899  run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19900  data EM_temp_assessdata;
19901  set EMWS3.Tree_TRAIN(keep=
19902  F_TargetBuy
19903  I_TargetBuy
19904  P_TargetBuy0
19905  P_TargetBuy1
19906  Q_TargetBuy0
19907  Q_TargetBuy1
19908  R_TargetBuy0
19909  R_TargetBuy1
19910  U_TargetBuy
19911  V_TargetBuy0
19912  V_TargetBuy1
19913  _WARN_
19914  TargetBuy
19915  );
19916  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS3.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 11112 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24201   data EM_temp_assessMeta;
24202   set EMWS3.Tree_CMeta_TRAIN;
24203   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24204   run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24205   data EM_temp_assessdata;
24206   set EMWS3.Tree_VALIDATE(keep=
24207   F_TargetBuy
24208   I_TargetBuy
24209   P_TargetBuy0
24210   P_TargetBuy1
24211   Q_TargetBuy0
24212   Q_TargetBuy1
24213   R_TargetBuy0
24214   R_TargetBuy1
24215   U_TargetBuy
24216   V_TargetBuy0
24217   V_TargetBuy1
24218   _WARN_
24219   TargetBuy
24220   );
24221   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 11111 observations read from the data set EMWS3.PART_VALIDATE.
NOTE: There were 11111 observations read from the data set EMWS3.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 11111 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28515   %let _cn = %sysfunc(getoption(CENTER));
28516   options nocenter;
28517   proc print data=EMWS3.Tree_EMREPORTFIT noobs label;
28518   var STAT LABEL TRAIN
28519   VALIDATE
28520   ;
28521   by TARGET TARGETLABEL;
28522   title9 ' ';
28523   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28524   run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28525   title10;
28526   options &_cn;
 
28527   proc sort data=EMWS3.Tree_EMCLASSIFICATION nothreads;
28528   by DATAROLE TARGET TARGETLABEL;
28529   run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
28530   %let _cn = %sysfunc(getoption(CENTER));
28531   options nocenter;
28532   proc print data=EMWS3.Tree_EMCLASSIFICATION noobs label;
28533   var from into pct_row pct_col count percent
28534   ;
28535   by DATAROLE TARGET TARGETLABEL;
28536   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28537   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28538   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28539   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28540   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28541   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28542   where _TYPE_='PREDICTION';
28543   title9 ' ';
28544   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28545   run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28546   title9;
28547   title10;
28548   options &_cn;
 
28549   %let _cn = %sysfunc(getoption(CENTER));
28550   options nocenter;
28551   data EMWS3.Tree_EMEVENTREPORT;
28552   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28552 !  8;
28553   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28553 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28553 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28553 ! FALSEEVENT
28554   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28554 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28554 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28555      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28556   FALSEEVENT=0;
28557   FALSENEVENT=0;
28558   TRUEEVENT=0;
28559   TRUENEVENT=0;
28560   set EMWS3.Tree_EMEVENTREPORT;
28561   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
28562   proc print data=EMWS3.Tree_EMEVENTREPORT noobs label;
28563   title9 ' ';
28564   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28565   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28566   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28567   title10;
28568   options &_cn;
 
28569   proc datasets library=EMWS3 nolist;
28570   modify Tree_EMRANK;
28571   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28572   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28573   run;
 
NOTE: MODIFY was successful for EMWS3.TREE_EMRANK.DATA.
28574   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
28575   %let _cn = %sysfunc(getoption(CENTER));
28576   options nocenter;
28577   proc print data=EMWS3.Tree_EMRANK label noobs;
28578   var
28579   decile gain lift liftc resp respc N _meanP_;
28580   by
28581   notsorted DATAROLE
28582   notsorted TARGET
28583   notsorted TARGETLABEL
28584   ;
28585   title9 ' ';
28586   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28587   run;
 
NOTE: There were 40 observations read from the data set EMWS3.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28588   title10;
28589   options &_cn;
 
28590   proc datasets library=EMWS3 nolist;
28591   modify Tree_EMSCOREDIST;
28592   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28593   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28594   run;
 
NOTE: MODIFY was successful for EMWS3.TREE_EMSCOREDIST.DATA.
28595   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.26 seconds
      cpu time            0.01 seconds
 
 
