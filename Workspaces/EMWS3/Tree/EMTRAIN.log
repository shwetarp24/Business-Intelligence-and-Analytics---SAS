*------------------------------------------------------------*
* Training Log
Date:                April 20, 2017
Time:                01:31:26
*------------------------------------------------------------*
14715  proc freq data=EMWS3.Tree_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.TreeMETA;
14717  run;

NOTE: There were 14 observations read from the data set EMWS3.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

14718  proc print data=WORK.TreeMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;

NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

14724  title10;

14725  %let EMNORLEN = %DMNORLEN;
EMWS3.Part_TRAIN EMWS3.Part_TRAIN 
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN 
EMWS3.Part_TRAIN EMWS3.Part_TRAIN 
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
14754  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14755  length ORDER $20;
14756  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14757     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14758  set EMWS3.IDS2_TARGETBUY_DM( where=(_TYPE_="TARGET"));
14759  NumLevels=2;
14760  select(upcase(ORDER));
14761  when('DESC') ORDER = 'Descending';
14762  when('ASC') ORDER = 'Ascending';
14763  when('FMTDESC') ORDER = 'Formatted Descending';
14764  when('FMTASC') ORDER = 'Formatted Ascending';
14765  otherwise ORDER = 'Descending';
14766  end;
14767  output;
14768  run;

NOTE: There were 1 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

14769  title9 ' ';
14770  proc print data=WORK.Tree_EVENT noobs label;
14771  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14772  title9 ' ';
14773  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14774  run;

NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14775  title10;

"No decisions defined for target "TargetBuy"." 
14776  proc print data = EMWS3.Ids2_TargetBuy_DM noobs label;
14777  var _type_ variable label;
14778  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14779  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14780  title9 ' ';
14781  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14782  run;

NOTE: There were 7 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

14783  title10;

14784  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15309  *------------------------------------------------------------*;
15310  * Tree: Generation of macros and macro variables;
15311  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15312  *------------------------------------------------------------*;

15313  %let EMEXCEPTIONSTRING=;
15314  *------------------------------------------------------------*;
15315  * TRAIN: Tree;
15316  *------------------------------------------------------------*;
15317  %let EM_ACTION = TRAIN;
15318  %let syscc = 0;
15319  %macro main;
15320  
15321    %if %upcase(&EM_ACTION) = CREATE %then %do;
15322      filename temp catalog 'sashelp.emmodl.tree_create.source';
15323      %include temp;
15324      filename temp;
15325  
15326      %em_tree_create;
15327    %end;
15328  
15329     %else
15330     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15331  
15332         filename temp catalog 'sashelp.emmodl.tree_train.source';
15333         %include temp;
15334         filename temp;
15335         %em_tree_train;
15336     %end;
15337  
15338    %else
15339    %if %upcase(&EM_ACTION) = SCORE %then %do;
15340      filename temp catalog 'sashelp.emmodl.tree_score.source';
15341      %include temp;
15342      filename temp;
15343  
15344      %em_tree_score;
15345  
15346    %end;
15347  
15348    %else
15349    %if %upcase(&EM_ACTION) = REPORT %then %do;
15350  
15351         filename temp catalog 'sashelp.emmodl.tree_report.source';
15352         %include temp;
15353         filename temp;
15354  
15355         %em_tree_report;
15356     %end;
15357  
15358    %else
15359    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15360  
15361         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15362         %include temp;
15363         filename temp;
15364         %EM_TREE_OPENTREEVIEWER;
15365  
15366     %end;
15367  
15368    %else
15369    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15370  
15371         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15372         %include temp;
15373         filename temp;
15374         %EM_TREE_CLOSETREEVIEWER;
15375  
15376     %end;
15377  
15378  
15379     %doendm:
15380  %mend main;
15381  
15382  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15384 +%macro em_tree_train;
15386 +   %if &EM_IMPORT_DATA eq %then %do;
15387 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15388 +       %put &em_codebar;
15389 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15390 +       %put &errormsg;
15391 +       %put &em_codebar;
15392 +       %goto doendm;
15393 +   %end;
15394 +   %else
15395 +       %let EMEXCEPTIONSTRING =;
15397 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15398 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15399 +        %put &em_codebar;
15400 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15401 +        %put &errormsg;
15402 +        %put &em_codebar;
15403 +        %goto doendm;
15404 +   %end;
15406 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15407 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15408 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15409 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15410 +        %put &em_codebar;
15411 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15412 +        %put &errormsg;
15413 +        %put &em_codebar;
15414 +        %goto doendm;
15415 +   %end;
15417 +   /* Initialize property macro variables */
15418 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15419 +   %include temp;
15420 +   filename temp;
15422 +   %EM_SetProperties;
15424 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15425 +   %EM_GETNAME(key=EMTREE, type=DATA);
15426 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15427 +     /* if import eq Y and no importtable defined, throw an exception */
15428 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15429 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15430 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15431 +         %put &em_codebar;
15432 +         %put &errmsg;
15433 +         %put &em_codebar;
15434 +         %goto doendm;
15435 +      %end;
15436 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15437 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15438 +         %put &em_codebar;
15439 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15440 +         %put &errormsg;
15441 +         %put &em_codebar;
15442 +         %goto doendm;
15443 +      %end;
15444 +      %else %do;
15445 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15446 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15447 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15448 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15449 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15450 +         %let dsid = %sysfunc(close(&dsid));
15451 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15452 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15453 +            %put &em_codebar;
15454 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15455 +            %put &errormsg;
15456 +            %put &em_codebar;
15457 +            %goto doendm;
15458 +         %end;
15459 +      %end;
15460 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15461 +         proc delete data=&EM_USER_EMTREE;
15462 +         run;
15463 +      %end;
15464 +   %end;
15465 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15466 +      proc delete data=&EM_USER_EMTREE;
15467 +      run;
15468 +   %end;
15470 +   /* load tree macros */
15471 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15472 +   %include temp;
15473 +   filename temp;
15475 +   /* data sets */
15476 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15477 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15478 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15480 +   /* files */
15481 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15483 +   /* check actual num of target levels */
15484 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15485 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15486 +                              nLevel=_nTargetLevel );
15487 +      %if &_nTargetLevel  > 2 %then %do;
15488 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15489 +        %put &em_codebar;
15490 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15491 +        %put &errormsg;
15492 +        %put &em_codebar;
15493 +        %goto doendm;
15494 +      %end;
15495 +   %end;
15497 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15498 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15499 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15500 +        %let costflag=0;
15501 +        data _null_;
15502 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15503 +          if eof then call symput("costflag", _N_);
15504 +        run;
15505 +        %if &costflag gt 0 %then %do;
15506 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15507 +          %put &em_codebar;
15508 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15509 +          %put &errormsg;
15510 +          %put &em_codebar;
15511 +          %goto doendm;
15512 +       %end;
15513 +     %end;
15514 +   %end;
15516 +   /* determine if multiple targets will be processed */
15517 +   %let em_tree_multipleTargets=N;
15518 +   %let em_tree_numTarget = 1;
15519 +   %let em_tree_targetVars=;
15521 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15522 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15523 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15524 +         %let em_tree_multipleTargets=N;
15525 +      %end;
15526 +      %else %do;
15527 +         /* create macro array of targets  */
15528 +         data _null_;
15529 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15530 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15531 +           if eof then
15532 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15533 +        run;
15535 +        %if &em_tree_numTarget gt 1 %then %do;
15536 +           %let em_tree_multipleTargets=Y;
15537 +        %end;
15538 +      %end;
15539 +   %end;
15541 +   /* create view of only necessary variable for performance reasons */
15542 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15543 +   data &tempData / view=&tempData;
15544 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15545 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15546 +       %EM_TARGET
15547 +     %end;
15548 +     %else %do;
15549 +       %if &em_tree_numTarget ne 0 %then %do;
15550 +         %do i=1 %to &em_tree_numTarget;
15551 +            &&em_tree_targetVars&i
15552 +         %end;
15553 +       %end;
15554 +     %end;
15555 +     );
15556 +   run;
15558 +   /* run Tree procedure */
15559 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15561 +   /* Check return code and throw exception if error is detected */
15562 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15563 +   %if &syserr %then %do;
15564 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15565 +     %goto doendm;
15566 +   %end;
15568 +   /* add decision score code if multiple targets are processed */
15569 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15570 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15571 +   %end;
15573 +   /* create outfit dataset if multiple score statements have been executed */
15574 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15576 +   /* create English Rules */
15577 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15578 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15579 +       %em_tree_makeEnglishRules;
15581 +       /* English Rules */
15582 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15584 +     %end;
15585 +   filename x;
15587 +   %doendm:
15588 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15589 +%macro EM_SetProperties;
15591 +   /* train properties */
15592 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15634 +   /* properties for interactive sample */
15635 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15640 +   /* report properties */
15641 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15655 +   /* score properties */
15656 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15659 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Deleting EMWS3.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15661 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15662 +  %global &nLevel;
15663 +  proc dmdb batch data=&indata
15664 +    classout=_tmp_dmdbout;
15665 +    class &target;
15666 +  run;
15667 +  data _tmp_dmdbout;
15668 +    set _tmp_dmdbout;
15669 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15670 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15671 +  run;
15672 +  data _null_;
15673 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15674 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15675 +    %let dsid = %sysfunc(close(&dsid));
15676 +     call symput("&nLevel", put(&_obs, Best12.));
15677 +  run;
15679 +  proc datasets lib=work nolist;
15680 +     delete _tmp_dmdbout;
15681 +  run;
15682 +  quit;
15683 +%Mend EM_CheckBinaryTargetLevel;
15686 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15688 +  /* determine the number of obs in training data */
15689 +  proc sql;
15690 +    reset noprint;
15691 +    select count(*) into :em_nobs from &indata;
15692 +  quit;
15694 +  /* determine the number of input variables */
15695 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15696 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15698 +  /* retrieve targetEvent from decmeta */
15699 +  %let targetEvent=;
15700 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15701 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15702 +      data _null_;
15703 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15704 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15705 +      run;
15706 +    %end;
15707 +  %end;
15709 +  /* create targetTable if multipleTar eq Y */
15710 +  data temptarget;
15711 +    set &EM_DATA_VARIABLESET;
15712 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15713 +  run;
15715 + /* data sets */
15716 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15717 + %EM_GETNAME(key=EMTREE,        type=DATA);
15718 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15719 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15720 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15721 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15722 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15723 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15724 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15725 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15727 + /* files */
15728 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15729 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15731 + /* turn on pmml if requested */
15732 + %let nnpmml=0;
15733 + %if %symexist(EM_PMML) %then %do;
15734 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15735 +       %let nnpmml=1;
15737 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15738 +%end;
15740 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15742 + %if &nnpmml or &numClassTarget %then %do;
15744 +       /* create dmdb needed for pmml generation */
15745 +       %let tree_maxlevel = 512;
15746 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15747 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15748 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15749 +         %end;
15750 +       %end;
15751 +       %if &tree_maxlevel gt 0 %then %do;
15752 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15753 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15754 +       %end;
15756 +       %let targetOrderString =;
15757 +       %let targetString = ;
15758 +       data _null_;
15759 +          length orderString nameString $10000;
15760 +          retain orderString nameString;
15761 +          set &em_data_variableset end=eof;
15762 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15763 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15764 +          %end;
15765 +          %else %do;
15766 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15767 +          %end;          select(order);
15768 +            when('')        order ='DESC';
15769 +            when('FMTASC')  order='ASCFMT';
15770 +            when('FMTDESC') order='DESFMT';
15771 +            otherwise;
15772 +          end;
15773 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15774 +          nameString = trim(nameString)!!' '!!trim(NAME);
15776 +          if eof then do;
15777 +             call symput('targetOrderString', trim(orderString));
15778 +             call symput('targetString', trim(nameString));
15779 +          end;
15780 +       run;
15782 +       %let arborkluge= "work._treeDMDB";
15784 +       proc dmdb batch data=&indata
15785 +       %if &nnpmml %then %do;
15786 +           PMML
15787 +       %end;
15788 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15791 +   %if &nnpmml %then %do;
15792 +        %if "%EM_ID" ne "" %then %do;
15793 +          id %EM_ID;
15794 +        %end;
15795 +        %if &EM_NUM_CLASS gt 0 %then %do;
15796 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15797 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15798 +               &targetOrderString;
15799 +        %end;
15800 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15801 +          var %EM_INTERVAL;
15802 +        %end;
15803 +        target &targetString %EM_INTERVAL_TARGET;
15804 +        %if "%EM_FREQ" ne "" %then %do;
15805 +          freq %EM_FREQ;
15806 +        %end;
15807 +  %end;
15808 +  %else %do;
15809 +      class  &targetOrderString;
15810 +      target &targetString %EM_INTERVAL_TARGET;
15811 +  %end;
15812 +       run;
15813 +       quit;
15815 +       proc datasets lib=work nolist;
15816 +          delete classout varout;
15817 +       run;
15818 +       quit;
15820 +    %end;
15821 + %end;
15823 + /* run Arbor procedure */
15824 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15825 +  proc arbor data=&INDATA
15827 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15828 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15829 +  %end;
15831 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15832 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15833 +  %end;
15835 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15836 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15837 +  %end;
15839 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15840 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15841 +  %end;
15843 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15844 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15845 +  %end;
15847 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15848 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15849 +  %end;
15850 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15851 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15852 +  %end;
15853 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15854 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15855 +  %end;
15857 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15858 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15859 +      alpha = &EM_PROPERTY_SIGLEVEL
15860 +    %end;
15861 +  %end;
15863 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15864 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15865 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15866 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15867 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15869 +        padjust =
15870 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15871 +          &chaid
15872 +        %end;
15873 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15874 +          DEPTH
15875 +        %end;
15876 +      %end;
15877 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15878 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15879 +         pvars = &num_inputs
15880 +      %end;
15881 +    %end;
15882 +  %end;
15883 +  %else %do;
15884 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15885 +         padjust = NONE
15886 +      %end;
15887 +  %end;
15889 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15890 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15891 +    Maxrules = &num_nrules
15892 +  %end;
15894 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15895 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15896 +    Maxsurrs = &num_nsurrs
15897 +  %end;
15899 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15900 +     Missing=&EM_PROPERTY_MISSINGVALUE
15901 +  %end;
15903 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15904 +     USEVARONCE
15905 +  %end;
15907 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15908 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15909 +  %end;
15912 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15913 +    event = "&targetEvent"
15914 +  %end;
15916 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15917 +     DECSEARCH
15918 +  %end;
15920 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15921 +     PRIORSSEARCH
15922 +  %end;
15924 +  %if &arbor_1 ne %then %do;
15925 +    &arbor_1
15926 +  %end;
15928 +  %if &em_arbor ne %then %do;
15929 +     &em_arbor
15930 +  %end;
15931 +  ;
15932 + %end;
15933 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15934 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15935 +       interact;
15936 + %end;
15937 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15938 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15939 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15940 +    %put &em_codebar;
15941 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15942 +    %put &errormsg;
15943 +    %put &em_codebar;
15944 +    %goto doendm;
15945 +   %end;
15946 +   %else %do;
15947 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15948 +       interact;
15949 +   %end;
15950 + %end;
15952 + %else %do;
15953 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15954 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15955 +    %put &em_codebar;
15956 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15957 +    %put &errormsg;
15958 +    %put &em_codebar;
15959 +    %goto doendm;
15960 +   %end;
15961 +   %else %do;
15962 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15963 +        interact;
15964 +   %end;
15965 + %end;
15967 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15968 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15969 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15970 +    %end;
15972 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15973 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15974 +    %end;
15976 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15977 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15978 +    %end;
15980 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15981 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15982 +    %end;
15984 +    %if "%EM_FREQ" ne "" %then %do;
15985 +       freq %EM_FREQ;
15986 +    %end;
15988 +    %if "&multipleTar" eq "Y" %then %do;
15989 +       /* cycle through all target vars in variableset */
15990 +       %let tdsid = %sysfunc(open(temptarget));
15991 +       %if &tdsid %then %do;
15992 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15993 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15994 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15995 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15996 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15997 +             target &var / level = &lvl
15998 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15999 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16000 +             %end;
16001 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16002 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16003 +             %end;
16004 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16005 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16006 +             %end;
16007 +          %end;
16008 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16009 +       %end;
16010 +       useTarget variable = %EM_TARGET;
16011 +    %end;
16012 +    %else %do;
16013 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16014 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16015 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16016 +      %end;
16017 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16018 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16019 +      %end;
16020 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16021 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16022 +      %end;
16023 +    %end;
16025 +    %if "&multipleTar" eq "N" %then %do;
16026 +      &EM_DEC_STATEMENT;
16027 +    %end;
16029 +    Performance &EM_PROPERTY_PERFORMANCE
16030 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16031 +      nodesize=&EM_PROPERTY_NODESAMPLE
16032 +    %end;
16033 +    ;
16035 +    %if "&intFlag" eq "Y" %then %do;
16036 +       INTERACT Largest;
16037 +       Train maxnewdepth=0;
16038 +    %end;
16040 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16041 +         Assess
16042 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16043 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16044 +              %put &em_codebar;
16045 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16046 +              %put &errormsg;
16047 +              %put &em_codebar;
16048 +            %end;
16049 +            %else %do;
16050 +               Validata=&EM_IMPORT_VALIDATE
16051 +            %end;
16052 +         %end;
16053 +         %else %do;
16054 +           NoValidata
16055 +         %end;
16056 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16057 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16058 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16059 +               %if &dsid %then %do;
16060 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16061 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16062 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16063 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16064 +                   %else %do;
16065 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16066 +                      %else %let measure= MISC;
16067 +                   %end;
16068 +                 %end;
16069 +               %end;
16070 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16071 +            %end;
16072 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16073 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16074 +                 %let measure=ASE;
16075 +              %end;
16076 +              %else %do;
16077 +                 %let measure=MISC;
16078 +              %end;
16079 +            %end;
16080 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16081 +              %let measure=ASE;
16082 +            %end;
16083 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16084 +               %let measure = LIFT;
16085 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16086 +               %if &dsid %then %do;
16087 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16088 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16089 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16090 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16091 +                 %end;
16092 +               %end;
16093 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16094 +            %end;
16095 +            measure=&measure
16096 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16097 +               event = "&targetEvent"
16098 +            %end;
16099 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16100 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16101 +            %end;
16102 +         %end;
16103 +         %if "&multipleTar" eq "N" %then %do;
16104 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16105 +               CV
16106 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16107 +                 CVNITer = &EM_PROPERTY_CVNITER
16108 +               %end;
16109 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16110 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16111 +               %end;
16112 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16113 +                 CVSeed = &EM_PROPERTY_CVSEED
16114 +               %end;
16115 +            %end;
16116 +         %end;
16117 +       %end;
16118 +      ;
16120 +      %if "&intFlag" ne "Y" %then %do;
16121 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16122 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16123 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16124 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16126 +          SUBTREE &subtree
16127 +          %if "&subtree" eq "NLEAVES" %then %do;
16128 +            =&EM_PROPERTY_NSUBTREE
16129 +          %end;
16130 +          ;
16131 +        %end;
16133 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16134 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16135 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16136 +          %end;
16137 +       %end;
16138 +      %end;
16139 + %end;
16142 + MakeMacro nleaves = nleaves;
16143 + save
16144 + %if "&EM_USER_EMTREE" ne "" %then %do;
16145 +   MODEL=&EM_USER_EMTREE
16146 + %end;
16147 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16148 +   SEQUENCE=&EM_USER_OUTSEQ
16149 + %end;
16150 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16151 +   IMPORTANCE=&EM_USER_OUTIMPORT
16152 + %end;
16153 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16154 +   NODESTAT=&EM_USER_OUTNODES
16155 + %end;
16156 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16157 +   SUMMARY=&EM_USER_OUTSUMMARY
16158 + %end;
16159 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16160 +   STATSBYNODE=&EM_USER_OUTSTATS
16161 + %end;
16162 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16163 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16164 + %end;
16165 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16166 +   Pathlistnonmissing=&EM_USER_OUTPATH
16167 + %end;
16168 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16169 +   RULES = &EM_USER_OUTRULES
16170 + %end;
16171 + ;
16173 + %if "&intFlag" ne "Y" %then %do;
16175 +   %let lookupString = ;
16176 +   %if ^%symexist(EM_OPTION) %then
16177 +      %let EM_OPTION=;
16179 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16180 +      %let lookupString = LOOKUP=SELECT;
16181 +   %end;
16183 +   %let codetext=;
16184 +   %let norescodetxt=;
16186 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16187 +     %let codetext=&codetext DUMMY;
16188 +     %let norescodetxt=&norescodetxt DUMMY;
16189 +   %end;
16190 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16191 +     %let codetext=&codetext NOLEAFID;
16192 +     %let norescodetxt=&norescodetxt NOLEAFID;
16193 +   %end;
16194 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16195 +     %let norescodetxt=&norescodetxt NOPRED;
16196 +   %end;
16198 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16199 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16201 +   %if &nnpmml %then %do;
16202 +     code pmml;
16203 +   %end;
16205 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16206 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16207 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16208 +   %end;
16209 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16210 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16211 +   %end;
16212 + %end;
16214 + run;
16215 + quit;
16217 + /*%em_checkerror(); */
16218 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16219 +   /* Delete DMDB catalog */
16220 +   proc datasets lib=work nolist;
16221 +       delete _treeDMDB / mt=cat;
16222 +  run;
16223 +  %end;
16225 + %if &nnpmml %then %do;
16226 +    ods pmml close;
16227 + %end;
16229 +  %doendm:
16231 +%mend em_tree_runTreeProcedure;
16233 +%macro em_tree_createFitStats( multipleTar= );
16236 +  /* create targetTable is multipleTar eq Y */
16237 +  data temptarget;
16238 +    set &EM_DATA_VARIABLESET;
16239 +    where ROLE="TARGET";
16240 +  run;
16242 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16243 +   data &EM_USER_EMOUTFIT;
16244 +     length target $32;
16245 +     merge work.fit_train
16246 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16247 +       work.fit_valid
16248 +     %end;
16249 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16250 +       work.fit_test
16251 +     %end;
16252 +     ;
16253 +     %if "&multipleTar" eq "N" %then %do;
16254 +       target="%EM_TARGET";
16255 +     %end;
16256 +     %else %do;
16257 +       target = _TARGET_;
16258 +     %end;
16259 +     drop _NW_ _SUMW_
16260 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16261 +        _VSUMW_
16262 +     %end;
16263 +     ;
16264 +   run;
16266 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16267 +     proc datasets library=work nolist;
16268 +       delete fit_valid;
16269 +     run;
16270 +   %end;
16271 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16272 +     proc datasets library=work nolist;
16273 +       delete fit_test;
16274 +     run;
16275 +   %end;
16277 +%mend em_tree_createFitStats;
16280 +%macro em_tree_makeEnglishRules;
16282 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16283 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16285 +  /* verify that necessary tables exist and if not, skip processing */
16286 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16287 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16288 +    %goto doendm;
16289 +  %end;
16290 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16291 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16292 +    %goto doendm;
16293 +  %end;
16295 +  /* determine length of variable in outpath dataset */
16296 +  %let vlength= ;
16297 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16298 +  %if &dsid ne %then %do;
16299 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16300 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16301 +  %end;
16302 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16304 +  data tempoutpath;
16305 +    length varname $&vlength;
16306 +    retain varname;
16307 +    set &EM_USER_OUTPATH;
16309 +    if ^missing(variable) then varname=variable;
16310 +    else if ^missing(var_name) then varname=var_name;
16311 +    output;
16312 +  run;
16314 +  /* create an array of generated predicted variable names */
16315 +  %let tree_pred_vars = ;
16316 +  %let tree_pred_label = ;
16317 +  %let numpred= 0;
16318 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16320 +    data _null_;
16321 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16322 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16323 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16324 +     if eof then
16325 +       call symput('numpred', strip(put(_N_, BEST.)));
16326 +    run;
16327 +  %end;
16329 +  /* determine if NPRIORS exists in outnodes  */
16330 +  %local nprior_flag;
16331 +  data _null_;
16332 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16333 +    if eof then do;
16334 +      call symput('nprior_flag', strip(put(npriors, best.)));
16335 +    end;
16336 +  run;
16338 +  proc sort data=tempoutpath; by node; run;
16339 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16341 +  data tempoutpath;
16342 +    merge tempoutpath(in=_a) outnodes(keep= node
16343 +    %if "&nprior_flag" ne "." %then %do;
16344 +      NPRIORS
16345 +    %end;
16346 +    %else %do;
16347 +      N
16348 +    %end;
16349 +    %if &numpred gt 0 %then %do;
16350 +      %do i=1 %to &numpred;
16351 +        &&tree_pred_vars&i
16352 +      %end;
16353 +    %end;
16354 +    );
16355 +    by node;
16356 +    if _a;
16357 +  run;
16359 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16361 +  data _null_;
16362 +    file x;
16363 +    set tempoutpath;
16364 +    by node descending varname;
16365 +    retain origvar oldnode string;
16366 +    length origvar $32 oldnode 8 string $200;
16368 +    if _N_ = 1 then do;
16369 +      origvar = varname;
16370 +      oldnode = node;
16371 +    end;
16373 +    if first.node then do;
16374 +       put "&EM_CODEBAR";
16375 +       put " Node = " node;
16376 +       put "&EM_CODEBAR";
16377 +    end;
16379 +      if first.varname then do;
16380 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16381 +            if MISSING(CHARACTER_VALUE) then do;
16382 +             if NUMERIC_VALUE ne .  then do;
16383 +              if ^first.node then do;
16384 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16385 +              end;
16386 +              else do;
16387 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16388 +              end;
16389 +             end;
16390 +            end;
16391 +            else do;
16392 +              if ^first.node then do;
16393 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16394 +              end;
16395 +              else do;
16396 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16397 +              end;
16398 +             end;
16399 +         end;
16400 +         else if RELATION in ("=") then do;
16401 +            if ^first.node then do;
16402 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16403 +            end;
16404 +            else do;
16405 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16406 +            end;
16407 +         end;
16408 +         else if RELATION in ("ISMISSING") then do;
16409 +            if ^first.node then do;
16410 +              string = " AND "|| strip(varname) || " equals Missing";
16411 +            end;
16412 +            else do;
16413 +              string = "if "|| strip(varname) ||" equals Missing";
16414 +            end;
16415 +         end;
16416 +         else if RELATION in ("ISNOTMISSING") then do;
16417 +            if ^first.node then do;
16418 +              string = " AND "|| strip(varname) || " equals All Values";
16419 +            end;
16420 +            else do;
16421 +              string = "if "|| strip(varname) ||" equals All Values";
16422 +            end;
16423 +         end;
16424 +         if ^missing(varname) then origvar = varname;
16425 +         oldnode=node;
16427 +      end;
16428 +      else do;
16429 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16430 +          if MISSING(CHARACTER_VALUE) then do;
16431 +           if  NUMERIC_VALUE ne .  then do;
16432 +            if ^MISSING(string) then
16433 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16434 +            else
16435 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16436 +           end;
16437 +          end;
16438 +          else do;
16439 +            if ^MISSING(string) then
16440 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16441 +            else
16442 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16443 +          end;
16445 +         end;
16446 +         else if RELATION in ("=") then do;
16447 +           string = strip(string)||", "||strip(character_value);
16448 +         end;
16449 +         else if RELATION in ("ISMISSING") then do;
16451 +         end;
16452 +         if ^missing(varname) then origvar = varname;
16453 +         oldnode=node;
16454 +      end;
16455 +      if last.varname then do;
16456 +         if RELATION in ("ISMISSING") then do;
16457 +           if ^first.varname then do;
16458 +             string = strip(string) || " or MISSING";
16459 +           end;
16460 +         end;
16461 +         put string;
16462 +         if ^missing(varname) then origvar = varname;
16463 +         oldnode=node;
16464 +      end;
16466 +      if last.node then do;
16467 +         put "then ";
16468 +         put " Tree Node Identifier   = " node;
16470 +         %if "&nprior_flag" ne "." %then %do;
16471 +           put " Number of Observations = " NPRIORS;
16472 +         %end;
16473 +         %else %do;
16474 +           put " Number of Observations = " N;
16475 +         %end;
16477 +         %if &numpred gt 0 %then %do;
16478 +           %do i=1 %to &numpred;
16479 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16480 +           %end;
16481 +         %end;
16483 +         put " ";
16484 +         if ^missing(varname) then origvar = varname;
16485 +         oldnode=node;
16486 +      end;
16488 +  run;
16490 +  proc datasets lib=work nolist;
16491 +    delete tempoutpath outnodes;
16492 +  run;
16494 +  %doendm:
16495 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 11112   Memory used = 511K.
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.15 seconds
      cpu time            0.03 seconds
      


NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA STEP view saved on file EMWS3.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 11112   Memory used = 511K.
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS3.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      


NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 11112 out of 11112 training cases.
NOTE: Using memory pool with 176443392 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 2853968 bytes of work memory.
NOTE: The subtree sequence contains 29 subtrees. The largest has 57 nodes and 29 leaves.
NOTE: Using subtree with 57 nodes and 29 leaves.
NOTE: Using subtree with 57 nodes and 29 leaves.
NOTE: Created macro variable NLEAVES equal to 29.
NOTE: The data set EMWS3.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS3.TREE_EMTREE has 1416 observations and 4 variables.
NOTE: The data set EMWS3.TREE_OUTNODES has 57 observations and 24 variables.
NOTE: The data set EMWS3.TREE_OUTPATH has 187 observations and 7 variables.
NOTE: The data set EMWS3.TREE_OUTRULES has 425 observations and 6 variables.
NOTE: The data set EMWS3.TREE_OUTSEQ has 29 observations and 20 variables.
NOTE: The data set EMWS3.TREE_OUTSTATS has 399 observations and 5 variables.
NOTE: The data set EMWS3.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS3.TREE_OUTTOPOLOGY has 57 observations and 5 variables.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\TREEFLOW.sas opened.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.


NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           0.90 seconds
      cpu time            0.51 seconds
      
NOTE: There were 11112 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS3.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.92 seconds
      cpu time            0.53 seconds
      


NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS3.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 187 observations read from the data set EMWS3.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 187 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set EMWS3.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS3.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 187 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 187 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 57 observations read from the data set EMWS3.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 57 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 187 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 57 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 187 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 187 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 187 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS3\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=20Apr2017:01:31:28,
      Create Time=20Apr2017:01:31:28

NOTE: 347 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 187 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref X has been deassigned.
16497  
16498  *------------------------------------------------------------*;
16499  * End TRAIN: Tree;
16500  *------------------------------------------------------------*;

16501  *------------------------------------------------------------*;
16502  * Close any missing semi colons;
16503  *------------------------------------------------------------*;
16504  ;
16505  ;
16506  ;
16507  ;
16508  quit;
16509  *------------------------------------------------------------*;
16510  * Close any unbalanced quotes;
16511  *------------------------------------------------------------*;
16512  /*; *"; *'; */
16513  ;
16514  run;
16515  quit;
16516  /* Reset EM Options */
16517  options formchar="|----|+|---+=|-/\<>*";
16518  options nocenter ls=256 ps=10000;
16519  goptions reset=all device=GIF NODISPLAY;

16520  proc sort data=WORK.EM_USER_REPORT;
16521  by ID VIEW;
16522  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

