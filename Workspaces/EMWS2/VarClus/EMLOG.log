*------------------------------------------------------------*
User:                pkumari1
Date:                April 20, 2017
Time:                02:48:16
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 20, 2017
Time:                02:48:08
*------------------------------------------------------------*
14715  proc freq data=EMWS2.VarClus_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.VarClusMETA;
14717  run;
 
NOTE: There were 99 observations read from the data set EMWS2.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.VarClusMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 7 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15117  *------------------------------------------------------------*;
15118  * VarClus: Generation of macros and macro variables;
15119  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15120  *------------------------------------------------------------*;
 
15121  %let EMEXCEPTIONSTRING=;
15122  *------------------------------------------------------------*;
15123  * TRAIN: VarClus;
15124  *------------------------------------------------------------*;
15125  %let EM_ACTION = TRAIN;
15126  %let syscc = 0;
15127
15128  %macro main;
15129
15130     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15131     %include temp;
15132     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15133     %include temp;
15134     filename temp;
15135
15136    %SetProperties;
15137
15138     %if %upcase(&EM_ACTION) = CREATE %then %do;
15139         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15140         %include temp;
15141         filename temp;
15142         %create;
15143     %end;
15144     %else
15145     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15146          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15147             %include temp;
15148             filename temp;
15149             %train;
15150     %end;
15151     %else
15152     %if %upcase(&EM_ACTION) = SCORE %then %do;
15153             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15154             %include temp;
15155             filename temp;
15156             %score;
15157     %end;
15158     %else
15159     %if %upcase(&EM_ACTION) = REPORT %then %do;
15160             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15161             %include temp;
15162             filename temp;
15163             %report;
15164     %end;
15165     /*
15166     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15167         %put 'OPENING TABLE';
15168     %end;
15169     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15170         %put 'CLOSE TABLE';
15171     %end;
15172     */
15173  %mend main;
15174  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15175 +
15176 +/* Initialize property macro variables */
15177 +%macro SetProperties;
15178 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15179 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15180 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15181 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15182 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15183 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15184 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15185 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15186 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15187 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15188 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15189 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15190 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15191 +
15192 +%mend SetProperties;
15193 +
15194 +%Macro MakeDummyVariables(indata=,
15195 +                          outvar=,
15196 +                          outdata=,
15197 +                          fileref=,
15198 +                          recreatecmeta=N, /* optional */
15199 +                          incmeta=,     /* optional */
15200 +                          outcmeta=,    /* optional */
15201 +                          ndummyvars=_ndummyvars
15202 +                          );
15203 +    %global &ndummyvars;
15204 +
15205 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15206 +       class
15207 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15208 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15209 +    ;
15210 +    run;
15211 +    %let &ndummyvars = 0;
15212 +    data _null_;
15213 +    %let dsid = %sysfunc(open(work._classout));
15214 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15215 +    %let dsid = %sysfunc(close(&dsid));
15216 +    run;
15217 +
15218 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15219 +       input
15220 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15221 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15222 +        / level=nominal stdize=no;
15223 +       make outvar = &outvar;
15224 +       score data = &indata out =&outdata;
15225 +       code  file=  "&fileref";
15226 +    run;
15227 +    %if &recreatecmeta eq Y %then %do;
15228 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15229 +    data _tmpds;
15230 +        set _tmpds;
15231 +           ROLE = 'INPUT';
15232 +           LEVEL = 'INTERVAL';
15233 +           CREATOR='DMZIP';
15234 +           if NAME = '_TYPE_' then delete;
15235 +    run;
15236 +    data &outcmeta;
15237 +         set &incmeta _tmpds;
15238 +    run;
15239 +    %end;
15240 +    proc datasets lib=work nolist;
15241 +      delete  _dmdbdat _dmdbcat _classout
15242 +    %if &recreatecmeta eq Y %then %do;
15243 +    _tmpds
15244 +    %end;
15245 +    ;
15246 +    quit;
15247 +%Mend MakeDummyVariables;
15248 +
15249 +/*--- Determine Optimal Number of Cluster ----
15250 +%macro FindClusNum(statds=, groupds=, minvariation=);
15251 +   %global optnclus;
15252 +   data varclus_tmp(drop=_NAME_);
15253 +      set &statDs;
15254 +      where _type_ ='PROPOR';
15255 +   run;
15256 +   proc sort data=varclus_tmp;
15257 +      by _NCL_;
15258 +   run;
15259 +   proc transpose data=varclus_tmp out=varclus_tmp;
15260 +      by _NCL_;
15261 +      var %EM_INTERVAL_INPUT
15262 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15263 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15264 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15265 +          %do i = 2 %to &nvar;
15266 +          %let varname = %sysfunc(varname(&dsid, &i));
15267 +          &varname
15268 +          %end;
15269 +      %end;
15270 +   ;
15271 +   run;
15272 +
15273 +   %if &minVariation eq %then %do;
15274 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15275 +   %end;
15276 +   %if ^(0<&minVariation<100) %then %do;
15277 +       %let minVariation = 90;
15278 +   %end;
15279 +
15280 +   data _null_;
15281 +      set varclus_tmp end=eof;
15282 +      by _NCL_;
15283 +      retain flag 0;
15284 +      if first._ncl_ then flag=0;
15285 +      if .<col1 < &minVariation then flag=1;
15286 +      if last._ncl_ and ^flag then do;
15287 +         call symput('OPTNCL', _ncl_);
15288 +         stop;
15289 +      end;
15290 +     if eof then call symput('OPTNCL', _ncl_);
15291 +   run;
15292 +
15293 +   %let optnclus = &OPTNCL;
15294 +
15295 +   data varclus_tmp(drop=_NCL_ _NAME_);
15296 +      set &statDs;
15297 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15298 +   run;
15299 +   proc sort data=varclus_tmp;
15300 +      by _TYPE_;
15301 +   run;
15302 +   proc transpose data=varclus_tmp out=varclus_tmp;
15303 +      by _TYPE_;
15304 +   run;
15305 +   proc sort data=varclus_tmp;
15306 +      by _name_ _type_;
15307 +   run;
15308 +
15309 +  proc transpose data=varclus_tmp out=&groupds;
15310 +      by _NAME_;
15311 +   run;
15312 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15313 +      by Cluster descending Rsquare;
15314 +      where Cluster ne 0;
15315 +   run;
15316 +   proc datasets lib=work nolist mt=(DATA VIEW);
15317 +      delete varclus_tmp;
15318 +   run;
15319 +   quit;
15320 +%mend findClusNum;
15321 +*/
15322 +
15323 +%macro getNclusfromTrain(inoutstat=, nc=);
15324 +%global &nc;
15325 +data _null_;
15326 +    set &inoutstat end=eof;
15327 +    if eof then do;
15328 +    call symput("&nc", _ncl_);
15329 +    end;
15330 +run;
15331 +%mend  getNclusfromTrain;
15332 +
15333 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15334 +
15335 +     *--- Build Code to Modify Metadata ---*;
15336 +     filename X "&deltacodefile";
15337 +     data _null_;
15338 +        FILE X;
15339 +        set &groupds end=eof;
15340 +        /*by Cluster;*/
15341 +         if _N_=1 then do;
15342 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15343 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15344 +           %end;
15345 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15346 +           put "if upcase(strip(NAME)) in (";
15347 +        end;
15348 +        if Strip(upcase(Selected)) eq 'YES' then do;
15349 +           string = '"'!!trim(left(VARIABLE))!!'"';
15350 +           put string;
15351 +        end;
15352 +        if eof then do;
15353 +           put ') then ROLE="INPUT";';
15354 +           put 'else ROLE="REJECTED";';
15355 +           put 'end;';
15356 +
15357 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15358 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15359 +           %end;
15360 +        end;
15361 +     run;
15362 +     quit;
15363 +
15364 +     filename X;
15365 +
15366 +     quit;
15367 +%mend MakeDeltaCode;
15368 +
15369 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15370 +    %if ^%sysfunc(exist(&statds)) %then %do;
15371 +         %goto doendc;
15372 +    %end;
15373 +
15374 +    data &corrds(drop=_TYPE_ _NCL_) ;
15375 +       set &statds;
15376 +       where _type_ eq 'CORR' ;
15377 +    run ;
15378 +    proc sort data=&corrds;
15379 +       by _NAME_ ;
15380 +    run ;
15381 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15382 +      BY _NAME_ ;
15383 +    run ;
15384 +    data &corrplotds;
15385 +       length _Y_ $100;
15386 +       set &corrplotDs;
15387 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15388 +    run ;
15389 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15390 +       set &corrplotds;
15391 +       where _LABEL_ ne '' ;
15392 +       keep _TMP_ _LABEL_ ;
15393 +    run ;
15394 +    data _null_;
15395 +       nobs=0;
15396 +       dsid = open('varclus_match');
15397 +       if dsid then do;
15398 +          nobs = attrn(dsid, 'NOBS');
15399 +          dsid = close(dsid);
15400 +       end;
15401 +       call symput ('CORR_NOBS', nobs);
15402 +    run;
15403 +    %if &corr_nobs %then %do;
15404 +        proc sort data=varclus_match;
15405 +           by _name_;
15406 +        run ;
15407 +        proc sort data=&corrplotds;
15408 +           by _name_;
15409 +        run ;
15410 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15411 +           merge varclus_match &corrplotds;
15412 +           by _NAME_ ;
15413 +           if _X_ eq '' then _X_=_NAME_ ;
15414 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15415 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15416 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15417 +
15418 +       run ;
15419 +    %end;
15420 +    %else %do;
15421 +        proc sort data=&corrplotds;
15422 +           by _name_;
15423 +        run ;
15424 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15425 +           set &corrplotds;
15426 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15427 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15428 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15429 +
15430 +        run ;
15431 +    %end;
15432 +    proc sort data=&corrplotds;
15433 +       by _X_ _Y_;
15434 +    run ;
15435 +    proc datasets lib=work nolist mt=(DATA VIEW);
15436 +       delete varclus_match;
15437 +    run;
15438 +    quit;
15439 +
15440 +%doendc:
15441 +
15442 +%mend MakeVarClusCorrData;
15443 +
15444 +%macro MakeStatPlotData(statds= , outstatplotds=);
15445 +   %if %sysfunc(exist(&statds)) %then %do;
15446 +
15447 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15448 +          set &statDs;
15449 +          where _type_ in('MEAN', 'STD', 'N');
15450 +       run ;
15451 +       proc transpose data=varclus_tmp out=&outstatplotds;
15452 +          id _TYPE_ ;
15453 +       run ;
15454 +       data &outstatplotds;
15455 +          set &outstatplotds(obs=1000);
15456 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15457 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15458 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15459 +          else SCALEDSTD= STD ;
15460 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15461 +       run ;
15462 +       proc sort data=&outstatplotds;
15463 +          by descending SCALEDSTD ;
15464 +       run ;
15465 +       proc datasets lib=work nolist mt=(DATA VIEW);
15466 +          delete varclus_tmp;
15467 +       run;
15468 +       quit;
15469 +    %end;
15470 +
15471 +%mend MakeStatPlotData;
15472 +
15473 +
15474 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15475 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15476 +    data &EM_USER_OUTSTATSCORE;
15477 +          set &indata;
15478 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15479 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15480 +          if _TYPE_ = 'STD' then _NAME_='STD';
15481 +          DROP _TYPE_ _NCL_;
15482 +     run;
15483 +
15484 +     filename _file_  "&fileRef";
15485 +
15486 +     data _null_;
15487 +        FILE _file_ MOD;
15488 +        put ' ';
15489 +        put '/*-------------------------------------------------*/';
15490 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
15491 +        put '/*-------------------------------------------------*/';
15492 +        put ' ';
15493 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
15494 +
15495 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
15496 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
15497 +
15498 +        %let k = 1;
15499 +        %do %while(^%sysfunc(fetch(&dsid)));
15500 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15501 +                %if &k > 2 %then %do;
15502 +                 %let cn = %eval(&k-2);
15503 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
15504 +                %end;
15505 +                %let k = %eval(&k+1);
15506 +        %end;
15507 +
15508 +        %let rc = %sysfunc(rewind(&dsid));
15509 +
15510 +        %do i= 2 %to &nvar;
15511 +            %let _varname =  %sysfunc(varname(&dsid, &i));
15512 +            %do %while(^%sysfunc(fetch(&dsid)));
15513 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15514 +                %if &_name = MEAN %then
15515 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
15516 +                %else %if &_name = STD %then
15517 +                %let _std = %sysfunc(getvarn(&dsid, &i));
15518 +                %else %do;
15519 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
15520 +                      %let abscoeff = %sysfunc(abs(&coeff));
15521 +                          %if &abscoeff >  0 %then %do;
15522 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
15523 +                           %end;
15524 +                 %end;
15525 +             %end;
15526 +             %let rc = %sysfunc(rewind(&dsid));
15527 +         %end;
15528 +
15529 +        %let dsid= %sysfunc(close(&dsid));
15530 +       run;
15531 +%mend CreateScoreCode;
15532 +
15533 +
15534 +
15535 +/*----------------------------------------------------------
15536 +    Instead of using %MakeRSquareData,
15537 +    %MakeVarClusResultTable at macro2.source is used
15538 + +----------------------------------------------------------*/
15539 +
15540 +
15541 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
15542 +
15543 +/* modifying  from ods rsquare = data */
15544 +
15545 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
15546 +    Length Cluster $16;
15547 +    length Variable $32;
15548 +    Length VariableLabel $64;
15549 +    set &indata; retain CurrentCluster;
15550 +    if NumberOfClusters ^= &ncluster then delete;
15551 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
15552 +    CurrentCluster = Cluster;
15553 +   run;
15554 +proc sort data =&outdata ;
15555 +     by Cluster RsquareRatio;
15556 +run;
15557 +data _tmprsq(drop=index);
15558 +     set &outdata; by Cluster;
15559 +     if first.Cluster then do;
15560 +     index = strip(scan(Cluster,2 ));
15561 +     Variable = "Clus"||index;
15562 +     VariableLabel = "Cluster Component "||index;
15563 +     OwnCluster = 1;
15564 +     NextClosest = .;
15565 +     RsquareRatio = 0;
15566 +     output;
15567 +     end;
15568 +run;
15569 +
15570 +proc sort data = _tmprsq ;
15571 +     by Cluster RsquareRatio;
15572 +run;
15573 +data &outdata;
15574 +     set &outdata _tmprsq;
15575 +by Cluster;
15576 +run;
15577 +
15578 +
15579 +/* Just create the Selected variable with all YES */
15580 +
15581 +data &outdata;
15582 +    set &outdata; by cluster;
15583 +    length Selected $8;
15584 +    Selected = 'YES';
15585 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15586 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15587 +    rename OwnCluster = RSqWithClusterComp;
15588 +    rename NextClosest = RSqWithNextClusComp;
15589 +run;
15590 +
15591 +
15592 +/* Selected = Y/N will be done %score section -----
15593 +
15594 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
15595 +data &outdata;
15596 +    set &outdata; by cluster;
15597 +    length Selected $8;
15598 +    if first.Cluster then Selected = 'YES';
15599 +    else Selected = 'NO';
15600 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15601 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15602 +    rename OwnCluster = RSqWithClusterComp;
15603 +    rename NextClosest = RSqWithNextClusComp;
15604 +run;
15605 +%end;
15606 +%else %do;
15607 +data &outdata;
15608 +    set &outdata; by cluster;
15609 +    if last.Cluster then Selected = 'YES';
15610 +    else Selected = 'NO';
15611 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15612 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15613 +    rename OwnCluster = RSqWithClusterComp;
15614 +    rename NextClosest = RSqWithNextClusComp;
15615 +run;
15616 +%end;
15617 +---------------------------------------------------------------*/
15618 +
15619 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
15620 +/* to calculate NextClosestClusRsq */
15621 +proc transpose data = &inClusRSquare  out=_clusRsq;
15622 +      by cluster;
15623 +      run;
15624 +data _clusRsq;
15625 +     set _clusRsq;
15626 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
15627 +run;
15628 +
15629 +proc sort data=_clusRsq;
15630 +    by cluster col1;
15631 +    run;
15632 +data _clusRsq(drop=_NAME_ _LABEL_);
15633 +     set _clusRsq; by cluster;
15634 +     if last.Cluster then output;
15635 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
15636 +     rename COL1 = RSqWithNextClusComp;
15637 +     rename Cluster = Variable;
15638 +     label  Cluster = "Variable";
15639 +run;
15640 +
15641 +proc sort data =&outdata;
15642 +     by Variable;
15643 +run;
15644 +data &outdata;
15645 +    merge &outdata _clusRsq;
15646 +    by Variable;
15647 +run;
15648 +proc sort data =&outdata;
15649 +by Cluster  RsquareRatio;
15650 +run;
15651 +quit;
15652 +%end;
15653 +
15654 +proc datasets lib = work nolist;
15655 +     delete _tmprsq _clusRsq;
15656 +     run;
15657 +quit;
15658 +
15659 +%mend MakeRSquareData;
15660 +
15661 +
15662 +/*-------------------------------------------------------------------------*/
15663 +
15664 +
15665 +
15666 +%macro ModifyCorr(indata=,
15667 +                  outdata=,
15668 +                  rsquare = Y
15669 +                  );
15670 +    data corr_tmp;
15671 +        set &indata;
15672 +    run;
15673 +     proc sql;
15674 +           update &indata
15675 +           set
15676 +     %let dsid = %sysfunc(open(work.corr_tmp));
15677 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
15678 +          %do i = 4 %to &nvar;
15679 +          %let _name = %sysfunc(varname(&dsid, &i));
15680 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
15681 +            %else  %let _name_md = &_name;
15682 +            %if &i < &nvar %then %do;
15683 +               &_name = 1- &_name_md ,
15684 +            %end;
15685 +            %else %do;
15686 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
15687 +            %end;
15688 +          %end;
15689 +      %let dsid= %sysfunc(close(&dsid));
15690 +
15691 +      select * from &indata;
15692 +      run;
15693 +      proc datasets lib = work nolist;
15694 +           delete corr_tmp;
15695 +      run;
15696 +      quit;
15697 +
15698 + %mend ModifyCorr;
15699 +
15700 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
15701 +    data &outdata(drop= _NCL_  _TYPE_);
15702 +       set &indata;
15703 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
15704 +       rename _NAME_ = Cluster;
15705 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15706 +    run;
15707 +    %if &RSquare eq Y %then %do;
15708 +     data corr_tmp;
15709 +        set &outdata;
15710 +     run;
15711 +
15712 +     data &outdata(drop=i);
15713 +          set &outdata;
15714 +          %let dsid = %sysfunc(open(work.corr_tmp));
15715 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15716 +          %do i = 2 %to &nvar;
15717 +            %let _name = %sysfunc(varname(&dsid, &i));
15718 +            %let _name_md = &_name.**2;
15719 +                &_name = &_name_md;
15720 +          %end;
15721 +      %let dsid= %sysfunc(close(&dsid));
15722 +      run;
15723 +      proc datasets lib = work nolist;
15724 +           delete corr_tmp;
15725 +      run;
15726 +
15727 +    %end;
15728 +     quit;
15729 +%mend MakeClusStructCorrData;
15730 +
15731 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
15732 +    data &outdata(drop= _NCL_  _TYPE_);
15733 +       set &indata;
15734 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15735 +       rename _NAME_ = Cluster;
15736 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15737 +    run;
15738 +    data corr_tmp;
15739 +        set &outdata;
15740 +    run;
15741 +
15742 +    %let dsid = %sysfunc(open(work.corr_tmp));
15743 +    %let nclus2= %eval(&ncluster+1);
15744 +    data &outdata;
15745 +         set &outdata;
15746 +          %do i = 2 %to &nclus2;
15747 +          %let i_1 = %eval(&i-1);
15748 +            %let _name = %sysfunc(varname(&dsid, &i));
15749 +            %let _newName = Clus&i_1;
15750 +                rename &_name = &_newName; ;
15751 +                *label &_name ="Cluster &i_1";
15752 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15753 +          %end;
15754 +          keep Cluster
15755 +          %do i = 2 %to &nclus2;
15756 +                %let _name = %sysfunc(varname(&dsid, &i));
15757 +                &_name
15758 +          %end;
15759 +          ;
15760 +    %let dsid= %sysfunc(close(&dsid));
15761 +     run;
15762 +     quit;
15763 +
15764 +    %if &RSquare eq Y %then %do;
15765 +
15766 +       data corr_tmp;
15767 +        set &outdata;
15768 +     run;
15769 +
15770 +     data &outdata(drop=i);
15771 +          set &outdata;
15772 +          %let dsid = %sysfunc(open(work.corr_tmp));
15773 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15774 +          %do i = 2 %to &nvar;
15775 +            %let _name = %sysfunc(varname(&dsid, &i));
15776 +            %let _name_md = &_name.**2;
15777 +                &_name = &_name_md;
15778 +          %end;
15779 +      %let dsid= %sysfunc(close(&dsid));
15780 +      run;
15781 +    %end;
15782 +
15783 +    %if &makeplotds eq Y %then %do;
15784 +     proc transpose data = &outdata
15785 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15786 +          by cluster;
15787 +     run;
15788 +     data &plotds;
15789 +          set  &plotds;
15790 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15791 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15792 +     run;
15793 +     %end;
15794 +     proc datasets lib = work nolist;
15795 +           delete corr_tmp;
15796 +     run;
15797 +     quit;
15798 +%mend MakeInterClusCorrData;
15799 +
15800 +
15801 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15802 +
15803 +data &outlink(drop = Selected);
15804 +     set &indata;
15805 +     LINKID = _N_;
15806 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15807 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15808 +run;
15809 +data &outnode(keep=NODEID TYPE LABEL);
15810 +    set &indata;
15811 +    length TYPE $16;
15812 +    rename Variable = NODEID;
15813 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15814 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15815 +    then  TYPE = "CLUSTER";
15816 +    else  TYPE="VARIABLE";
15817 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15818 +run;
15819 +quit;
15820 +%mend MakeClusConstellData;
15821 +
15822 +
15823 +
15824 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15825 +
15826 +data &outlink(drop = Selected);
15827 +     set &indata;
15828 +     LINKID = _N_;
15829 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15830 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15831 +run;
15832 +data &outnode(keep=NODEID TYPE LABEL);
15833 +    set &indata;
15834 +    length TYPE $16;
15835 +    rename Variable = NODEID;
15836 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15837 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15838 +    then  TYPE = "CLUSTER";
15839 +    else  TYPE="VARIABLE";
15840 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15841 +run;
15842 +quit;
15843 +%mend MakeClusConstellData;
15844 +
15845 +
15846 +/*--- This will work only when inds is not a view data -------
15847 +
15848 +%macro getNVarNObs(inds=, nvar=, nobs=);
15849 +
15850 +    %global &nvar;
15851 +    %global &nobs;
15852 +    data _null_;
15853 +         dsid = open("&inds");
15854 +         nv = attrn(dsid, 'NVAR');
15855 +         no = attrn(dsid, 'NOBS');
15856 +         dsid = close(dsid);
15857 +         call symput("&nvar", nv);
15858 +         call symput("&nobs", no);
15859 +    run;
15860 +    quit;
15861 +%mend  getNVarNObs;
15862 +
15863 ++---------------------------------------------------------------*/
15864 +
15865 +
15866 +%macro getNVar(inds=, nvar=);
15867 +    %global &nvar;
15868 +    data _null_;
15869 +         dsid = open("&inds");
15870 +         nv = attrn(dsid, 'NVAR');
15871 +         dsid = close(dsid);
15872 +         call symput("&nvar", nv);
15873 +    run;
15874 +    quit;
15875 +%mend  getNVar;
15876 +
15877 +
15878 +
15879 +%macro getNObs(inds=, nobs=);
15880 +    %global &nobs;
15881 +    data _null_;
15882 +        set &inds end=eof;
15883 +        if eof then call symput("&nobs", _N_);
15884 +    run;
15885 +    quit;
15886 +%mend  getNObs;
15887 +
15888 +%Macro CreateVarclusMeta(trainnum=);
15889 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
15890 +    data &EM_USER_VARCLUSMETA;
15891 +         length TrainNum 8.;
15892 +         length NewTrain $8;
15893 +         length NGCluster 8.;
15894 +         length ExportedComp $16;
15895 +         length HideVariable $8;
15896 +         TrainNum = &trainnum;
15897 +         NewTrain = "Y";
15898 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
15899 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
15900 +         NGCluster = 0; /* zero means no twostage */
15901 +   run;
15902 +   quit;
15903 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
15904 +
15905 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
15906 +    data &outdata(drop= _NCL_  _TYPE_);
15907 +       set &indata;
15908 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15909 +       %if &globalclusid ne %then %do;
15910 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
15911 +       rename _NAME_ = Cluster;
15912 +       %end;
15913 +       %else %do;
15914 +        _NAME_ = upcase(_NAME_);
15915 +       rename _NAME_ = Cluster;
15916 +       %end;
15917 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15918 +    run;
15919 +    data corr_tmp;
15920 +        set &outdata;
15921 +    run;
15922 +
15923 +    %let dsid = %sysfunc(open(work.corr_tmp));
15924 +    %let nclus2= %eval(&ncluster+1);
15925 +    data &outdata;
15926 +         set &outdata;
15927 +          %do i = 2 %to &nclus2;
15928 +          %let i_1 = %eval(&i-1);
15929 +            %let _name = %sysfunc(varname(&dsid, &i));
15930 +            %if &globalclusid ne %then
15931 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
15932 +                     rename &_name = &_newName;
15933 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
15934 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
15935 +                %end;
15936 +            %else
15937 +                %do; %let _newName = CLUS&i_1;
15938 +                     rename &_name = &_newName;
15939 +                     *label &_name ="Cluster &i_1";
15940 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15941 +                %end;
15942 +          %end;
15943 +          keep Cluster
15944 +          %do i = 2 %to &nclus2;
15945 +                %let _name = %sysfunc(varname(&dsid, &i));
15946 +                &_name
15947 +          %end;
15948 +          ;
15949 +    %let dsid= %sysfunc(close(&dsid));
15950 +     run;
15951 +     quit;
15952 +
15953 +    %if &RSquare eq Y %then %do;
15954 +
15955 +       data corr_tmp;
15956 +        set &outdata;
15957 +     run;
15958 +
15959 +     data &outdata;
15960 +          set &outdata;
15961 +          %let dsid = %sysfunc(open(work.corr_tmp));
15962 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15963 +          %do i = 2 %to &nvar;
15964 +            %let _name = %sysfunc(varname(&dsid, &i));
15965 +            %let _name_md = &_name.**2;
15966 +                &_name = &_name_md;
15967 +          %end;
15968 +      %let dsid= %sysfunc(close(&dsid));
15969 +      run;
15970 +    %end;
15971 +
15972 +    %if &makeplotds eq Y %then %do;
15973 +     proc transpose data = &outdata
15974 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15975 +          by cluster;
15976 +     run;
15977 +     data &plotds;
15978 +          set  &plotds;
15979 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15980 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15981 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15982 +     run;
15983 +     %end;
15984 +     proc datasets lib = work nolist;
15985 +           delete corr_tmp;
15986 +     run;
15987 +     quit;
15988 +%mend MakeInterClusCorrData;
15989 +
15990 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
15991 +    data _tmpds(drop= _NCL_);
15992 +       set &indata;
15993 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
15994 +       %if &globalclusid ne %then %do;
15995 +           _NAME_ = "GC&globalclusid.";
15996 +       rename _NAME_ = Cluster;
15997 +       %end;
15998 +       %else %do;
15999 +        _NAME_ = "CLUS";
16000 +        rename _NAME_ = Cluster;
16001 +       %end;
16002 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16003 +    run;
16004 +    proc transpose data =_tmpds out =&outdata;
16005 +    run;
16006 +
16007 +    data &outdata(drop=COL1);
16008 +        %if &globalclusid ne %then %do;
16009 +        length GCluster $16;
16010 +        %end;
16011 +        length Cluster $32;
16012 +        length _NAME_ $32;
16013 +         set &outdata;
16014 +         _NAME_ = upcase(_NAME_);
16015 +         rename _NAME_=Variable;
16016 +         *label _NAME_="Variable";
16017 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16018 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16019 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16020 +
16021 +         %if &globalclusid ne %then %do;
16022 +          GCluster = "GC&globalclusid";
16023 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
16024 +         %end;
16025 +         %else %do;
16026 +         Cluster = "CLUS"||strip(COL1);
16027 +        %end;
16028 +         rename COL2 = RSqWithOwnClusComp;
16029 +         *label COL2 = "R-Square With Own Cluster Component";
16030 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16031 +
16032 +   run;
16033 +   proc sort data =&outdata;
16034 +        by Cluster RSqWithOwnClusComp;
16035 +   run;
16036 +   proc datasets lib = work nolist;
16037 +           delete _tmpds;
16038 +   run;
16039 +   quit;
16040 +%mend MakeOwnRSquare;
16041 +
16042 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16043 +    data &outdata(drop= _NCL_  _TYPE_);
16044 +       %if &globalclusid ne %then %do;
16045 +        length GCluster $16;
16046 +        %end;
16047 +       set &indata;
16048 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16049 +       %if &globalclusid ne %then %do;
16050 +         GCluster = "GC&globalclusid";
16051 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16052 +         rename _NAME_ = Cluster;
16053 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16054 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16055 +
16056 +       %end;
16057 +       %else %do;
16058 +         _NAME_ = upcase(_NAME_);
16059 +         rename _NAME_ = Cluster;
16060 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16061 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16062 +
16063 +       %end;
16064 +     run;
16065 +    %if &RSquare eq Y %then %do;
16066 +     data corr_tmp;
16067 +          set &outdata;
16068 +     run;
16069 +     %let istart = 2;
16070 +     %if &globalclusid ne %then %let istart = 3;
16071 +     data &outdata;
16072 +          set &outdata;
16073 +          %let dsid = %sysfunc(open(work.corr_tmp));
16074 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16075 +          %do i =&istart %to &nvar;
16076 +            %let _name = %sysfunc(varname(&dsid, &i));
16077 +            %let _name_md = &_name.**2;
16078 +                &_name = &_name_md;
16079 +          %end;
16080 +      %let dsid= %sysfunc(close(&dsid));
16081 +      run;
16082 +      proc datasets lib = work nolist;
16083 +           delete corr_tmp;
16084 +      run;
16085 +    %end;
16086 +     quit;
16087 +%mend MakeClusStructCorrData;
16088 +
16089 +/*
16090 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16091 +*/
16092 +
16093 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16094 +
16095 +     /* The indata should be the outdata
16096 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16097 +
16098 +     proc sort data =&indata out=_tmpclusRsq;
16099 +     by cluster;
16100 +     run;
16101 +
16102 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16103 +      by cluster;
16104 +     run;
16105 +
16106 +     proc sort data=_tmpclusRsq;
16107 +        by _NAME_ COL1;
16108 +     run;
16109 +
16110 +     data _tmpclusRsq;
16111 +         length _NAME_ $32;
16112 +         set _tmpclusRsq; by _NAME_;
16113 +          _NAME_ = upcase(_NAME_);
16114 +          %if &ncluster ne 1 %then %do;
16115 +             if last._NAME_ then delete;
16116 +          %end;
16117 +          %else %do;
16118 +             COL1 = 0;
16119 +          %end;
16120 +     run;
16121 +     /* need to sort again */
16122 +     proc sort data=_tmpclusRsq;
16123 +        by _NAME_ COL1;
16124 +     run;
16125 +
16126 +     data &outdata;
16127 +         set _tmpclusRsq; by _NAME_;
16128 +         Cluster = upcase(Cluster);
16129 +         if last._NAME_ then output;
16130 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16131 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16132 +         rename COL1 = RSqWithNextClusComp;
16133 +         Cluster = upcase(Cluster);
16134 +         rename Cluster = ClosestCluster;
16135 +         *label  Cluster = "Next Closest Cluster";
16136 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16137 +         rename _NAME_ = Variable;
16138 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16139 +    run;
16140 +
16141 +
16142 +    %if &globalclusid ne %then %do;
16143 +    data &outdata;
16144 +       length GCluster $16;
16145 +       set &outdata;
16146 +       GCluster = "GC&globalclusid";
16147 +       run;
16148 +    %end;
16149 +    proc datasets lib = work nolist;
16150 +           delete _tmpclusRsq;
16151 +    run;
16152 +    quit;
16153 +%mend FindNextClosestClusByVar;
16154 +
16155 +
16156 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16157 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16158 +     proc sort data =&indata out=_tmpclusRsq;
16159 +     by cluster;
16160 +     run;
16161 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16162 +     by cluster;
16163 +     run;
16164 +     proc sort data=_tmpclusRsq;
16165 +        by _NAME_ col1;
16166 +     run;
16167 +     data _tmpclusRsq;
16168 +         length _NAME_ $32;
16169 +         set _tmpclusRsq; by _NAME_;
16170 +          _NAME_ = upcase(_NAME_);
16171 +          %if &ncluster ne 1 %then %do;
16172 +             if last._NAME_ then delete;
16173 +          %end;
16174 +          %else %do;
16175 +             COL1 = 0;
16176 +          %end;
16177 +     run;
16178 +     data &outdata;
16179 +         set _tmpclusRsq; by _NAME_;
16180 +         Cluster = upcase(Cluster);
16181 +         if last._NAME_ then output;
16182 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16183 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16184 +         rename COL1 = RSqWithNextClusComp;
16185 +         Cluster = upcase(Cluster);
16186 +         rename Cluster = ClosestCluster;
16187 +         *label  Cluster = "Next Closest Cluster";
16188 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16189 +         rename _NAME_ = Variable;
16190 +         *label  _NAME_ = "Variable";
16191 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16192 +
16193 +    run;
16194 +    %if &globalclusid ne %then %do;
16195 +    data &outdata;
16196 +       length GCluster $16;
16197 +       set &outdata;
16198 +       GCluster = "GC&globalclusid";
16199 +       run;
16200 +    %end;
16201 +
16202 +    proc datasets lib = work nolist;
16203 +           delete _tmpclusRsq;
16204 +    run;
16205 +
16206 +    quit;
16207 +%mend FindNextClosestClusByCluster;
16208 +
16209 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16210 +/*----
16211 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16212 +-----------*/
16213 +
16214 +proc sort data =&indata1;
16215 +    by Variable;
16216 +run;
16217 +proc sort data =&indata2;
16218 +    by Variable;
16219 +run;
16220 +data &outdata;
16221 +    merge &indata1 &indata2;
16222 +    by Variable;
16223 +    length Type $16;
16224 +    Type = 'Variable';
16225 +    *label Type ='Type';
16226 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16227 +run;
16228 +
16229 +
16230 +data &indata3;
16231 +    set  &indata3 ;
16232 +    length RSqWithOwnClusComp 8.;
16233 +    Cluster = Variable;
16234 +    RSqWithOwnClusComp = 1;
16235 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16236 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16237 +    length Type $16;
16238 +    Type = 'ClusterComp';
16239 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16240 +
16241 +;
16242 +run;
16243 +
16244 +proc sort data=&outdata;
16245 +    by Cluster;
16246 +run;
16247 +proc sort data =&indata3;
16248 +    by Cluster;
16249 +run;
16250 +
16251 +data &outdata;
16252 +     set &outdata &indata3;
16253 +     by Cluster;
16254 +run;
16255 +
16256 +
16257 +/* Create the Selected variable with all YES */
16258 +
16259 +data &outdata;
16260 +     set &outdata;
16261 +     length RsqRatio 8.;
16262 +     length Selected $8;
16263 +     *label RSqRatio = "1-R**2 Ratio";
16264 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16265 +     *label Selected = "Variable Selected";
16266 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16267 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16268 +     Selected ='YES';
16269 +     rename _LABEL_ = Label;
16270 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16271 +run;
16272 +
16273 +
16274 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16275 +        Just create the Selected variable with all YES at the step above
16276 + +------------------------------------------------------------------------------+
16277 +
16278 +proc sort data=&outdata;
16279 +    by Cluster RsqRatio;
16280 +run;
16281 +
16282 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16283 +data &outdata;
16284 +     set &outdata; by Cluster;
16285 +     length Selected $8;
16286 +     label Selected = "Variable Selected";
16287 +     if  first.Cluster then Selected ='Yes';
16288 +     else Selected = 'No';
16289 +    run;
16290 +%end;
16291 +%else %do;
16292 +data &outdata(drop = _var _varchange);
16293 +     set &outdata; retain _var 0; by Cluster;
16294 +     length Selected $8;
16295 +     label Selected = "Variable Selected";
16296 +     if first.Cluster then  _varchange = 0;
16297 +     else _varchange =1;
16298 +     if _var ne _varchange then  Selected  = 'Yes';
16299 +     else Selected = 'No';
16300 +     if last.cluster then  _var = 0;
16301 +     else _var = _varchange;
16302 +run;
16303 +%end;
16304 +
16305 +--------------------------------------------------------------*/
16306 +
16307 +quit;
16308 +%mend MakeVarClusResultTable;
16309 +
16310 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16311 +     proc sort data =&indata;
16312 +        by cluster;
16313 +     run;
16314 +     proc transpose data =&indata
16315 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16316 +          by cluster;
16317 +     run;
16318 +     data &outdata;
16319 +          set  &outdata;
16320 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16321 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16322 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16323 +     run;
16324 +     %if &globalclusid ne %then %do;
16325 +     data &outdata;
16326 +          Length GCluster $16;
16327 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16328 +          set  &outdata;
16329 +          GCluster ="GC&globalclusid.";
16330 +          run;
16331 +     %end;
16332 +
16333 +%Mend MakePlotDataFromCorrTable;
16334 +
16335 +
16336 +%macro MakeCorrelation(indata=,
16337 +                       outstat=_tmpoutstat,
16338 +                       corrmatrix=N,
16339 +                       outcorr=_tmpoutcorr,
16340 +                       includeclassvar=N,
16341 +                       target=,
16342 +                       freq=,
16343 +                       weight=);
16344 +   %if &target eq  %then %do;
16345 +
16346 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16347 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16348 +       %if &includeclassvar eq Y %then %do;
16349 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16350 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16351 +          %do i = 2 %to &nvar;
16352 +          %let varname = %sysfunc(varname(&dsid, &i));
16353 +          &varname
16354 +          %end;
16355 +       %end;
16356 +       ;
16357 +      %if &freq ne  %then %do;
16358 +          freq &freq;
16359 +      %end;
16360 +      %if &weight ne  %then %do;
16361 +          weight &weight;
16362 +      %end;
16363 +
16364 +      run;
16365 +      %if &corrmatrix eq Y %then %do;
16366 +      data  &outcorr (drop = _NCL_ _TYPE_);
16367 +           set  &outstat ;
16368 +           if _TYPE_ ='CORR' then output;
16369 +      run;
16370 +      %end;
16371 +    %end;
16372 +    %else %do;
16373 +       proc corr data=&indata outp=&outstat noprint;
16374 +            var
16375 +       %let dsid = %sysfunc(open(&indata));
16376 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16377 +          %do i = 1 %to &nvar;
16378 +              %let _name = %sysfunc(varname(&dsid, &i));
16379 +              %if &_name ne &target %then;
16380 +              &_name
16381 +           %end;
16382 +        %let dsid= %sysfunc(close(&dsid));
16383 +        ;
16384 +        with &target;
16385 +        run;
16386 +    %end;
16387 +    quit;
16388 +%mend MakeCorrelation;
16389 +
16390 +
16391 +%macro MakeCorrelationDistance(indata=,
16392 +                               outdata=,
16393 +                               rsquare = N
16394 +                               );
16395 +    data corr_tmp;
16396 +        set &indata;
16397 +        if _N_ = 1 then do;
16398 +           output;
16399 +           stop;
16400 +         end;
16401 +    run;
16402 +    %if &outdata ne  %then %let  _outdata = &outdata;
16403 +    %else %let _outdata = &indata;
16404 +
16405 +    data &_outdata;
16406 +         set &indata;
16407 +
16408 +         %let dsid = %sysfunc(open(work.corr_tmp));
16409 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16410 +          %do i = 2 %to &nvar;
16411 +              %let _name = %sysfunc(varname(&dsid, &i));
16412 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16413 +              %else  %let _name_md = &_name;
16414 +              &_name = 1- &_name_md;
16415 +          %end;
16416 +      %let dsid= %sysfunc(close(&dsid));
16417 +      run;
16418 +      proc datasets lib = work nolist;
16419 +           delete corr_tmp;
16420 +      run;
16421 +      quit;
16422 +  %mend MakeCorrelationDistance;
16423 +
16424 +
16425 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16426 +                                   rsquare = N
16427 +                                   );
16428 +    data corr_tmp;
16429 +        set &indata;
16430 +    run;
16431 +    proc sql noprint;
16432 +           update &indata
16433 +           set
16434 +     %let dsid = %sysfunc(open(work.corr_tmp));
16435 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16436 +          %do i = 4 %to &nvar;
16437 +          %let _name = %sysfunc(varname(&dsid, &i));
16438 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16439 +            %else  %let _name_md = &_name;
16440 +            %if &i < &nvar %then %do;
16441 +               &_name = 1- &_name_md ,
16442 +            %end;
16443 +            %else %do;
16444 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16445 +            %end;
16446 +          %end;
16447 +      %let dsid= %sysfunc(close(&dsid));
16448 +
16449 +      select * from &indata;
16450 +      run;
16451 +     data &indata( drop = _NCL_);
16452 +           set &indata;
16453 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16454 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16455 +     run;
16456 +     data &indata(DROP = _NCL_);
16457 +           set &indata;
16458 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16459 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16460 +           rename _NAME_ = _VAR_;
16461 +     run;
16462 +     proc datasets lib = work nolist;
16463 +           delete corr_tmp;
16464 +     run;
16465 +     quit;
16466 + %mend UpdateOutStatCorrToDistance;
16467 +
16468 +
16469 +%macro HierClusWithCorr(indata= ,
16470 +                        ncluster=,
16471 +                        method = Ward,
16472 +                        outtree = _outtree,
16473 +                        idvar =_VAR_,
16474 +                        outdata=,
16475 +                        rescore = N,
16476 +                        newncluster=
16477 +                        );
16478 +      %global &newncluster;
16479 +      %if &rescore ne Y %then %do;
16480 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16481 +                   method=&method outtree=&outtree noprint;
16482 +           id &idvar;
16483 +      run;
16484 +      %end;
16485 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16486 +      run;
16487 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
16488 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
16489 +      run;
16490 +      data _outcontent;
16491 +          set _outcontent;
16492 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
16493 +          index = 1;
16494 +          rename NAME = _NAME_;
16495 +      run;
16496 +      proc sort data=_outcontent;
16497 +          by _NAME_;
16498 +      run;
16499 +      proc sort data =&outdata;
16500 +           by _NAME_;
16501 +      run;
16502 +      data &outdata(drop=index);
16503 +          merge &outdata _outcontent;
16504 +          by _NAME_;
16505 +          if index = . then delete;
16506 +      run;
16507 +      /*-----------------------------------------------------------*/
16508 +      data &outdata;
16509 +           length CLUSNAME $16;
16510 +           set &outdata;
16511 +           if CLUSTER > &ncluster then delete;
16512 +           CLUSNAME='GC'||strip(CLUSTER);
16513 +           *label CLUSNAME = "Cluster Name";
16514 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
16515 +           rename _NAME_ = VARIABLE ;
16516 +           *label _NAME_ = "Variable";
16517 +           *label CLUSTER = "Cluster";
16518 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16519 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16520 +      run;
16521 +      proc sort data=&outdata out=&outdata;
16522 +           by CLUSTER;
16523 +      run;
16524 +      proc means data =&outdata noprint;
16525 +           output out=_meanout;
16526 +      run;
16527 +      data _null_;
16528 +            set _meanout;
16529 +            if strip(_STAT_) eq 'MAX' then do;
16530 +            call symput("&newncluster", CLUSTER);
16531 +            stop;
16532 +            end;
16533 +      run;
16534 +
16535 +      proc datasets lib = work nolist;
16536 +           delete _outcontent _meanout;
16537 +      run;
16538 +      quit;
16539 +%mend  HierClusWithCorr;
16540 +
16541 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
16542 +
16543 +     data _tmpindata;
16544 +          set &indata;
16545 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
16546 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16547 +          if _TYPE_ = 'STD' then _NAME_='STD';
16548 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
16549 +          DROP _TYPE_ _NCL_;
16550 +     run;
16551 +
16552 +     filename _file_  "&fileRef";
16553 +
16554 +     data _null_;
16555 +        FILE _file_ MOD;
16556 +        put ' ';
16557 +        put "/*-------------------------------------------------*/";
16558 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
16559 +        put "/*-------------------------------------------------*/";
16560 +        put ' ';
16561 +        %let dsid = %sysfunc(open(work._tmpindata));
16562 +
16563 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16564 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16565 +        %let k = 1;
16566 +        %do %while(^%sysfunc(fetch(&dsid)));
16567 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16568 +               %if &k > 2 %then %do;
16569 +                %let cn = %eval(&k-2);
16570 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
16571 +                %end;
16572 +                %let k = %eval(&k+1);
16573 +
16574 +        %end;
16575 +        %let rc = %sysfunc(rewind(&dsid));
16576 +
16577 +        %do j= 2 %to &nvar;
16578 +            %let _varname = %sysfunc(varname(&dsid, &j));
16579 +            %do %while(^%sysfunc(fetch(&dsid)));
16580 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16581 +                %if &_name = MEAN %then
16582 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
16583 +                %else %if &_name = STD %then
16584 +                %let _std = %sysfunc(getvarn(&dsid, &j));
16585 +                %else %do;
16586 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
16587 +                      %let abscoeff = %sysfunc(abs(&coeff));
16588 +                          %if &abscoeff >  0 %then %do;
16589 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16590 +                           %end;
16591 +                 %end;
16592 +             %end;
16593 +             %let rc = %sysfunc(rewind(&dsid));
16594 +         %end;
16595 +
16596 +        %let dsid= %sysfunc(close(&dsid));
16597 +
16598 +     run;
16599 +
16600 +     filename _file_;
16601 +     proc datasets lib = work nolist;
16602 +           delete _tmpindata;
16603 +     run;
16604 +     quit;
16605 +%mend CreateScoreCode2;
16606 +
16607 +
16608 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
16609 +
16610 +     /*--- Build Code to Modify Metadata ---*/
16611 +     filename X "&deltacodefile";
16612 +     data _null_;
16613 +        FILE X;
16614 +        set &groupds end=eof;
16615 +        if _N_=1 then do;
16616 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16617 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
16618 +           %end;
16619 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
16620 +           put "if upcase(strip(NAME)) in (";
16621 +        end;
16622 +        if Strip(upcase(Selected)) eq 'YES' then do;
16623 +           string = '"'!!trim(left(VARIABLE))!!'"';
16624 +           put string;
16625 +        end;
16626 +        if eof then do;
16627 +           put ') then ROLE="INPUT";';
16628 +           put 'else ROLE="REJECTED";';
16629 +           put 'end;';
16630 +
16631 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
16632 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
16633 +           %end;
16634 +        end;
16635 +     run;
16636 +     quit;
16637 +
16638 +     filename X;
16639 +     quit;
16640 +%mend MakeDeltaCode2;
16641 +
16642 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
16643 +  %global &ngc;
16644 +  data _null_;
16645 +  %if &indata ne %then %do;
16646 +      %let dsid = %sysfunc(open(&indata));
16647 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
16648 +      %let dsid = %sysfunc(close(&dsid));
16649 +  %end;
16650 +  %else %do;
16651 +       %let nvar = %eval(&ninput+&ndummy); ;
16652 +  %end;
16653 +  %let numgc = %eval(&nvar/&div+2);
16654 +  %let &ngc = &numgc;
16655 +   run;
16656 +  quit;
16657 +%mend getInitialGClusterNumber;
16658 +
16659 +
16660 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
16661 +data &outlink(drop = Selected);
16662 +     set &indata;
16663 +     LINKID = _N_;
16664 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
16665 +run;
16666 +data &outnode(keep=NODEID TYPE LABEL);
16667 +    set &indata;
16668 +    length TYPE $16;
16669 +    rename VARIABLE = NODEID;
16670 +    *label  CLUSNAME="Node ID";
16671 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16672 +    TYPE = "VARIABLE";
16673 +    *label TYPE = "Node Type";
16674 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16675 +    run;
16676 +data _tmp(keep=NODEID TYPE LABEL);
16677 +    set &indata;
16678 +    length TYPE $16;
16679 +    rename CLUSNAME = NODEID;
16680 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16681 +    TYPE = "GCLUSTER";
16682 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16683 +    run;
16684 +proc sort data=_tmp;
16685 +    by NODEID;
16686 +run;
16687 +data _tmp;
16688 +    set _tmp; by NODEID;
16689 +    if first.NODEID then output;
16690 +run;
16691 +proc sort data=&outnode;
16692 +    by NODEID;
16693 +run;
16694 +data  &outnode;
16695 +    set _tmp &outnode;
16696 +run;
16697 +proc datasets lib = work nolist;
16698 +     delete _tmp;
16699 +run;
16700 +quit;
16701 +%mend MakeGobalConstellData;
16702 +
16703 +/* Make contellation plot data among GCLUSTERS */
16704 +
16705 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
16706 +
16707 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
16708 +     set &indata;
16709 +     LINKID = _N_;
16710 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
16711 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
16712 +     end;
16713 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
16714 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
16715 +     end;
16716 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
16717 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
16718 +    end;
16719 +run;
16720 +
16721 +data _tmp_outrsquare;
16722 +        set &inoutrsq;
16723 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
16724 +run;
16725 +
16726 +proc freq data =_tmp_outrsquare noprint;
16727 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
16728 +run;
16729 +
16730 +data &outnode(keep=_NAME_ TYPE LABEL);
16731 +    set &outlink;
16732 +    length TYPE $16;
16733 +    length LABEL $100;
16734 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
16735 +
16736 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16737 +    TYPE = "GCLUSTER";
16738 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16739 +    end;
16740 +    else do;
16741 +    TYPE= "ROOT";
16742 +    LABEL= _NAME_;
16743 +    end;
16744 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16745 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16746 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16747 +    run;
16748 +
16749 +proc sort data=&outnode;
16750 +     by _NAME_;
16751 +proc sort data=_tmp_GCLUSFREQ;
16752 +     by _NAME_;
16753 +run;
16754 +
16755 +data  &outnode;
16756 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
16757 +     if COUNT=. then COUNT=1;
16758 +run;
16759 +
16760 +proc datasets lib = work nolist;
16761 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
16762 +run;
16763 +
16764 +quit;
16765 +%Mend MakeGClusterConstData;
16766 +
16767 +
16768 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
16769 +
16770 +    data _gscoretmpds;
16771 +          set &indata;
16772 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
16773 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16774 +          if _TYPE_ = 'STD' then _NAME_='STD';
16775 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
16776 +          DROP _TYPE_ _NCL_;
16777 +     run;
16778 +
16779 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
16780 +        GCluster Component &globalclusid ------ */
16781 +
16782 +    filename _file_  "&fileref";
16783 +
16784 +    data _null_;
16785 +        %if &globalclusid eq 1 %then %do;
16786 +          FILE _file_;
16787 +        %end;
16788 +        %else %do;
16789 +          FILE _file_ MOD;
16790 +        %end;
16791 +
16792 +        %let dsid = %sysfunc(open(work._gscoretmpds));
16793 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16794 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16795 +
16796 +        %let k = 1;
16797 +        %do %while(^%sysfunc(fetch(&dsid)));
16798 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16799 +                %if &k > 2 %then %do;
16800 +                put "&_name = 0 ; ";
16801 +                %end;
16802 +                %let k = %eval(&k+1);
16803 +        %end;
16804 +
16805 +        %let rc = %sysfunc(rewind(&dsid));
16806 +        %do i= 2 %to &nvar;
16807 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16808 +            %do %while(^%sysfunc(fetch(&dsid)));
16809 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16810 +                %if &_name = MEAN %then
16811 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16812 +                %else %if &_name = STD %then
16813 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16814 +                %else %do;
16815 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16816 +                      %let abscoeff = %sysfunc(abs(&coeff));
16817 +                          %if &abscoeff >  0 %then %do;
16818 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16819 +                           %end;
16820 +                 %end;
16821 +             %end;
16822 +             %let rc = %sysfunc(rewind(&dsid));
16823 +
16824 +         %end;
16825 +
16826 +        %let dsid= %sysfunc(close(&dsid));
16827 +       run;
16828 +
16829 +
16830 +       proc datasets lib=work nolist;
16831 +            delete _gscoretmpds;
16832 +       run;
16833 +      quit;
16834 +
16835 +%mend CreateGClusterScoreCode;
16836 +
16837 +
16838 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
16839 +
16840 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
16841 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
16842 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
16843 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
16844 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
16845 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
16846 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
16847 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
16848 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
16849 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
16850 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
16851 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
16852 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
16853 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
16854 +
16855 +   filename gsfile "&gscorecode";
16856 +
16857 +   data &EM_USER_GSCORE;
16858 +             set &indata;
16859 +             %include  gsfile;
16860 +        keep
16861 +        %do i=1 %to &ngcluster;
16862 +         %let gcvarname = GC&i;
16863 +         &gcvarname
16864 +        %end;
16865 +     ;
16866 +   run;
16867 +
16868 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
16869 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
16870 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
16871 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
16872 +    noprint  ;
16873 +     var
16874 +       %do i=1 %to &ngcluster;
16875 +         %let gcvarname = GC&i;
16876 +         &gcvarname
16877 +        %end;
16878 +   ;
16879 +   run;
16880 +
16881 +
16882 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
16883 +   data &EM_USER_GSCORECORRPLOT ;
16884 +        set &EM_USER_GSCORECORRPLOT;
16885 +        rename _X_ = X;
16886 +        rename _Y_ = Y;
16887 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16888 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16889 +   run;
16890 +
16891 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
16892 +
16893 +   data &EM_USER_GSCORETREE;
16894 +        length _NAME_ $32;
16895 +        length _LABEL_ $100;
16896 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
16897 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16898 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16899 +        end;else do;
16900 +         _LABEL_ = _NAME_;
16901 +        end;
16902 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16903 +
16904 +   run;
16905 +
16906 +   quit;
16907 +
16908 +%mend MakeGClusterCorrelation;
16909 +
16910 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
16911 +
16912 +
16913 +%macro train;
16914 +
16915 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
16916 +   %include temp;
16917 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
16918 +   %include temp;
16919 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
16920 +   %include temp;
16921 +   filename temp;
16922 +
16923 +   %let VARCLUS_MAXNUMOBS = 100000;
16924 +   %let VARCLUS_MAXNUMVAR = 200;
16925 +   %let trainnum = 0;
16926 +   %let error = 0;
16927 +
16928 +   %if &EM_IMPORT_DATA eq %then %do;
16929 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16930 +       %let  error = 1;
16931 +       %goto endtrain;
16932 +   %end;
16933 +
16934 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
16935 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16936 +        %let  error = 1;
16937 +        %goto endline;
16938 +    %end;
16939 +
16940 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
16941 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
16942 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
16943 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
16944 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
16945 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
16946 +
16947 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
16948 +        %if  &_num_input_total < 2 %then %do;
16949 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16950 +            %let error = 2;
16951 +            %goto endtrain;
16952 +        %end;
16953 +   %end;
16954 +   %else %do;
16955 +         %if  &_num_input_interval < 2 %then %do;
16956 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16957 +         %let error = 2;
16958 +         %goto endtrain;
16959 +         %end;
16960 +   %end;
16961 +
16962 +   %em_checkerror();
16963 +
16964 +   %if &EMEXCEPTIONSTRING ne %then %do;
16965 +       %goto endtrain;
16966 +   %end;
16967 +
16968 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
16969 +
16970 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
16971 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
16972 +                             outvar=&EM_USER_OUTDUMMY,
16973 +                             outdata=_newtrainds,
16974 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
16975 +
16976 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16977 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
16978 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16979 +                proc datasets lib=work nolist;
16980 +                delete  _newtrainds;
16981 +                run;
16982 +                quit;
16983 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16984 +                %let error = 3;
16985 +               %goto endtrain;
16986 +            %end;
16987 +        %end;
16988 +
16989 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16990 +             %getNVar(inds=_newtrainds, nvar=_nvar);
16991 +
16992 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
16993 +                %let trainnum = 2;
16994 +            %end;
16995 +            %else %do;
16996 +                %let trainnum = 1;
16997 +            %end;
16998 +        %end;
16999 +    %end;
17000 +    %else %do;
17001 +
17002 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17003 +
17004 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
17005 +
17006 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17007 +
17008 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17009 +                  %let error = 3;
17010 +                 %goto endtrain;
17011 +            %end;
17012 +        %end;
17013 +
17014 +
17015 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17016 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
17017 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
17018 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
17019 +                %let trainnum = 2;
17020 +            %end;
17021 +            %else %do;
17022 +                %let trainnum = 1;
17023 +            %end;
17024 +        %end;
17025 +
17026 +   %end;
17027 +
17028 +    %em_checkerror();
17029 +
17030 +    %if &EMEXCEPTIONSTRING ne %then %do;
17031 +       %let error = 4;
17032 +       %goto endtrain;
17033 +    %end;
17034 +
17035 +    %CreateVarclusMeta(trainnum=&trainnum);
17036 +
17037 +    %if &error > 0 %then  %goto endtrain;
17038 +
17039 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
17040 +
17041 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17042 +           %train1;
17043 +       %end;
17044 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17045 +           %train2;
17046 +       %end;
17047 +
17048 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17049 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17050 +      %em_copyfile(infref=_in, outfref=_out);
17051 +      filename _in;
17052 +      filename _out;
17053 +
17054 +
17055 +   %endtrain:
17056 +
17057 +
17058 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17060 +%macro VarClus(indata=,
17061 +               outstat=,
17062 +               outtree=,
17063 +               vars=,
17064 +               freq=,
17065 +               weight=,
17066 +               includeclassvar=
17067 +               );
17069 +   %if &vars eq %then
17070 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17072 +        /*Add by ruzhan, May 28, 2013*/
17073 +        ods graphics on;
17074 +        %let odspath =;
17075 +        data _null_;
17076 +            path = pathname('WORK');
17077 +            call symput('odspath', path);
17078 +        run;
17079 +        ods listing gpath="&odspath";
17080 +        ods output DENDROGRAM=&outtree;
17081 +       proc varclus data = &indata outstat= &outstat
17082 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17083 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17084 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17085 +        /*-----------------------
17086 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17087 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17088 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17089 +       %end;
17090 +       -------------------------*/
17091 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17092 +            maxc = &EM_PROPERTY_MAXCLUS
17093 +       %end;
17095 +       /*------------------------------------------------------------------------------------------------------
17096 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17097 +        ------------------------------------------------------------------------------------------------------*/
17099 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17100 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17101 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17102 +       %end;
17104 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17105 +            proportion = &EM_PROPERTY_PROPORTION
17106 +       %end;
17107 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17108 +               summary
17109 +       %end;
17111 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17112 +           short
17113 +       %end;
17114 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17115 +           corr trace simple
17116 +       %end;
17117 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17118 +          noprint
17119 +       %end;
17120 +        /*Comment out by ruzhan, May 28, 2013*/
17121 +       /*       outtree=&outtree*/
17122 +       ;
17123 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17125 +      %if &includeclassvar eq Y %then %do;
17126 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17127 +          %if &dsid > 0 %then %do;
17128 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17129 +              %do i = 2 %to &nvar;
17130 +                  %let varname = %sysfunc(varname(&dsid, &i));
17131 +                   &varname
17132 +              %end;
17134 +          %end;
17135 +      %end;
17137 +      ;
17138 +      /*------------------------
17139 +      %if &freq ne  %then %do;
17140 +          freq &freq;
17141 +      %end;
17142 +      %if &weight ne  %then %do;
17143 +          weight &weight;
17144 +      %end;
17145 +      ----------------------------*/
17146 +      %if %EM_FREQ ne %then %do;
17147 +           Freq %EM_FREQ;
17148 +      %end;
17149 +      ;
17150 +    run;
17151 +    ods graphics off;
17152 +    %endline:
17153 +    quit;
17154 +%mend VarClus;
17156 +%macro Train1;
17158 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17159 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17160 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17161 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17162 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17163 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17164 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17165 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17166 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17167 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17168 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17169 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17170 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17172 +   /*
17173 +     %let VARCLUS_MAXNUMOBS = 100;
17174 +     %let VARCLUS_MAXNUMVAR = 200;
17175 +   */
17177 +   /* Train
17179 +   %if &EM_IMPORT_DATA eq %then %do;
17180 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17181 +       %goto endtrain1;
17182 +   %end;
17184 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17185 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17186 +        %goto endtrain1;
17187 +   %end;
17188 +   */
17189 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17190 +       /* moved this to pretrain ------------
17192 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17193 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17194 +                             outvar=&EM_USER_OUTDUMMY,
17195 +                             outdata=_newtrainds,
17196 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17198 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17199 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17200 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17201 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17202 +                %goto endtrain;
17203 +            %end;
17204 +        %end;
17206 +        +-------------------------------------*/
17208 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17209 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17210 +          There is no _newtrainds */
17211 +         %VarClus( indata=&EM_IMPORT_DATA,
17212 +                  outstat=&EM_USER_OUTSTAT,
17213 +                  outtree = &EM_USER_OUTTREE,
17214 +                  includeclassvar=N
17215 +                 );
17216 +        %end;
17217 +        %else %do;
17218 +        %VarClus( indata=_newtrainds,
17219 +                  outstat=&EM_USER_OUTSTAT,
17220 +                  outtree = &EM_USER_OUTTREE,
17221 +                  includeclassvar=Y
17222 +                 );
17223 +         proc datasets lib=work nolist;
17224 +              delete  _newtrainds;
17225 +         run;
17226 +         %end;
17227 +    %end;
17228 +    %else %do;
17230 +        /*----- moved this to pretrain ------------
17231 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17232 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17233 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17234 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17235 +                 %goto endtrain;
17236 +            %end;
17237 +        %end;
17238 +        +-------------------------------------*/
17240 +        %VarClus(indata=&EM_IMPORT_DATA,
17241 +                  outstat=&EM_USER_OUTSTAT,
17242 +                  outtree =&EM_USER_OUTTREE,
17243 +                  includeclassvar=N
17244 +               );
17246 +   %end;
17248 +   %em_checkerror();
17250 +   %if &EMEXCEPTIONSTRING ne %then %do;
17251 +       %goto endtrain1;
17252 +   %end;
17253 +    /*
17254 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17255 +    */
17257 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17259 +    %let gid=;
17261 +    /*--- To make the main result table ----------------------*/
17263 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17264 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17265 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17266 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17267 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17268 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17270 +   /* Inter Cluster Correlation Plot ------------------------*/
17272 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17273 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17275 +   /* Create some other data sets for results ----*/
17277 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17278 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17279 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17281 +  /*---- move this to Score action ------------
17282 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17283 +   */
17285 +   /* create score code at training time */
17286 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17287 +   %endtrain1:
17288 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17291 +%macro VarClus2( indata=,
17292 +                 outdata=,
17293 +                 outstat =outstat,
17294 +                 outrsquare=outrsquare,
17295 +                 outtree = outtree,
17296 +                 outclusstruct = outclusstruct,
17297 +                 outcluscorr =outcluscorr,
17298 +                 outcluscorrplot =outcluscorrplot,
17299 +                 outclusrsquare =outclusrsquare,
17300 +                 outstatplot = outstatplot,
17301 +                 outcorr = outcorr,
17302 +                 outcorrplot = outcorrplot,
17303 +                 clusdata=,
17304 +                 outnode=outnode,
17305 +                 outlink=outlink,
17306 +                 ngroup =1  );
17307 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17308 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17309 +              %goto endline;
17310 +         %end;
17312 +        %global numglobalcluster;
17313 +        %let  numglobalcluster = &ngroup;
17314 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17315 +        %do vci =1 %to &ngroup;
17316 +           data tmp_clusdata;
17317 +                set &clusdata;
17318 +                if CLUSTER ne &vci then delete;
17319 +           run;
17320 +           %let outstatds = &outstat.&vci;
17321 +           %let outrsquareds = &outrsquare.&vci;
17322 +           %let outtreeds = &outtree.&vci;
17323 +           %let outclusstuctds = &outclusstruct.&vci;
17324 +           %let outcluscorrds = &outcluscorr.&vci;
17325 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17326 +           %let outclusrsquareds = &outclussquare.&vci;
17327 +           %let outstatplotds = &outstatplot.&vci;
17328 +           %let outcorrds = &outcorr.&vci;
17329 +           %let outcorrplotds = &outcorrplot.&vci;
17330 +           %let outnodeds = &outnode.&vci;
17331 +           %let outlinkds = &outlink.&vci;
17333 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17334 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17335 +           %let emuseroutstat = &EM_USER_&outstatds;
17337 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17338 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17339 +           %let emuserouttree = &EM_USER_&outtreeds;
17341 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17342 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17343 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17345 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17346 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17347 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17349 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17350 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17351 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17353 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17354 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17355 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17357 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17358 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17359 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17361 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17362 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17363 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17365 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17366 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17367 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17369 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17370 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17371 +           %let emuseroutnode = &EM_USER_&outnodeds;
17373 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17374 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17375 +           %let emuseroutlink = &EM_USER_&outlinkds;
17377 +           /*Add by ruzhan, May 28, 2013*/
17378 +           ods graphics on;
17379 +            %let odspath =;
17380 +            data _null_;
17381 +                path = pathname('WORK');
17382 +                call symput('odspath', path);
17383 +            run;
17384 +            ods listing gpath="&odspath";
17386 +           ods output DENDROGRAM=&emuserouttree;
17388 +           proc varclus data=&indata outstat=&emuseroutstat
17389 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17390 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17391 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17392 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17393 +                  maxc=&EM_PROPERTY_MAXCLUS
17394 +           %end;
17396 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17397 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17398 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17399 +            %end;
17401 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17402 +                proportion = &EM_PROPERTY_PROPORTION
17403 +           %end;
17404 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17405 +               summary
17406 +           %end;
17407 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17408 +               short
17409 +           %end;
17410 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17411 +               corr trace simple
17412 +           %end;
17413 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17414 +               noprint
17415 +           %end;
17416 +            /*Comment out by ruzhan, May 28, 2013*/
17417 +              /*outtree=&emuserouttree*/
17418 +           ;
17419 +           var
17420 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17421 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17422 +                %do %while(^%sysfunc(fetch(&dsid)));
17423 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17424 +                    &_varname
17425 +                %end;
17426 +            %let dsid = %sysfunc(close(&dsid));
17427 +           ;
17428 +           %if %EM_FREQ ne %then %do;
17429 +           Freq %EM_FREQ;
17430 +           %end;
17431 +           run;
17432 +            ods graphics off;
17433 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17435 +            %let gid=&vci;
17436 +            /*--- To make the main result table ----------------------*/
17437 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17438 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17439 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17440 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17441 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17442 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17444 +            /* Inter Cluster Correlation Plot ------------------------*/
17446 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17447 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17449 +           /* Create some other data sets for results ---------------*/
17451 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17452 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17453 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17455 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17457 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17459 +           %if &vci = 1 %then %do;
17460 +           data &EM_USER_OUTRSQUARE;
17461 +                set &emuseroutrsquare;
17462 +           run;
17463 +           %end;
17464 +           %else %do;
17465 +           data &EM_USER_OUTRSQUARE;
17466 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17467 +           run;
17468 +           %end;
17469 +           quit;
17470 +       %end;
17472 +       /*---- move this to Score action ------------
17473 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17474 +       */
17476 +       /* Make Score Gcluster component & correlation  */
17477 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
17479 +       quit;
17480 +       %endline:
17481 +%mend VarClus2;
17484 +%macro Train2;
17486 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17487 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17488 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17489 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17490 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17491 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17492 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17493 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17494 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17495 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17496 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17497 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
17498 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
17499 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
17500 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
17501 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
17502 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
17503 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
17507 +    /* Train */
17509 +   /* moved to pretrain ------------
17511 +   %if &EM_IMPORT_DATA eq %then %do;
17512 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17513 +       %goto endtrain2;
17514 +   %end;
17516 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17517 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17518 +        %goto endtrain2;
17519 +   %end;
17520 +   +-------------------------------------------*/
17522 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17525 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17527 +        /*----- moved to pretrain ------------
17529 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17530 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17531 +                             outvar=&EM_USER_OUTDUMMY,
17532 +                             outdata=_newtrainds,
17533 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
17534 +                              ndummyvars=_ndummyvars
17535 +                            );
17537 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17538 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17539 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17540 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17541 +                %goto endtrain;
17542 +            %end;
17543 +        %end;
17545 +        +---------------------------------------*/
17546 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17547 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17548 +          There is no _newtrainds */
17549 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
17550 +                             outstat=&EM_USER_GOUTSTAT,
17551 +                             corrmatrix=Y,
17552 +                             outcorr=&EM_USER_GOUTCORR,
17553 +                             includeclassvar=N,
17554 +                             freq =%EM_FREQ
17555 +                          );
17556 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17558 +        %end;
17559 +        %else %do;
17560 +         %MakeCorrelation(   indata=_newtrainds,
17561 +                             outstat=&EM_USER_GOUTSTAT,
17562 +                             corrmatrix=Y,
17563 +                             outcorr=&EM_USER_GOUTCORR,
17564 +                             includeclassvar=Y,
17565 +                             freq =%EM_FREQ
17566 +                          );
17567 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
17569 +        %end;
17571 +    %end;
17572 +    %else %do;
17574 +        /* moved to pretrain -------------------
17576 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17577 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17578 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17579 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17580 +                %goto endtrain;
17581 +            %end;
17582 +        %end;
17583 +         +------------------------------------------*/
17585 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
17586 +                          outstat=&EM_USER_GOUTSTAT,
17587 +                          corrmatrix=Y,
17588 +                          outcorr=&EM_USER_GOUTCORR,
17589 +                          includeclassvar=N,
17590 +                          freq =%EM_FREQ
17591 +                          );
17592 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17593 +    %end;
17595 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
17596 +                                rsquare = N
17597 +                                );
17598 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
17599 +                      ncluster=&_ngc,
17600 +                      method = Ward,
17601 +                      outtree =&EM_USER_GOUTTREE,
17602 +                      idvar = _VAR_,
17603 +                      outdata=&EM_USER_GOUTGROUP,
17604 +                      rescore = N,
17605 +                      newncluster=_newnclus
17606 +                        );
17608 +   /* store the number of global cluster */
17610 +   data &EM_USER_VARCLUSMETA;
17611 +        set &EM_USER_VARCLUSMETA;
17612 +        NGCluster = &_newnclus;
17613 +   run;
17615 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
17617 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17618 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17619 +            %VarClus2(indata=&EM_IMPORT_DATA,
17620 +                 clusdata=&EM_USER_GOUTGROUP,
17621 +                 ngroup=&_newnclus);
17622 +         %end;
17623 +         %else %do;
17624 +             %VarClus2(indata=_newtrainds,
17625 +                 clusdata=&EM_USER_GOUTGROUP,
17626 +                 ngroup=&_newnclus);
17628 +         %end;
17630 +   %end;
17631 +   %else %do;
17632 +       %VarClus2(indata=&EM_IMPORT_DATA,
17633 +                 clusdata=&EM_USER_GOUTGROUP,
17634 +                 ngroup=&_newnclus);
17635 +   %end;
17637 +   %em_checkerror();
17638 +   %if &EMEXCEPTIONSTRING ne %then %do;
17639 +       %put &em_codebar;
17640 +       %put Error: Variable clustering failed.;
17641 +       %put &em_codebar;
17642 +       %goto endtrain2;
17643 +   %end;
17644 +   /*
17645 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17646 +   */
17647 +   %endtrain2:
17648 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
17650 +%macro em_copyfile(infref=, outfref=, append=N);
17651 +
17652 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
17653 +
17654 +       %let omode =;
17655 +       %if &append=Y %then
17656 +           %let omode = MOD;
17657 +       data _null_;
17658 +          length line $20000;
17659 +          file &outfref &omode lrecl=20000;
17660 +          fid=fopen("&infref",'i',20000,'v');
17661 +          if fid > 0  then do;
17662 +             do while(^fread(fid));
17663 +                rlen = frlen(fid);
17664 +                rc= fget(fid,line,20000);
17665 +                start = length(line)-length(left(line))+1;
17666 +                line=strip(line);
17667 +                put @start line;
17668 +             end;
17669 +             if fid > 0  then rc=fclose(fid);
17670 +          end;
17671 +       run;
17672 +
17673 +   %end;
17674 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
17675  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK._DMDBDAT has 32235 observations and 4 variables.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.12 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: This is the PROC statement.
NOTE: The training set WORK._DMDBDAT.DATA has 4 variable(s).
NOTE: The PROC statement has finished with return code 0.
NOTE: This is the INPUT statement.
NOTE: 4 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code 0.
NOTE: This is the MAKE statement.
 
NOTE: 4 input variable(s).
NOTE: Number of cases=32235
NOTE: Sum of frequencies=32235
NOTE: Sum of weights=32235
NOTE: VARDEF=DF
NOTE: Maximum number of categories=4
NOTE: The total number of variables is 4 with dimensionality 10.
NOTE: The data set EMWS2.VARCLUS_OUTDUMMY has 3 observations and 11 variables.
NOTE: The MAKE statement has finished with return code 0.
NOTE: This is the SCORE statement.
NOTE: The data set WORK._NEWTRAINDS has 32235 observations and 109 variables.
NOTE: The SCORE statement has finished with return code 0.
NOTE: This is the CODE statement.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\VarClus\EMFLOWSCORE.sas opened.
NOTE: The CODE statement has finished with return code 0.
 
 
NOTE: PROCEDURE DMZIP used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The file WORK._DMDBCAT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._DMDBDAT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:94
NOTE: There were 32235 observations read from the data set WORK._NEWTRAINDS.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:153
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
17676  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set EMWS2.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS2.VARCLUS_OUTTREE has 162 observations and 3 variables.
NOTE: The data set EMWS2.VARCLUS_OUTSTAT has 2164 observations and 99 variables.
NOTE: The PROCEDURE VARCLUS printed pages 2-7.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           2.98 seconds
      cpu time            1.17 seconds
 
 
 
NOTE: Deleting WORK._NEWTRAINDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
17677  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 2164 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 2164 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORR has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORR has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORR has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 35 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1225 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1225 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1225 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1225 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1190 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1190 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 2164 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 98 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 2164 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSSTRUCT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSSTRUCT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 35 observations and 97 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3360 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3360 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3360 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3360 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3264 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3264 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3264 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 96 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: There were 96 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 96 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 96 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 131 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      48958:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      48958:84
NOTE: There were 2164 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 1225 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1225 observations read from the data set EMWS2.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCLUSCORRPLOT has 1225 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS2.VARCLUS_OUTSTATPLOT has 96 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS2.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTSTATPLOT has 96 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS2.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTSTATPLOT has 96 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS2.VARCLUS_OUTCORR has 96 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS2.VARCLUS_OUTCORR.
NOTE: The data set EMWS2.VARCLUS_OUTCORR has 96 observations and 97 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS2.VARCLUS_OUTCORR.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9216 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9216 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 9216 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 9216 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9216 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 9216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 9216 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9216 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS2.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS2.VARCLUS_OUTCORRPLOT has 9216 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTLINK has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTNODE has 131 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2164 observations read from the data set EMWS2.VARCLUS_OUTSTAT.
NOTE: The data set EMWS2.VARCLUS_OUTSTATSCORE has 37 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file _FILE_ is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2403,
      Last Modified=20Apr2017:02:48:08,
      Create Time=20Apr2017:02:48:08
 
NOTE: 136 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.40 seconds
      cpu time            0.37 seconds
 
 
 
NOTE: The file _OUT is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=20Apr2017:02:48:13,
      Create Time=20Apr2017:02:48:13
 
NOTE: 249 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
17678  *------------------------------------------------------------*;
17679  * End TRAIN: VarClus;
17680  *------------------------------------------------------------*;
17681
 
17682  *------------------------------------------------------------*;
17683  * Close any missing semi colons;
17684  *------------------------------------------------------------*;
17685  ;
17686  ;
17687  ;
17688  ;
17689  quit;
17690  *------------------------------------------------------------*;
17691  * Close any unbalanced quotes;
17692  *------------------------------------------------------------*;
17693  /*; *"; *'; */
17694  ;
17695  run;
17696  quit;
17697  /* Reset EM Options */
17698  options formchar="|----|+|---+=|-/\<>*";
17699  options nocenter ls=256 ps=10000;
17700  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                April 20, 2017
Time:                02:48:15
*------------------------------------------------------------*
17802  %let EMEXCEPTIONSTRING=;
17803  *------------------------------------------------------------*;
17804  * SCORE: VarClus;
17805  *------------------------------------------------------------*;
17806  %let EM_ACTION = SCORE;
17807  %let syscc = 0;
17808
17809  %macro main;
17810
17811     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
17812     %include temp;
17813     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
17814     %include temp;
17815     filename temp;
17816
17817    %SetProperties;
17818
17819     %if %upcase(&EM_ACTION) = CREATE %then %do;
17820         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
17821         %include temp;
17822         filename temp;
17823         %create;
17824     %end;
17825     %else
17826     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17827          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
17828             %include temp;
17829             filename temp;
17830             %train;
17831     %end;
17832     %else
17833     %if %upcase(&EM_ACTION) = SCORE %then %do;
17834             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
17835             %include temp;
17836             filename temp;
17837             %score;
17838     %end;
17839     %else
17840     %if %upcase(&EM_ACTION) = REPORT %then %do;
17841             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
17842             %include temp;
17843             filename temp;
17844             %report;
17845     %end;
17846     /*
17847     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
17848         %put 'OPENING TABLE';
17849     %end;
17850     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
17851         %put 'CLOSE TABLE';
17852     %end;
17853     */
17854  %mend main;
17855  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
17856 +
17857 +/* Initialize property macro variables */
17858 +%macro SetProperties;
17859 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
17860 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
17861 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
17862 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
17863 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
17864 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
17865 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
17866 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
17867 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
17868 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
17869 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
17870 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
17871 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
17872 +
17873 +%mend SetProperties;
17874 +
17875 +%Macro MakeDummyVariables(indata=,
17876 +                          outvar=,
17877 +                          outdata=,
17878 +                          fileref=,
17879 +                          recreatecmeta=N, /* optional */
17880 +                          incmeta=,     /* optional */
17881 +                          outcmeta=,    /* optional */
17882 +                          ndummyvars=_ndummyvars
17883 +                          );
17884 +    %global &ndummyvars;
17885 +
17886 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
17887 +       class
17888 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17889 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17890 +    ;
17891 +    run;
17892 +    %let &ndummyvars = 0;
17893 +    data _null_;
17894 +    %let dsid = %sysfunc(open(work._classout));
17895 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
17896 +    %let dsid = %sysfunc(close(&dsid));
17897 +    run;
17898 +
17899 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
17900 +       input
17901 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17902 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17903 +        / level=nominal stdize=no;
17904 +       make outvar = &outvar;
17905 +       score data = &indata out =&outdata;
17906 +       code  file=  "&fileref";
17907 +    run;
17908 +    %if &recreatecmeta eq Y %then %do;
17909 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
17910 +    data _tmpds;
17911 +        set _tmpds;
17912 +           ROLE = 'INPUT';
17913 +           LEVEL = 'INTERVAL';
17914 +           CREATOR='DMZIP';
17915 +           if NAME = '_TYPE_' then delete;
17916 +    run;
17917 +    data &outcmeta;
17918 +         set &incmeta _tmpds;
17919 +    run;
17920 +    %end;
17921 +    proc datasets lib=work nolist;
17922 +      delete  _dmdbdat _dmdbcat _classout
17923 +    %if &recreatecmeta eq Y %then %do;
17924 +    _tmpds
17925 +    %end;
17926 +    ;
17927 +    quit;
17928 +%Mend MakeDummyVariables;
17929 +
17930 +/*--- Determine Optimal Number of Cluster ----
17931 +%macro FindClusNum(statds=, groupds=, minvariation=);
17932 +   %global optnclus;
17933 +   data varclus_tmp(drop=_NAME_);
17934 +      set &statDs;
17935 +      where _type_ ='PROPOR';
17936 +   run;
17937 +   proc sort data=varclus_tmp;
17938 +      by _NCL_;
17939 +   run;
17940 +   proc transpose data=varclus_tmp out=varclus_tmp;
17941 +      by _NCL_;
17942 +      var %EM_INTERVAL_INPUT
17943 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17944 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17945 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
17946 +          %do i = 2 %to &nvar;
17947 +          %let varname = %sysfunc(varname(&dsid, &i));
17948 +          &varname
17949 +          %end;
17950 +      %end;
17951 +   ;
17952 +   run;
17953 +
17954 +   %if &minVariation eq %then %do;
17955 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
17956 +   %end;
17957 +   %if ^(0<&minVariation<100) %then %do;
17958 +       %let minVariation = 90;
17959 +   %end;
17960 +
17961 +   data _null_;
17962 +      set varclus_tmp end=eof;
17963 +      by _NCL_;
17964 +      retain flag 0;
17965 +      if first._ncl_ then flag=0;
17966 +      if .<col1 < &minVariation then flag=1;
17967 +      if last._ncl_ and ^flag then do;
17968 +         call symput('OPTNCL', _ncl_);
17969 +         stop;
17970 +      end;
17971 +     if eof then call symput('OPTNCL', _ncl_);
17972 +   run;
17973 +
17974 +   %let optnclus = &OPTNCL;
17975 +
17976 +   data varclus_tmp(drop=_NCL_ _NAME_);
17977 +      set &statDs;
17978 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
17979 +   run;
17980 +   proc sort data=varclus_tmp;
17981 +      by _TYPE_;
17982 +   run;
17983 +   proc transpose data=varclus_tmp out=varclus_tmp;
17984 +      by _TYPE_;
17985 +   run;
17986 +   proc sort data=varclus_tmp;
17987 +      by _name_ _type_;
17988 +   run;
17989 +
17990 +  proc transpose data=varclus_tmp out=&groupds;
17991 +      by _NAME_;
17992 +   run;
17993 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
17994 +      by Cluster descending Rsquare;
17995 +      where Cluster ne 0;
17996 +   run;
17997 +   proc datasets lib=work nolist mt=(DATA VIEW);
17998 +      delete varclus_tmp;
17999 +   run;
18000 +   quit;
18001 +%mend findClusNum;
18002 +*/
18003 +
18004 +%macro getNclusfromTrain(inoutstat=, nc=);
18005 +%global &nc;
18006 +data _null_;
18007 +    set &inoutstat end=eof;
18008 +    if eof then do;
18009 +    call symput("&nc", _ncl_);
18010 +    end;
18011 +run;
18012 +%mend  getNclusfromTrain;
18013 +
18014 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
18015 +
18016 +     *--- Build Code to Modify Metadata ---*;
18017 +     filename X "&deltacodefile";
18018 +     data _null_;
18019 +        FILE X;
18020 +        set &groupds end=eof;
18021 +        /*by Cluster;*/
18022 +         if _N_=1 then do;
18023 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18024 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18025 +           %end;
18026 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18027 +           put "if upcase(strip(NAME)) in (";
18028 +        end;
18029 +        if Strip(upcase(Selected)) eq 'YES' then do;
18030 +           string = '"'!!trim(left(VARIABLE))!!'"';
18031 +           put string;
18032 +        end;
18033 +        if eof then do;
18034 +           put ') then ROLE="INPUT";';
18035 +           put 'else ROLE="REJECTED";';
18036 +           put 'end;';
18037 +
18038 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18039 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18040 +           %end;
18041 +        end;
18042 +     run;
18043 +     quit;
18044 +
18045 +     filename X;
18046 +
18047 +     quit;
18048 +%mend MakeDeltaCode;
18049 +
18050 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18051 +    %if ^%sysfunc(exist(&statds)) %then %do;
18052 +         %goto doendc;
18053 +    %end;
18054 +
18055 +    data &corrds(drop=_TYPE_ _NCL_) ;
18056 +       set &statds;
18057 +       where _type_ eq 'CORR' ;
18058 +    run ;
18059 +    proc sort data=&corrds;
18060 +       by _NAME_ ;
18061 +    run ;
18062 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18063 +      BY _NAME_ ;
18064 +    run ;
18065 +    data &corrplotds;
18066 +       length _Y_ $100;
18067 +       set &corrplotDs;
18068 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18069 +    run ;
18070 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18071 +       set &corrplotds;
18072 +       where _LABEL_ ne '' ;
18073 +       keep _TMP_ _LABEL_ ;
18074 +    run ;
18075 +    data _null_;
18076 +       nobs=0;
18077 +       dsid = open('varclus_match');
18078 +       if dsid then do;
18079 +          nobs = attrn(dsid, 'NOBS');
18080 +          dsid = close(dsid);
18081 +       end;
18082 +       call symput ('CORR_NOBS', nobs);
18083 +    run;
18084 +    %if &corr_nobs %then %do;
18085 +        proc sort data=varclus_match;
18086 +           by _name_;
18087 +        run ;
18088 +        proc sort data=&corrplotds;
18089 +           by _name_;
18090 +        run ;
18091 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18092 +           merge varclus_match &corrplotds;
18093 +           by _NAME_ ;
18094 +           if _X_ eq '' then _X_=_NAME_ ;
18095 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18096 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18097 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18098 +
18099 +       run ;
18100 +    %end;
18101 +    %else %do;
18102 +        proc sort data=&corrplotds;
18103 +           by _name_;
18104 +        run ;
18105 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18106 +           set &corrplotds;
18107 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18108 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18109 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18110 +
18111 +        run ;
18112 +    %end;
18113 +    proc sort data=&corrplotds;
18114 +       by _X_ _Y_;
18115 +    run ;
18116 +    proc datasets lib=work nolist mt=(DATA VIEW);
18117 +       delete varclus_match;
18118 +    run;
18119 +    quit;
18120 +
18121 +%doendc:
18122 +
18123 +%mend MakeVarClusCorrData;
18124 +
18125 +%macro MakeStatPlotData(statds= , outstatplotds=);
18126 +   %if %sysfunc(exist(&statds)) %then %do;
18127 +
18128 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18129 +          set &statDs;
18130 +          where _type_ in('MEAN', 'STD', 'N');
18131 +       run ;
18132 +       proc transpose data=varclus_tmp out=&outstatplotds;
18133 +          id _TYPE_ ;
18134 +       run ;
18135 +       data &outstatplotds;
18136 +          set &outstatplotds(obs=1000);
18137 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18138 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18139 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18140 +          else SCALEDSTD= STD ;
18141 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18142 +       run ;
18143 +       proc sort data=&outstatplotds;
18144 +          by descending SCALEDSTD ;
18145 +       run ;
18146 +       proc datasets lib=work nolist mt=(DATA VIEW);
18147 +          delete varclus_tmp;
18148 +       run;
18149 +       quit;
18150 +    %end;
18151 +
18152 +%mend MakeStatPlotData;
18153 +
18154 +
18155 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18156 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18157 +    data &EM_USER_OUTSTATSCORE;
18158 +          set &indata;
18159 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18160 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18161 +          if _TYPE_ = 'STD' then _NAME_='STD';
18162 +          DROP _TYPE_ _NCL_;
18163 +     run;
18164 +
18165 +     filename _file_  "&fileRef";
18166 +
18167 +     data _null_;
18168 +        FILE _file_ MOD;
18169 +        put ' ';
18170 +        put '/*-------------------------------------------------*/';
18171 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18172 +        put '/*-------------------------------------------------*/';
18173 +        put ' ';
18174 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18175 +
18176 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18177 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18178 +
18179 +        %let k = 1;
18180 +        %do %while(^%sysfunc(fetch(&dsid)));
18181 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18182 +                %if &k > 2 %then %do;
18183 +                 %let cn = %eval(&k-2);
18184 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18185 +                %end;
18186 +                %let k = %eval(&k+1);
18187 +        %end;
18188 +
18189 +        %let rc = %sysfunc(rewind(&dsid));
18190 +
18191 +        %do i= 2 %to &nvar;
18192 +            %let _varname =  %sysfunc(varname(&dsid, &i));
18193 +            %do %while(^%sysfunc(fetch(&dsid)));
18194 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18195 +                %if &_name = MEAN %then
18196 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18197 +                %else %if &_name = STD %then
18198 +                %let _std = %sysfunc(getvarn(&dsid, &i));
18199 +                %else %do;
18200 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18201 +                      %let abscoeff = %sysfunc(abs(&coeff));
18202 +                          %if &abscoeff >  0 %then %do;
18203 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18204 +                           %end;
18205 +                 %end;
18206 +             %end;
18207 +             %let rc = %sysfunc(rewind(&dsid));
18208 +         %end;
18209 +
18210 +        %let dsid= %sysfunc(close(&dsid));
18211 +       run;
18212 +%mend CreateScoreCode;
18213 +
18214 +
18215 +
18216 +/*----------------------------------------------------------
18217 +    Instead of using %MakeRSquareData,
18218 +    %MakeVarClusResultTable at macro2.source is used
18219 + +----------------------------------------------------------*/
18220 +
18221 +
18222 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18223 +
18224 +/* modifying  from ods rsquare = data */
18225 +
18226 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18227 +    Length Cluster $16;
18228 +    length Variable $32;
18229 +    Length VariableLabel $64;
18230 +    set &indata; retain CurrentCluster;
18231 +    if NumberOfClusters ^= &ncluster then delete;
18232 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18233 +    CurrentCluster = Cluster;
18234 +   run;
18235 +proc sort data =&outdata ;
18236 +     by Cluster RsquareRatio;
18237 +run;
18238 +data _tmprsq(drop=index);
18239 +     set &outdata; by Cluster;
18240 +     if first.Cluster then do;
18241 +     index = strip(scan(Cluster,2 ));
18242 +     Variable = "Clus"||index;
18243 +     VariableLabel = "Cluster Component "||index;
18244 +     OwnCluster = 1;
18245 +     NextClosest = .;
18246 +     RsquareRatio = 0;
18247 +     output;
18248 +     end;
18249 +run;
18250 +
18251 +proc sort data = _tmprsq ;
18252 +     by Cluster RsquareRatio;
18253 +run;
18254 +data &outdata;
18255 +     set &outdata _tmprsq;
18256 +by Cluster;
18257 +run;
18258 +
18259 +
18260 +/* Just create the Selected variable with all YES */
18261 +
18262 +data &outdata;
18263 +    set &outdata; by cluster;
18264 +    length Selected $8;
18265 +    Selected = 'YES';
18266 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18267 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18268 +    rename OwnCluster = RSqWithClusterComp;
18269 +    rename NextClosest = RSqWithNextClusComp;
18270 +run;
18271 +
18272 +
18273 +/* Selected = Y/N will be done %score section -----
18274 +
18275 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18276 +data &outdata;
18277 +    set &outdata; by cluster;
18278 +    length Selected $8;
18279 +    if first.Cluster then Selected = 'YES';
18280 +    else Selected = 'NO';
18281 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18282 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18283 +    rename OwnCluster = RSqWithClusterComp;
18284 +    rename NextClosest = RSqWithNextClusComp;
18285 +run;
18286 +%end;
18287 +%else %do;
18288 +data &outdata;
18289 +    set &outdata; by cluster;
18290 +    if last.Cluster then Selected = 'YES';
18291 +    else Selected = 'NO';
18292 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18293 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18294 +    rename OwnCluster = RSqWithClusterComp;
18295 +    rename NextClosest = RSqWithNextClusComp;
18296 +run;
18297 +%end;
18298 +---------------------------------------------------------------*/
18299 +
18300 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18301 +/* to calculate NextClosestClusRsq */
18302 +proc transpose data = &inClusRSquare  out=_clusRsq;
18303 +      by cluster;
18304 +      run;
18305 +data _clusRsq;
18306 +     set _clusRsq;
18307 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18308 +run;
18309 +
18310 +proc sort data=_clusRsq;
18311 +    by cluster col1;
18312 +    run;
18313 +data _clusRsq(drop=_NAME_ _LABEL_);
18314 +     set _clusRsq; by cluster;
18315 +     if last.Cluster then output;
18316 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18317 +     rename COL1 = RSqWithNextClusComp;
18318 +     rename Cluster = Variable;
18319 +     label  Cluster = "Variable";
18320 +run;
18321 +
18322 +proc sort data =&outdata;
18323 +     by Variable;
18324 +run;
18325 +data &outdata;
18326 +    merge &outdata _clusRsq;
18327 +    by Variable;
18328 +run;
18329 +proc sort data =&outdata;
18330 +by Cluster  RsquareRatio;
18331 +run;
18332 +quit;
18333 +%end;
18334 +
18335 +proc datasets lib = work nolist;
18336 +     delete _tmprsq _clusRsq;
18337 +     run;
18338 +quit;
18339 +
18340 +%mend MakeRSquareData;
18341 +
18342 +
18343 +/*-------------------------------------------------------------------------*/
18344 +
18345 +
18346 +
18347 +%macro ModifyCorr(indata=,
18348 +                  outdata=,
18349 +                  rsquare = Y
18350 +                  );
18351 +    data corr_tmp;
18352 +        set &indata;
18353 +    run;
18354 +     proc sql;
18355 +           update &indata
18356 +           set
18357 +     %let dsid = %sysfunc(open(work.corr_tmp));
18358 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18359 +          %do i = 4 %to &nvar;
18360 +          %let _name = %sysfunc(varname(&dsid, &i));
18361 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18362 +            %else  %let _name_md = &_name;
18363 +            %if &i < &nvar %then %do;
18364 +               &_name = 1- &_name_md ,
18365 +            %end;
18366 +            %else %do;
18367 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18368 +            %end;
18369 +          %end;
18370 +      %let dsid= %sysfunc(close(&dsid));
18371 +
18372 +      select * from &indata;
18373 +      run;
18374 +      proc datasets lib = work nolist;
18375 +           delete corr_tmp;
18376 +      run;
18377 +      quit;
18378 +
18379 + %mend ModifyCorr;
18380 +
18381 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18382 +    data &outdata(drop= _NCL_  _TYPE_);
18383 +       set &indata;
18384 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18385 +       rename _NAME_ = Cluster;
18386 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18387 +    run;
18388 +    %if &RSquare eq Y %then %do;
18389 +     data corr_tmp;
18390 +        set &outdata;
18391 +     run;
18392 +
18393 +     data &outdata(drop=i);
18394 +          set &outdata;
18395 +          %let dsid = %sysfunc(open(work.corr_tmp));
18396 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18397 +          %do i = 2 %to &nvar;
18398 +            %let _name = %sysfunc(varname(&dsid, &i));
18399 +            %let _name_md = &_name.**2;
18400 +                &_name = &_name_md;
18401 +          %end;
18402 +      %let dsid= %sysfunc(close(&dsid));
18403 +      run;
18404 +      proc datasets lib = work nolist;
18405 +           delete corr_tmp;
18406 +      run;
18407 +
18408 +    %end;
18409 +     quit;
18410 +%mend MakeClusStructCorrData;
18411 +
18412 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18413 +    data &outdata(drop= _NCL_  _TYPE_);
18414 +       set &indata;
18415 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18416 +       rename _NAME_ = Cluster;
18417 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18418 +    run;
18419 +    data corr_tmp;
18420 +        set &outdata;
18421 +    run;
18422 +
18423 +    %let dsid = %sysfunc(open(work.corr_tmp));
18424 +    %let nclus2= %eval(&ncluster+1);
18425 +    data &outdata;
18426 +         set &outdata;
18427 +          %do i = 2 %to &nclus2;
18428 +          %let i_1 = %eval(&i-1);
18429 +            %let _name = %sysfunc(varname(&dsid, &i));
18430 +            %let _newName = Clus&i_1;
18431 +                rename &_name = &_newName; ;
18432 +                *label &_name ="Cluster &i_1";
18433 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18434 +          %end;
18435 +          keep Cluster
18436 +          %do i = 2 %to &nclus2;
18437 +                %let _name = %sysfunc(varname(&dsid, &i));
18438 +                &_name
18439 +          %end;
18440 +          ;
18441 +    %let dsid= %sysfunc(close(&dsid));
18442 +     run;
18443 +     quit;
18444 +
18445 +    %if &RSquare eq Y %then %do;
18446 +
18447 +       data corr_tmp;
18448 +        set &outdata;
18449 +     run;
18450 +
18451 +     data &outdata(drop=i);
18452 +          set &outdata;
18453 +          %let dsid = %sysfunc(open(work.corr_tmp));
18454 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18455 +          %do i = 2 %to &nvar;
18456 +            %let _name = %sysfunc(varname(&dsid, &i));
18457 +            %let _name_md = &_name.**2;
18458 +                &_name = &_name_md;
18459 +          %end;
18460 +      %let dsid= %sysfunc(close(&dsid));
18461 +      run;
18462 +    %end;
18463 +
18464 +    %if &makeplotds eq Y %then %do;
18465 +     proc transpose data = &outdata
18466 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18467 +          by cluster;
18468 +     run;
18469 +     data &plotds;
18470 +          set  &plotds;
18471 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18472 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18473 +     run;
18474 +     %end;
18475 +     proc datasets lib = work nolist;
18476 +           delete corr_tmp;
18477 +     run;
18478 +     quit;
18479 +%mend MakeInterClusCorrData;
18480 +
18481 +
18482 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18483 +
18484 +data &outlink(drop = Selected);
18485 +     set &indata;
18486 +     LINKID = _N_;
18487 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18488 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18489 +run;
18490 +data &outnode(keep=NODEID TYPE LABEL);
18491 +    set &indata;
18492 +    length TYPE $16;
18493 +    rename Variable = NODEID;
18494 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18495 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18496 +    then  TYPE = "CLUSTER";
18497 +    else  TYPE="VARIABLE";
18498 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18499 +run;
18500 +quit;
18501 +%mend MakeClusConstellData;
18502 +
18503 +
18504 +
18505 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18506 +
18507 +data &outlink(drop = Selected);
18508 +     set &indata;
18509 +     LINKID = _N_;
18510 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18511 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18512 +run;
18513 +data &outnode(keep=NODEID TYPE LABEL);
18514 +    set &indata;
18515 +    length TYPE $16;
18516 +    rename Variable = NODEID;
18517 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18518 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18519 +    then  TYPE = "CLUSTER";
18520 +    else  TYPE="VARIABLE";
18521 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18522 +run;
18523 +quit;
18524 +%mend MakeClusConstellData;
18525 +
18526 +
18527 +/*--- This will work only when inds is not a view data -------
18528 +
18529 +%macro getNVarNObs(inds=, nvar=, nobs=);
18530 +
18531 +    %global &nvar;
18532 +    %global &nobs;
18533 +    data _null_;
18534 +         dsid = open("&inds");
18535 +         nv = attrn(dsid, 'NVAR');
18536 +         no = attrn(dsid, 'NOBS');
18537 +         dsid = close(dsid);
18538 +         call symput("&nvar", nv);
18539 +         call symput("&nobs", no);
18540 +    run;
18541 +    quit;
18542 +%mend  getNVarNObs;
18543 +
18544 ++---------------------------------------------------------------*/
18545 +
18546 +
18547 +%macro getNVar(inds=, nvar=);
18548 +    %global &nvar;
18549 +    data _null_;
18550 +         dsid = open("&inds");
18551 +         nv = attrn(dsid, 'NVAR');
18552 +         dsid = close(dsid);
18553 +         call symput("&nvar", nv);
18554 +    run;
18555 +    quit;
18556 +%mend  getNVar;
18557 +
18558 +
18559 +
18560 +%macro getNObs(inds=, nobs=);
18561 +    %global &nobs;
18562 +    data _null_;
18563 +        set &inds end=eof;
18564 +        if eof then call symput("&nobs", _N_);
18565 +    run;
18566 +    quit;
18567 +%mend  getNObs;
18568 +
18569 +%Macro CreateVarclusMeta(trainnum=);
18570 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18571 +    data &EM_USER_VARCLUSMETA;
18572 +         length TrainNum 8.;
18573 +         length NewTrain $8;
18574 +         length NGCluster 8.;
18575 +         length ExportedComp $16;
18576 +         length HideVariable $8;
18577 +         TrainNum = &trainnum;
18578 +         NewTrain = "Y";
18579 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18580 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18581 +         NGCluster = 0; /* zero means no twostage */
18582 +   run;
18583 +   quit;
18584 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18585 +
18586 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18587 +    data &outdata(drop= _NCL_  _TYPE_);
18588 +       set &indata;
18589 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18590 +       %if &globalclusid ne %then %do;
18591 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18592 +       rename _NAME_ = Cluster;
18593 +       %end;
18594 +       %else %do;
18595 +        _NAME_ = upcase(_NAME_);
18596 +       rename _NAME_ = Cluster;
18597 +       %end;
18598 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18599 +    run;
18600 +    data corr_tmp;
18601 +        set &outdata;
18602 +    run;
18603 +
18604 +    %let dsid = %sysfunc(open(work.corr_tmp));
18605 +    %let nclus2= %eval(&ncluster+1);
18606 +    data &outdata;
18607 +         set &outdata;
18608 +          %do i = 2 %to &nclus2;
18609 +          %let i_1 = %eval(&i-1);
18610 +            %let _name = %sysfunc(varname(&dsid, &i));
18611 +            %if &globalclusid ne %then
18612 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18613 +                     rename &_name = &_newName;
18614 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18615 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18616 +                %end;
18617 +            %else
18618 +                %do; %let _newName = CLUS&i_1;
18619 +                     rename &_name = &_newName;
18620 +                     *label &_name ="Cluster &i_1";
18621 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18622 +                %end;
18623 +          %end;
18624 +          keep Cluster
18625 +          %do i = 2 %to &nclus2;
18626 +                %let _name = %sysfunc(varname(&dsid, &i));
18627 +                &_name
18628 +          %end;
18629 +          ;
18630 +    %let dsid= %sysfunc(close(&dsid));
18631 +     run;
18632 +     quit;
18633 +
18634 +    %if &RSquare eq Y %then %do;
18635 +
18636 +       data corr_tmp;
18637 +        set &outdata;
18638 +     run;
18639 +
18640 +     data &outdata;
18641 +          set &outdata;
18642 +          %let dsid = %sysfunc(open(work.corr_tmp));
18643 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18644 +          %do i = 2 %to &nvar;
18645 +            %let _name = %sysfunc(varname(&dsid, &i));
18646 +            %let _name_md = &_name.**2;
18647 +                &_name = &_name_md;
18648 +          %end;
18649 +      %let dsid= %sysfunc(close(&dsid));
18650 +      run;
18651 +    %end;
18652 +
18653 +    %if &makeplotds eq Y %then %do;
18654 +     proc transpose data = &outdata
18655 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18656 +          by cluster;
18657 +     run;
18658 +     data &plotds;
18659 +          set  &plotds;
18660 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18661 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18662 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18663 +     run;
18664 +     %end;
18665 +     proc datasets lib = work nolist;
18666 +           delete corr_tmp;
18667 +     run;
18668 +     quit;
18669 +%mend MakeInterClusCorrData;
18670 +
18671 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
18672 +    data _tmpds(drop= _NCL_);
18673 +       set &indata;
18674 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
18675 +       %if &globalclusid ne %then %do;
18676 +           _NAME_ = "GC&globalclusid.";
18677 +       rename _NAME_ = Cluster;
18678 +       %end;
18679 +       %else %do;
18680 +        _NAME_ = "CLUS";
18681 +        rename _NAME_ = Cluster;
18682 +       %end;
18683 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18684 +    run;
18685 +    proc transpose data =_tmpds out =&outdata;
18686 +    run;
18687 +
18688 +    data &outdata(drop=COL1);
18689 +        %if &globalclusid ne %then %do;
18690 +        length GCluster $16;
18691 +        %end;
18692 +        length Cluster $32;
18693 +        length _NAME_ $32;
18694 +         set &outdata;
18695 +         _NAME_ = upcase(_NAME_);
18696 +         rename _NAME_=Variable;
18697 +         *label _NAME_="Variable";
18698 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18699 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18700 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18701 +
18702 +         %if &globalclusid ne %then %do;
18703 +          GCluster = "GC&globalclusid";
18704 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
18705 +         %end;
18706 +         %else %do;
18707 +         Cluster = "CLUS"||strip(COL1);
18708 +        %end;
18709 +         rename COL2 = RSqWithOwnClusComp;
18710 +         *label COL2 = "R-Square With Own Cluster Component";
18711 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18712 +
18713 +   run;
18714 +   proc sort data =&outdata;
18715 +        by Cluster RSqWithOwnClusComp;
18716 +   run;
18717 +   proc datasets lib = work nolist;
18718 +           delete _tmpds;
18719 +   run;
18720 +   quit;
18721 +%mend MakeOwnRSquare;
18722 +
18723 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
18724 +    data &outdata(drop= _NCL_  _TYPE_);
18725 +       %if &globalclusid ne %then %do;
18726 +        length GCluster $16;
18727 +        %end;
18728 +       set &indata;
18729 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18730 +       %if &globalclusid ne %then %do;
18731 +         GCluster = "GC&globalclusid";
18732 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18733 +         rename _NAME_ = Cluster;
18734 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18735 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18736 +
18737 +       %end;
18738 +       %else %do;
18739 +         _NAME_ = upcase(_NAME_);
18740 +         rename _NAME_ = Cluster;
18741 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18742 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18743 +
18744 +       %end;
18745 +     run;
18746 +    %if &RSquare eq Y %then %do;
18747 +     data corr_tmp;
18748 +          set &outdata;
18749 +     run;
18750 +     %let istart = 2;
18751 +     %if &globalclusid ne %then %let istart = 3;
18752 +     data &outdata;
18753 +          set &outdata;
18754 +          %let dsid = %sysfunc(open(work.corr_tmp));
18755 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18756 +          %do i =&istart %to &nvar;
18757 +            %let _name = %sysfunc(varname(&dsid, &i));
18758 +            %let _name_md = &_name.**2;
18759 +                &_name = &_name_md;
18760 +          %end;
18761 +      %let dsid= %sysfunc(close(&dsid));
18762 +      run;
18763 +      proc datasets lib = work nolist;
18764 +           delete corr_tmp;
18765 +      run;
18766 +    %end;
18767 +     quit;
18768 +%mend MakeClusStructCorrData;
18769 +
18770 +/*
18771 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
18772 +*/
18773 +
18774 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
18775 +
18776 +     /* The indata should be the outdata
18777 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
18778 +
18779 +     proc sort data =&indata out=_tmpclusRsq;
18780 +     by cluster;
18781 +     run;
18782 +
18783 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18784 +      by cluster;
18785 +     run;
18786 +
18787 +     proc sort data=_tmpclusRsq;
18788 +        by _NAME_ COL1;
18789 +     run;
18790 +
18791 +     data _tmpclusRsq;
18792 +         length _NAME_ $32;
18793 +         set _tmpclusRsq; by _NAME_;
18794 +          _NAME_ = upcase(_NAME_);
18795 +          %if &ncluster ne 1 %then %do;
18796 +             if last._NAME_ then delete;
18797 +          %end;
18798 +          %else %do;
18799 +             COL1 = 0;
18800 +          %end;
18801 +     run;
18802 +     /* need to sort again */
18803 +     proc sort data=_tmpclusRsq;
18804 +        by _NAME_ COL1;
18805 +     run;
18806 +
18807 +     data &outdata;
18808 +         set _tmpclusRsq; by _NAME_;
18809 +         Cluster = upcase(Cluster);
18810 +         if last._NAME_ then output;
18811 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18812 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18813 +         rename COL1 = RSqWithNextClusComp;
18814 +         Cluster = upcase(Cluster);
18815 +         rename Cluster = ClosestCluster;
18816 +         *label  Cluster = "Next Closest Cluster";
18817 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18818 +         rename _NAME_ = Variable;
18819 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18820 +    run;
18821 +
18822 +
18823 +    %if &globalclusid ne %then %do;
18824 +    data &outdata;
18825 +       length GCluster $16;
18826 +       set &outdata;
18827 +       GCluster = "GC&globalclusid";
18828 +       run;
18829 +    %end;
18830 +    proc datasets lib = work nolist;
18831 +           delete _tmpclusRsq;
18832 +    run;
18833 +    quit;
18834 +%mend FindNextClosestClusByVar;
18835 +
18836 +
18837 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
18838 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
18839 +     proc sort data =&indata out=_tmpclusRsq;
18840 +     by cluster;
18841 +     run;
18842 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18843 +     by cluster;
18844 +     run;
18845 +     proc sort data=_tmpclusRsq;
18846 +        by _NAME_ col1;
18847 +     run;
18848 +     data _tmpclusRsq;
18849 +         length _NAME_ $32;
18850 +         set _tmpclusRsq; by _NAME_;
18851 +          _NAME_ = upcase(_NAME_);
18852 +          %if &ncluster ne 1 %then %do;
18853 +             if last._NAME_ then delete;
18854 +          %end;
18855 +          %else %do;
18856 +             COL1 = 0;
18857 +          %end;
18858 +     run;
18859 +     data &outdata;
18860 +         set _tmpclusRsq; by _NAME_;
18861 +         Cluster = upcase(Cluster);
18862 +         if last._NAME_ then output;
18863 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18864 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18865 +         rename COL1 = RSqWithNextClusComp;
18866 +         Cluster = upcase(Cluster);
18867 +         rename Cluster = ClosestCluster;
18868 +         *label  Cluster = "Next Closest Cluster";
18869 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18870 +         rename _NAME_ = Variable;
18871 +         *label  _NAME_ = "Variable";
18872 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18873 +
18874 +    run;
18875 +    %if &globalclusid ne %then %do;
18876 +    data &outdata;
18877 +       length GCluster $16;
18878 +       set &outdata;
18879 +       GCluster = "GC&globalclusid";
18880 +       run;
18881 +    %end;
18882 +
18883 +    proc datasets lib = work nolist;
18884 +           delete _tmpclusRsq;
18885 +    run;
18886 +
18887 +    quit;
18888 +%mend FindNextClosestClusByCluster;
18889 +
18890 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
18891 +/*----
18892 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
18893 +-----------*/
18894 +
18895 +proc sort data =&indata1;
18896 +    by Variable;
18897 +run;
18898 +proc sort data =&indata2;
18899 +    by Variable;
18900 +run;
18901 +data &outdata;
18902 +    merge &indata1 &indata2;
18903 +    by Variable;
18904 +    length Type $16;
18905 +    Type = 'Variable';
18906 +    *label Type ='Type';
18907 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18908 +run;
18909 +
18910 +
18911 +data &indata3;
18912 +    set  &indata3 ;
18913 +    length RSqWithOwnClusComp 8.;
18914 +    Cluster = Variable;
18915 +    RSqWithOwnClusComp = 1;
18916 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
18917 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18918 +    length Type $16;
18919 +    Type = 'ClusterComp';
18920 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18921 +
18922 +;
18923 +run;
18924 +
18925 +proc sort data=&outdata;
18926 +    by Cluster;
18927 +run;
18928 +proc sort data =&indata3;
18929 +    by Cluster;
18930 +run;
18931 +
18932 +data &outdata;
18933 +     set &outdata &indata3;
18934 +     by Cluster;
18935 +run;
18936 +
18937 +
18938 +/* Create the Selected variable with all YES */
18939 +
18940 +data &outdata;
18941 +     set &outdata;
18942 +     length RsqRatio 8.;
18943 +     length Selected $8;
18944 +     *label RSqRatio = "1-R**2 Ratio";
18945 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
18946 +     *label Selected = "Variable Selected";
18947 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
18948 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
18949 +     Selected ='YES';
18950 +     rename _LABEL_ = Label;
18951 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18952 +run;
18953 +
18954 +
18955 +/*----  Selected = Y/N will be assigened at the %score                   -------+
18956 +        Just create the Selected variable with all YES at the step above
18957 + +------------------------------------------------------------------------------+
18958 +
18959 +proc sort data=&outdata;
18960 +    by Cluster RsqRatio;
18961 +run;
18962 +
18963 +%if &selectedcomp eq CLUSTERCOMP %then %do;
18964 +data &outdata;
18965 +     set &outdata; by Cluster;
18966 +     length Selected $8;
18967 +     label Selected = "Variable Selected";
18968 +     if  first.Cluster then Selected ='Yes';
18969 +     else Selected = 'No';
18970 +    run;
18971 +%end;
18972 +%else %do;
18973 +data &outdata(drop = _var _varchange);
18974 +     set &outdata; retain _var 0; by Cluster;
18975 +     length Selected $8;
18976 +     label Selected = "Variable Selected";
18977 +     if first.Cluster then  _varchange = 0;
18978 +     else _varchange =1;
18979 +     if _var ne _varchange then  Selected  = 'Yes';
18980 +     else Selected = 'No';
18981 +     if last.cluster then  _var = 0;
18982 +     else _var = _varchange;
18983 +run;
18984 +%end;
18985 +
18986 +--------------------------------------------------------------*/
18987 +
18988 +quit;
18989 +%mend MakeVarClusResultTable;
18990 +
18991 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
18992 +     proc sort data =&indata;
18993 +        by cluster;
18994 +     run;
18995 +     proc transpose data =&indata
18996 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18997 +          by cluster;
18998 +     run;
18999 +     data &outdata;
19000 +          set  &outdata;
19001 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19002 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19003 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
19004 +     run;
19005 +     %if &globalclusid ne %then %do;
19006 +     data &outdata;
19007 +          Length GCluster $16;
19008 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19009 +          set  &outdata;
19010 +          GCluster ="GC&globalclusid.";
19011 +          run;
19012 +     %end;
19013 +
19014 +%Mend MakePlotDataFromCorrTable;
19015 +
19016 +
19017 +%macro MakeCorrelation(indata=,
19018 +                       outstat=_tmpoutstat,
19019 +                       corrmatrix=N,
19020 +                       outcorr=_tmpoutcorr,
19021 +                       includeclassvar=N,
19022 +                       target=,
19023 +                       freq=,
19024 +                       weight=);
19025 +   %if &target eq  %then %do;
19026 +
19027 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
19028 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
19029 +       %if &includeclassvar eq Y %then %do;
19030 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
19031 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19032 +          %do i = 2 %to &nvar;
19033 +          %let varname = %sysfunc(varname(&dsid, &i));
19034 +          &varname
19035 +          %end;
19036 +       %end;
19037 +       ;
19038 +      %if &freq ne  %then %do;
19039 +          freq &freq;
19040 +      %end;
19041 +      %if &weight ne  %then %do;
19042 +          weight &weight;
19043 +      %end;
19044 +
19045 +      run;
19046 +      %if &corrmatrix eq Y %then %do;
19047 +      data  &outcorr (drop = _NCL_ _TYPE_);
19048 +           set  &outstat ;
19049 +           if _TYPE_ ='CORR' then output;
19050 +      run;
19051 +      %end;
19052 +    %end;
19053 +    %else %do;
19054 +       proc corr data=&indata outp=&outstat noprint;
19055 +            var
19056 +       %let dsid = %sysfunc(open(&indata));
19057 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19058 +          %do i = 1 %to &nvar;
19059 +              %let _name = %sysfunc(varname(&dsid, &i));
19060 +              %if &_name ne &target %then;
19061 +              &_name
19062 +           %end;
19063 +        %let dsid= %sysfunc(close(&dsid));
19064 +        ;
19065 +        with &target;
19066 +        run;
19067 +    %end;
19068 +    quit;
19069 +%mend MakeCorrelation;
19070 +
19071 +
19072 +%macro MakeCorrelationDistance(indata=,
19073 +                               outdata=,
19074 +                               rsquare = N
19075 +                               );
19076 +    data corr_tmp;
19077 +        set &indata;
19078 +        if _N_ = 1 then do;
19079 +           output;
19080 +           stop;
19081 +         end;
19082 +    run;
19083 +    %if &outdata ne  %then %let  _outdata = &outdata;
19084 +    %else %let _outdata = &indata;
19085 +
19086 +    data &_outdata;
19087 +         set &indata;
19088 +
19089 +         %let dsid = %sysfunc(open(work.corr_tmp));
19090 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19091 +          %do i = 2 %to &nvar;
19092 +              %let _name = %sysfunc(varname(&dsid, &i));
19093 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19094 +              %else  %let _name_md = &_name;
19095 +              &_name = 1- &_name_md;
19096 +          %end;
19097 +      %let dsid= %sysfunc(close(&dsid));
19098 +      run;
19099 +      proc datasets lib = work nolist;
19100 +           delete corr_tmp;
19101 +      run;
19102 +      quit;
19103 +  %mend MakeCorrelationDistance;
19104 +
19105 +
19106 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19107 +                                   rsquare = N
19108 +                                   );
19109 +    data corr_tmp;
19110 +        set &indata;
19111 +    run;
19112 +    proc sql noprint;
19113 +           update &indata
19114 +           set
19115 +     %let dsid = %sysfunc(open(work.corr_tmp));
19116 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19117 +          %do i = 4 %to &nvar;
19118 +          %let _name = %sysfunc(varname(&dsid, &i));
19119 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19120 +            %else  %let _name_md = &_name;
19121 +            %if &i < &nvar %then %do;
19122 +               &_name = 1- &_name_md ,
19123 +            %end;
19124 +            %else %do;
19125 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19126 +            %end;
19127 +          %end;
19128 +      %let dsid= %sysfunc(close(&dsid));
19129 +
19130 +      select * from &indata;
19131 +      run;
19132 +     data &indata( drop = _NCL_);
19133 +           set &indata;
19134 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19135 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19136 +     run;
19137 +     data &indata(DROP = _NCL_);
19138 +           set &indata;
19139 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19140 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19141 +           rename _NAME_ = _VAR_;
19142 +     run;
19143 +     proc datasets lib = work nolist;
19144 +           delete corr_tmp;
19145 +     run;
19146 +     quit;
19147 + %mend UpdateOutStatCorrToDistance;
19148 +
19149 +
19150 +%macro HierClusWithCorr(indata= ,
19151 +                        ncluster=,
19152 +                        method = Ward,
19153 +                        outtree = _outtree,
19154 +                        idvar =_VAR_,
19155 +                        outdata=,
19156 +                        rescore = N,
19157 +                        newncluster=
19158 +                        );
19159 +      %global &newncluster;
19160 +      %if &rescore ne Y %then %do;
19161 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19162 +                   method=&method outtree=&outtree noprint;
19163 +           id &idvar;
19164 +      run;
19165 +      %end;
19166 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19167 +      run;
19168 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19169 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19170 +      run;
19171 +      data _outcontent;
19172 +          set _outcontent;
19173 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19174 +          index = 1;
19175 +          rename NAME = _NAME_;
19176 +      run;
19177 +      proc sort data=_outcontent;
19178 +          by _NAME_;
19179 +      run;
19180 +      proc sort data =&outdata;
19181 +           by _NAME_;
19182 +      run;
19183 +      data &outdata(drop=index);
19184 +          merge &outdata _outcontent;
19185 +          by _NAME_;
19186 +          if index = . then delete;
19187 +      run;
19188 +      /*-----------------------------------------------------------*/
19189 +      data &outdata;
19190 +           length CLUSNAME $16;
19191 +           set &outdata;
19192 +           if CLUSTER > &ncluster then delete;
19193 +           CLUSNAME='GC'||strip(CLUSTER);
19194 +           *label CLUSNAME = "Cluster Name";
19195 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19196 +           rename _NAME_ = VARIABLE ;
19197 +           *label _NAME_ = "Variable";
19198 +           *label CLUSTER = "Cluster";
19199 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19200 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19201 +      run;
19202 +      proc sort data=&outdata out=&outdata;
19203 +           by CLUSTER;
19204 +      run;
19205 +      proc means data =&outdata noprint;
19206 +           output out=_meanout;
19207 +      run;
19208 +      data _null_;
19209 +            set _meanout;
19210 +            if strip(_STAT_) eq 'MAX' then do;
19211 +            call symput("&newncluster", CLUSTER);
19212 +            stop;
19213 +            end;
19214 +      run;
19215 +
19216 +      proc datasets lib = work nolist;
19217 +           delete _outcontent _meanout;
19218 +      run;
19219 +      quit;
19220 +%mend  HierClusWithCorr;
19221 +
19222 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19223 +
19224 +     data _tmpindata;
19225 +          set &indata;
19226 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19227 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19228 +          if _TYPE_ = 'STD' then _NAME_='STD';
19229 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19230 +          DROP _TYPE_ _NCL_;
19231 +     run;
19232 +
19233 +     filename _file_  "&fileRef";
19234 +
19235 +     data _null_;
19236 +        FILE _file_ MOD;
19237 +        put ' ';
19238 +        put "/*-------------------------------------------------*/";
19239 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19240 +        put "/*-------------------------------------------------*/";
19241 +        put ' ';
19242 +        %let dsid = %sysfunc(open(work._tmpindata));
19243 +
19244 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19245 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19246 +        %let k = 1;
19247 +        %do %while(^%sysfunc(fetch(&dsid)));
19248 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19249 +               %if &k > 2 %then %do;
19250 +                %let cn = %eval(&k-2);
19251 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19252 +                %end;
19253 +                %let k = %eval(&k+1);
19254 +
19255 +        %end;
19256 +        %let rc = %sysfunc(rewind(&dsid));
19257 +
19258 +        %do j= 2 %to &nvar;
19259 +            %let _varname = %sysfunc(varname(&dsid, &j));
19260 +            %do %while(^%sysfunc(fetch(&dsid)));
19261 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19262 +                %if &_name = MEAN %then
19263 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19264 +                %else %if &_name = STD %then
19265 +                %let _std = %sysfunc(getvarn(&dsid, &j));
19266 +                %else %do;
19267 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19268 +                      %let abscoeff = %sysfunc(abs(&coeff));
19269 +                          %if &abscoeff >  0 %then %do;
19270 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19271 +                           %end;
19272 +                 %end;
19273 +             %end;
19274 +             %let rc = %sysfunc(rewind(&dsid));
19275 +         %end;
19276 +
19277 +        %let dsid= %sysfunc(close(&dsid));
19278 +
19279 +     run;
19280 +
19281 +     filename _file_;
19282 +     proc datasets lib = work nolist;
19283 +           delete _tmpindata;
19284 +     run;
19285 +     quit;
19286 +%mend CreateScoreCode2;
19287 +
19288 +
19289 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19290 +
19291 +     /*--- Build Code to Modify Metadata ---*/
19292 +     filename X "&deltacodefile";
19293 +     data _null_;
19294 +        FILE X;
19295 +        set &groupds end=eof;
19296 +        if _N_=1 then do;
19297 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19298 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19299 +           %end;
19300 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19301 +           put "if upcase(strip(NAME)) in (";
19302 +        end;
19303 +        if Strip(upcase(Selected)) eq 'YES' then do;
19304 +           string = '"'!!trim(left(VARIABLE))!!'"';
19305 +           put string;
19306 +        end;
19307 +        if eof then do;
19308 +           put ') then ROLE="INPUT";';
19309 +           put 'else ROLE="REJECTED";';
19310 +           put 'end;';
19311 +
19312 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19313 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19314 +           %end;
19315 +        end;
19316 +     run;
19317 +     quit;
19318 +
19319 +     filename X;
19320 +     quit;
19321 +%mend MakeDeltaCode2;
19322 +
19323 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19324 +  %global &ngc;
19325 +  data _null_;
19326 +  %if &indata ne %then %do;
19327 +      %let dsid = %sysfunc(open(&indata));
19328 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19329 +      %let dsid = %sysfunc(close(&dsid));
19330 +  %end;
19331 +  %else %do;
19332 +       %let nvar = %eval(&ninput+&ndummy); ;
19333 +  %end;
19334 +  %let numgc = %eval(&nvar/&div+2);
19335 +  %let &ngc = &numgc;
19336 +   run;
19337 +  quit;
19338 +%mend getInitialGClusterNumber;
19339 +
19340 +
19341 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19342 +data &outlink(drop = Selected);
19343 +     set &indata;
19344 +     LINKID = _N_;
19345 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19346 +run;
19347 +data &outnode(keep=NODEID TYPE LABEL);
19348 +    set &indata;
19349 +    length TYPE $16;
19350 +    rename VARIABLE = NODEID;
19351 +    *label  CLUSNAME="Node ID";
19352 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19353 +    TYPE = "VARIABLE";
19354 +    *label TYPE = "Node Type";
19355 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19356 +    run;
19357 +data _tmp(keep=NODEID TYPE LABEL);
19358 +    set &indata;
19359 +    length TYPE $16;
19360 +    rename CLUSNAME = NODEID;
19361 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19362 +    TYPE = "GCLUSTER";
19363 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19364 +    run;
19365 +proc sort data=_tmp;
19366 +    by NODEID;
19367 +run;
19368 +data _tmp;
19369 +    set _tmp; by NODEID;
19370 +    if first.NODEID then output;
19371 +run;
19372 +proc sort data=&outnode;
19373 +    by NODEID;
19374 +run;
19375 +data  &outnode;
19376 +    set _tmp &outnode;
19377 +run;
19378 +proc datasets lib = work nolist;
19379 +     delete _tmp;
19380 +run;
19381 +quit;
19382 +%mend MakeGobalConstellData;
19383 +
19384 +/* Make contellation plot data among GCLUSTERS */
19385 +
19386 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19387 +
19388 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19389 +     set &indata;
19390 +     LINKID = _N_;
19391 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19392 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19393 +     end;
19394 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19395 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19396 +     end;
19397 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19398 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19399 +    end;
19400 +run;
19401 +
19402 +data _tmp_outrsquare;
19403 +        set &inoutrsq;
19404 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19405 +run;
19406 +
19407 +proc freq data =_tmp_outrsquare noprint;
19408 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19409 +run;
19410 +
19411 +data &outnode(keep=_NAME_ TYPE LABEL);
19412 +    set &outlink;
19413 +    length TYPE $16;
19414 +    length LABEL $100;
19415 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19416 +
19417 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19418 +    TYPE = "GCLUSTER";
19419 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19420 +    end;
19421 +    else do;
19422 +    TYPE= "ROOT";
19423 +    LABEL= _NAME_;
19424 +    end;
19425 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19426 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19427 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19428 +    run;
19429 +
19430 +proc sort data=&outnode;
19431 +     by _NAME_;
19432 +proc sort data=_tmp_GCLUSFREQ;
19433 +     by _NAME_;
19434 +run;
19435 +
19436 +data  &outnode;
19437 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19438 +     if COUNT=. then COUNT=1;
19439 +run;
19440 +
19441 +proc datasets lib = work nolist;
19442 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19443 +run;
19444 +
19445 +quit;
19446 +%Mend MakeGClusterConstData;
19447 +
19448 +
19449 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19450 +
19451 +    data _gscoretmpds;
19452 +          set &indata;
19453 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19454 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19455 +          if _TYPE_ = 'STD' then _NAME_='STD';
19456 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19457 +          DROP _TYPE_ _NCL_;
19458 +     run;
19459 +
19460 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19461 +        GCluster Component &globalclusid ------ */
19462 +
19463 +    filename _file_  "&fileref";
19464 +
19465 +    data _null_;
19466 +        %if &globalclusid eq 1 %then %do;
19467 +          FILE _file_;
19468 +        %end;
19469 +        %else %do;
19470 +          FILE _file_ MOD;
19471 +        %end;
19472 +
19473 +        %let dsid = %sysfunc(open(work._gscoretmpds));
19474 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19475 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19476 +
19477 +        %let k = 1;
19478 +        %do %while(^%sysfunc(fetch(&dsid)));
19479 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19480 +                %if &k > 2 %then %do;
19481 +                put "&_name = 0 ; ";
19482 +                %end;
19483 +                %let k = %eval(&k+1);
19484 +        %end;
19485 +
19486 +        %let rc = %sysfunc(rewind(&dsid));
19487 +        %do i= 2 %to &nvar;
19488 +            %let _varname =  %sysfunc(varname(&dsid, &i));
19489 +            %do %while(^%sysfunc(fetch(&dsid)));
19490 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19491 +                %if &_name = MEAN %then
19492 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19493 +                %else %if &_name = STD %then
19494 +                %let _std = %sysfunc(getvarn(&dsid, &i));
19495 +                %else %do;
19496 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19497 +                      %let abscoeff = %sysfunc(abs(&coeff));
19498 +                          %if &abscoeff >  0 %then %do;
19499 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19500 +                           %end;
19501 +                 %end;
19502 +             %end;
19503 +             %let rc = %sysfunc(rewind(&dsid));
19504 +
19505 +         %end;
19506 +
19507 +        %let dsid= %sysfunc(close(&dsid));
19508 +       run;
19509 +
19510 +
19511 +       proc datasets lib=work nolist;
19512 +            delete _gscoretmpds;
19513 +       run;
19514 +      quit;
19515 +
19516 +%mend CreateGClusterScoreCode;
19517 +
19518 +
19519 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19520 +
19521 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19522 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19523 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19524 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19525 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19526 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19527 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19528 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19529 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19530 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19531 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19532 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19533 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19534 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19535 +
19536 +   filename gsfile "&gscorecode";
19537 +
19538 +   data &EM_USER_GSCORE;
19539 +             set &indata;
19540 +             %include  gsfile;
19541 +        keep
19542 +        %do i=1 %to &ngcluster;
19543 +         %let gcvarname = GC&i;
19544 +         &gcvarname
19545 +        %end;
19546 +     ;
19547 +   run;
19548 +
19549 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19550 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19551 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19552 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19553 +    noprint  ;
19554 +     var
19555 +       %do i=1 %to &ngcluster;
19556 +         %let gcvarname = GC&i;
19557 +         &gcvarname
19558 +        %end;
19559 +   ;
19560 +   run;
19561 +
19562 +
19563 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19564 +   data &EM_USER_GSCORECORRPLOT ;
19565 +        set &EM_USER_GSCORECORRPLOT;
19566 +        rename _X_ = X;
19567 +        rename _Y_ = Y;
19568 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19569 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19570 +   run;
19571 +
19572 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19573 +
19574 +   data &EM_USER_GSCORETREE;
19575 +        length _NAME_ $32;
19576 +        length _LABEL_ $100;
19577 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19578 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19579 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19580 +        end;else do;
19581 +         _LABEL_ = _NAME_;
19582 +        end;
19583 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19584 +
19585 +   run;
19586 +
19587 +   quit;
19588 +
19589 +%mend MakeGClusterCorrelation;
19590 +
19591 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
19592  +%macro score;
19593  +
19594  +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
19595  +%include temp;
19596  +filename temp;
19597  +
19598  +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
19599  +
19600  +data _null_;
19601  +         set &EM_USER_VARCLUSMETA;
19602  +         if _N_=1 then
19603  +         call symput('_trainnum', TrainNum);
19604  +         call symput('_exportedcomp', ExportedComp);
19605  +         call symput('_hidevariable', HideVariable);
19606  +         call symput('_newTrain', NewTrain);
19607  +run;
19608  +
19609  +%if &_newTrain = N %then %do;
19610  +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
19611  +        %else %let _exportedCompChanged = Y;
19612  +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
19613  +        %else  %let _hideVariableChanged = Y;
19614  +%end;
19615  +%else %do;
19616  +        %let _exportedCompChanged = Y;
19617  +        %let _hideVariableChanged = Y;
19618  +%end;
19619  +
19620  +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
19621  +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
19622  +     %include temp;
19623  +     filename temp;
19624  +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19625  +%end;
19626  +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
19627  +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
19628  +     %include temp;
19629  +     filename temp;
19630  +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19631  +%end;
19632  +
19633  +  /* store  current property values */
19634  + data &EM_USER_VARCLUSMETA;
19635  +       set &EM_USER_VARCLUSMETA;
19636  +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19637  +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19638  + run;
19639  +
19640  +%mend score;
19641  +
19642  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
19643  +
19644  +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
19645  +     proc sort data =&indata;
19646  +              by Cluster RsqRatio Type;
19647  +     run;
19648  +     /*----------------------------------------------------------------------
19649  +      The Type variabe is used becuse the variable need to be selected
19650  +        instead of Cluster component when only one variable is in the cluster
19651  +     +-----------------------------------------------------------------------*/
19652  +
19653  +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
19654  +         data &indata;
19655  +              set &indata; by cluster;
19656  +              if first.Cluster then Selected = 'YES';
19657  +              else Selected = 'NO';
19658  +         run;
19659  +         quit;
19660  +    %end;
19661  +    %else %do;
19662  +         data &indata(drop = _var _varchange);
19663  +              set &indata; retain _var 0; by Cluster;
19664  +             if first.Cluster then  _varchange = 0;
19665  +                 else _varchange =1;
19666  +             if _var ne _varchange then  Selected  = 'YES';
19667  +             else Selected = 'NO';
19668  +             if last.cluster then  _var = 0;
19669  +             else _var = _varchange;
19670  +         run;
19671  +         quit;
19672  +    %end;
19673  +%mend ChangeVariableSelectionFlag;
19674  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS2.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
19675  +
19676  +%macro score1(ExportedCompChanged=,
19677  +              HideVariableChanged=);
19678  +
19679  +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
19680  +   %if &ExportedCompChanged = Y %then %do;
19681  +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
19682  +   %end;
19683  +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
19684  +
19685  +%mend score1;
19686  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 131 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file X is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=20Apr2017:02:48:14,
      Create Time=20Apr2017:02:45:58
 
NOTE: 42 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 93.
NOTE: There were 131 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref X has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS2.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS2.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19687   *------------------------------------------------------------*;
19688   * End SCORE: VarClus;
19689   *------------------------------------------------------------*;
19690
 
19691   filename emflow "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\VarClus\EMFLOWSCORE.sas";
19692   *------------------------------------------------------------*;
19693   * VarClus: Scoring DATA data;
19694   *------------------------------------------------------------*;
19695   data EMWS2.VarClus_TRAIN
19696   / view=EMWS2.VarClus_TRAIN
19697   ;
19698   set EMWS2.Part_TRAIN
19699   ;
19700   %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\VarClus\EMFLOWSCORE.sas.
19701  +*** Begin Class Look-up, Standardization, Replacement ;
19702  +
19703  +*** Generate dummy variables for BOTHPAYM ;
19704  +label BOTHPAYM0 = 'BOTHPAYM=0' ;
19705  +label BOTHPAYM1 = 'BOTHPAYM=1' ;
19706  +if missing( BOTHPAYM ) then do;
19707  +   BOTHPAYM0 = .;
19708  +   BOTHPAYM1 = .;
19709  +end;
19710  +else do;
19711  +   length _dm4 $ 4; drop _dm4 ;
19712  +   _dm4 = put( BOTHPAYM , $4. );
19713  +   %DMNORMIP( _dm4 )
19714  +   if _dm4 = '0'  then do;
19715  +      BOTHPAYM0 = 1;
19716  +      BOTHPAYM1 = 0;
19717  +   end;
19718  +   else if _dm4 = '1'  then do;
19719  +      BOTHPAYM0 = 0;
19720  +      BOTHPAYM1 = 1;
19721  +   end;
19722  +   else do;
19723  +      delete;
19724  +   end;
19725  +end;
19726  +
19727  +*** Generate dummy variables for CCPAYM ;
19728  +label CCPAYM0 = 'CCPAYM=0' ;
19729  +label CCPAYM1 = 'CCPAYM=1' ;
19730  +if missing( CCPAYM ) then do;
19731  +   CCPAYM0 = .;
19732  +   CCPAYM1 = .;
19733  +end;
19734  +else do;
19735  +   length _dm4 $ 4; drop _dm4 ;
19736  +   _dm4 = put( CCPAYM , $4. );
19737  +   %DMNORMIP( _dm4 )
19738  +   if _dm4 = '0'  then do;
19739  +      CCPAYM0 = 1;
19740  +      CCPAYM1 = 0;
19741  +   end;
19742  +   else if _dm4 = '1'  then do;
19743  +      CCPAYM0 = 0;
19744  +      CCPAYM1 = 1;
19745  +   end;
19746  +   else do;
19747  +      delete;
19748  +   end;
19749  +end;
19750  +
19751  +*** Generate dummy variables for PCPAYM ;
19752  +label PCPAYM0 = 'PCPAYM=0' ;
19753  +label PCPAYM1 = 'PCPAYM=1' ;
19754  +if missing( PCPAYM ) then do;
19755  +   PCPAYM0 = .;
19756  +   PCPAYM1 = .;
19757  +end;
19758  +else do;
19759  +   length _dm4 $ 4; drop _dm4 ;
19760  +   _dm4 = put( PCPAYM , $4. );
19761  +   %DMNORMIP( _dm4 )
19762  +   if _dm4 = '0'  then do;
19763  +      PCPAYM0 = 1;
19764  +      PCPAYM1 = 0;
19765  +   end;
19766  +   else if _dm4 = '1'  then do;
19767  +      PCPAYM0 = 0;
19768  +      PCPAYM1 = 1;
19769  +   end;
19770  +   else do;
19771  +      delete;
19772  +   end;
19773  +end;
19774  +
19775  +*** Generate dummy variables for METHPAYM ;
19776  +label METHPAYMCC = 'METHPAYM=CC' ;
19777  +label METHPAYMCK = 'METHPAYM=CK' ;
19778  +label METHPAYMDK = 'METHPAYM=DK' ;
19779  +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
19780  +*** encoding is sparse, initialize to zero;
19781  +METHPAYMCC = 0;
19782  +METHPAYMCK = 0;
19783  +METHPAYMDK = 0;
19784  +METHPAYMXBOT = 0;
19785  +if missing( METHPAYM ) then do;
19786  +   METHPAYMCC = .;
19787  +   METHPAYMCK = .;
19788  +   METHPAYMDK = .;
19789  +   METHPAYMXBOT = .;
19790  +end;
19791  +else do;
19792  +   length _dm4 $ 4; drop _dm4 ;
19793  +   _dm4 = put( METHPAYM , $4. );
19794  +   %DMNORMIP( _dm4 )
19795  +   if _dm4 = 'CC'  then do;
19796  +      METHPAYMCC = 1;
19797  +   end;
19798  +   else if _dm4 = 'CK'  then do;
19799  +      METHPAYMCK = 1;
19800  +   end;
19801  +   else if _dm4 = 'XBOT'  then do;
19802  +      METHPAYMXBOT = 1;
19803  +   end;
19804  +   else if _dm4 = 'DK'  then do;
19805  +      METHPAYMDK = 1;
19806  +   end;
19807  +   else do;
19808  +      delete;
19809  +   end;
19810  +end;
19811  +
19812  +*** End Class Look-up, Standardization, Replacement ;
19813  +
19814  +
19815  +/*-------------------------------------------------*/
19816  +/* Varclus Score Code Begins*/
19817  +/*-------------------------------------------------*/
19818  +
19819  +Clus1 = 0 ; /*---Cluster Component 1------ */
19820  +Clus2 = 0 ; /*---Cluster Component 2------ */
19821  +Clus3 = 0 ; /*---Cluster Component 3------ */
19822  +Clus4 = 0 ; /*---Cluster Component 4------ */
19823  +Clus5 = 0 ; /*---Cluster Component 5------ */
19824  +Clus6 = 0 ; /*---Cluster Component 6------ */
19825  +Clus7 = 0 ; /*---Cluster Component 7------ */
19826  +Clus8 = 0 ; /*---Cluster Component 8------ */
19827  +Clus9 = 0 ; /*---Cluster Component 9------ */
19828  +Clus10 = 0 ; /*---Cluster Component 10------ */
19829  +Clus11 = 0 ; /*---Cluster Component 11------ */
19830  +Clus12 = 0 ; /*---Cluster Component 12------ */
19831  +Clus13 = 0 ; /*---Cluster Component 13------ */
19832  +Clus14 = 0 ; /*---Cluster Component 14------ */
19833  +Clus15 = 0 ; /*---Cluster Component 15------ */
19834  +Clus16 = 0 ; /*---Cluster Component 16------ */
19835  +Clus17 = 0 ; /*---Cluster Component 17------ */
19836  +Clus18 = 0 ; /*---Cluster Component 18------ */
19837  +Clus19 = 0 ; /*---Cluster Component 19------ */
19838  +Clus20 = 0 ; /*---Cluster Component 20------ */
19839  +Clus21 = 0 ; /*---Cluster Component 21------ */
19840  +Clus22 = 0 ; /*---Cluster Component 22------ */
19841  +Clus23 = 0 ; /*---Cluster Component 23------ */
19842  +Clus24 = 0 ; /*---Cluster Component 24------ */
19843  +Clus25 = 0 ; /*---Cluster Component 25------ */
19844  +Clus26 = 0 ; /*---Cluster Component 26------ */
19845  +Clus27 = 0 ; /*---Cluster Component 27------ */
19846  +Clus28 = 0 ; /*---Cluster Component 28------ */
19847  +Clus29 = 0 ; /*---Cluster Component 29------ */
19848  +Clus30 = 0 ; /*---Cluster Component 30------ */
19849  +Clus31 = 0 ; /*---Cluster Component 31------ */
19850  +Clus32 = 0 ; /*---Cluster Component 32------ */
19851  +Clus33 = 0 ; /*---Cluster Component 33------ */
19852  +Clus34 = 0 ; /*---Cluster Component 34------ */
19853  +Clus35 = 0 ; /*---Cluster Component 35------ */
19854  +Clus6 = Clus6+0.31049469798101 * (ACTBUY - 0.99109663409337)/1.16003174926523;
19855  +Clus9 = Clus9+0.32502227037692 * (BUYPROP - 0.18928931964407)/0.25656954904129;
19856  +Clus32 = Clus32+0.27053392066665 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
19857  +Clus7 = Clus7+0.36779194981722 * (DAYLAST - 1182.17608189855)/1226.0780195912;
19858  +Clus29 = Clus29+0.32606352949113 * (DEPT01 - 0.50547541492166)/1.82274128473225;
19859  +Clus29 = Clus29+0.31475903553413 * (DEPT02 - 0.29257018768419)/1.15307534710204;
19860  +Clus29 = Clus29+0.35680641258699 * (DEPT03 - 1.08161935784085)/2.82203775857088;
19861  +Clus29 = Clus29+0.31539445831064 * (DEPT04 - 0.68006824879789)/2.28175674515779;
19862  +Clus29 = Clus29+0.29360569691748 * (DEPT05 - 0.54295020939972)/1.52515347226129;
19863  +Clus32 = Clus32+0.17644386618702 * (DEPT06 - 0.85925236544129)/1.98131768775175;
19864  +Clus31 = Clus31+0.21799066207907 * (DEPT07 - 0.02559329920893)/0.31536747776311;
19865  +Clus31 = Clus31+0.33993271338746 * (DEPT08 - 0.31512331316891)/1.29408639394269;
19866  +Clus31 = Clus31+0.34186033539386 * (DEPT09 - 0.2486427795874)/1.20923480324609;
19867  +Clus31 = Clus31+0.35421920019149 * (DEPT10 - 0.39066232356134)/1.7648701612552;
19868  +Clus31 = Clus31+0.28393608567866 * (DEPT11 - 0.15141926477431)/0.76300583506574;
19869  +Clus31 = Clus31+0.38386073638767 * (DEPT12 - 0.21448735846129)/0.89341788675275;
19870  +Clus32 = Clus32+0.21094125773847 * (DEPT13 - 1.30395532805956)/2.58742913517547;
19871  +Clus1 = Clus1+0.14612398962451 * (DEPT14 - 0.83527221963704)/2.18699342328426;
19872  +Clus1 = Clus1+0.09702913619723 * (DEPT15 - 0.28949899177912)/1.23869079532202;
19873  +Clus1 = Clus1+0.09670854836259 * (DEPT16 - 0.22491081123002)/1.0272304883634;
19874  +Clus1 = Clus1+0.08864693290338 * (DEPT17 - 0.19466418489219)/0.960753111967;
19875  +Clus34 = Clus34+0.68513998203611 * (DEPT18 - 0.1317512021095)/0.70116887678934;
19876  +Clus34 = Clus34+0.68513998203611 * (DEPT19 - 0.07324336900884)/0.59281735227563;
19877  +Clus32 = Clus32+0.0549670760145 * (DEPT20 - 0.02956413835892)/0.31025698407933;
19878  +Clus33 = Clus33+1 * (DEPT21 - 0.01821002016441)/0.24509272697267;
19879  +Clus32 = Clus32+0.23307614189926 * (DEPT22 - 2.12771831859779)/3.55134640550257;
19880  +Clus32 = Clus32+0.20251555040293 * (DEPT23 - 2.14223669923995)/3.81941288304535;
19881  +Clus32 = Clus32+0.17413334206296 * (DEPT24 - 0.64039087947882)/1.70711269742472;
19882  +Clus6 = Clus6+0.26635393730034 * (DEPT25 - 1.77676438653637)/4.75421718243184;
19883  +Clus9 = Clus9+0.18580207423567 * (DEPT26 - 0.19075539010392)/0.91270742425277;
19884  +Clus32 = Clus32+0.16412176293701 * (DEPT27 - 0.58712579494338)/1.55259848403997;
19885  +Clus4 = Clus4+0.41745197007519 * (DOLINDEA - 47.8585866898046)/37.591191668842;
19886  +Clus1 = Clus1+0.22176651741164 * (DOLINDET - 197.869031487513)/314.244548218948;
19887  +Clus3 = Clus3+0.34040516245314 * (DOLL24 - 45.4938073522568)/93.9875146751151;
19888  +Clus24 = Clus24+0.53431022831305 * (DOLLARQ01 - 3.60255901969908)/18.9572343997303;
19889  +Clus23 = Clus23+0.53635920804358 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
19890  +Clus11 = Clus11+0.53251837592186 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
19891  +Clus16 = Clus16+0.53398718553838 * (DOLLARQ04 - 4.67856274236079)/22.181986153492;
19892  +Clus17 = Clus17+0.53548666653293 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
19893  +Clus13 = Clus13+0.53337003658551 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
19894  +Clus25 = Clus25+0.53620252678703 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
19895  +Clus27 = Clus27+0.54119921647341 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
19896  +Clus22 = Clus22+0.5349541071483 * (DOLLARQ09 - 4.29424383434155)/20.7683103640237;
19897  +Clus10 = Clus10+0.53279724233879 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
19898  +Clus15 = Clus15+0.53532885078822 * (DOLLARQ11 - 4.15352411974562)/20.8177653006881;
19899  +Clus6 = Clus6+0.3683415196646 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
19900  +Clus26 = Clus26+0.54383527719424 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
19901  +Clus20 = Clus20+0.54398954027119 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
19902  +Clus8 = Clus8+0.53531614157592 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
19903  +Clus18 = Clus18+0.53714970024584 * (DOLLARQ16 - 7.79008624166279)/31.0104071776129;
19904  +Clus3 = Clus3+0.44436827521592 * (DOLLARQ17 - 5.57017403443461)/26.1415799982751;
19905  +Clus19 = Clus19+0.53306278493927 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
19906  +Clus14 = Clus14+0.53462067704059 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
19907  +Clus9 = Clus9+0.37631589198989 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
19908  +Clus21 = Clus21+0.53908041935557 * (DOLLARQ21 - 4.74636513106871)/24.2680885720031;
19909  +Clus12 = Clus12+0.53808320116509 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
19910  +Clus4 = Clus4+0.41538876032442 * (DOLNETDA - 45.411597554134)/36.1502695431938;
19911  +Clus1 = Clus1+0.22085514615169 * (DOLNETDT - 189.18095548317)/303.615750735173;
19912  +Clus1 = Clus1+0.19970567328905 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
19913  +Clus7 = Clus7+0.36779707552659 * (MONLAST - 38.7579959671164)/40.2783526824403;
19914  +Clus35 = Clus35+1 * (TENURE - 83.4682798200713)/60.0499642836247;
19915  +Clus24 = Clus24+0.53431022831305 * (TOTORDQ01 - 0.07833100666976)/0.31375640071534;
19916  +Clus23 = Clus23+0.53635920804358 * (TOTORDQ02 - 0.07383279044516)/0.30498525646648;
19917  +Clus11 = Clus11+0.53251837592187 * (TOTORDQ03 - 0.05841476655808)/0.25663649019308;
19918  +Clus16 = Clus16+0.53398718553838 * (TOTORDQ04 - 0.09058476810919)/0.33923460400983;
19919  +Clus17 = Clus17+0.53548666653293 * (TOTORDQ05 - 0.08766868310842)/0.32373427535999;
19920  +Clus13 = Clus13+0.53337003658551 * (TOTORDQ06 - 0.08068869241507)/0.31127041208068;
19921  +Clus25 = Clus25+0.53620252678703 * (TOTORDQ07 - 0.08583837443772)/0.3225455818214;
19922  +Clus27 = Clus27+0.54119921647341 * (TOTORDQ08 - 0.11782224290367)/0.39692742169452;
19923  +Clus22 = Clus22+0.5349541071483 * (TOTORDQ09 - 0.09120521172638)/0.32676782706381;
19924  +Clus10 = Clus10+0.53279724233879 * (TOTORDQ10 - 0.07501163331782)/0.2991488551838;
19925  +Clus15 = Clus15+0.53532885078822 * (TOTORDQ11 - 0.08630370715061)/0.31791570298113;
19926  +Clus6 = Clus6+0.38864318218989 * (TOTORDQ12 - 0.12619823173569)/0.4074226605598;
19927  +Clus26 = Clus26+0.54383527719424 * (TOTORDQ13 - 0.10832945556072)/0.35251925488707;
19928  +Clus20 = Clus20+0.54398954027119 * (TOTORDQ14 - 0.08894059252365)/0.31938115502111;
19929  +Clus8 = Clus8+0.53531614157592 * (TOTORDQ15 - 0.09821622460058)/0.342400248125;
19930  +Clus18 = Clus18+0.53714970024584 * (TOTORDQ16 - 0.14620753838994)/0.42506049526083;
19931  +Clus3 = Clus3+0.42389042465751 * (TOTORDQ17 - 0.108267411199)/0.35925036974258;
19932  +Clus19 = Clus19+0.53306278493927 * (TOTORDQ18 - 0.09319063130138)/0.32753587031264;
19933  +Clus14 = Clus14+0.53462067704059 * (TOTORDQ19 - 0.08217775709632)/0.30645832771871;
19934  +Clus9 = Clus9+0.40129080124664 * (TOTORDQ20 - 0.15985729796804)/0.46170113594525;
19935  +Clus21 = Clus21+0.53908041935557 * (TOTORDQ21 - 0.09182565534357)/0.32980785722872;
19936  +Clus12 = Clus12+0.53808320116509 * (TOTORDQ22 - 0.08611757406545)/0.31443413012517;
19937  +Clus1 = Clus1+0.21191459192951 * (UNITSIDD - 10.9602916085)/17.1055734908767;
19938  +Clus4 = Clus4+0.30018376965081 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
19939  +Clus30 = Clus30+1 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
19940  +Clus5 = Clus5+-0.33333333333333 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
19941  +Clus5 = Clus5+0.33333333333333 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
19942  +Clus2 = Clus2+-0.33333333333333 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
19943  +Clus2 = Clus2+0.33333333333333 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
19944  +Clus28 = Clus28+-0.33333333333333 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
19945  +Clus28 = Clus28+0.33333333333333 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
19946  +Clus2 = Clus2+0.33333333333333 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
19947  +Clus28 = Clus28+0.33333333333333 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
19948  +Clus7 = Clus7+0.32661485207285 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
19949  +Clus5 = Clus5+0.33333333333333 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
NOTE: %INCLUDE (level 1) ending.
19950   run;
 
NOTE: DATA STEP view saved on file EMWS2.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
19951   quit;
19952   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
19953   filename emflow "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\VarClus\EMFLOWSCORE.sas";
19954   *------------------------------------------------------------*;
19955   * VarClus: Scoring VALIDATE data;
19956   *------------------------------------------------------------*;
19957   data EMWS2.VarClus_VALIDATE
19958   / view=EMWS2.VarClus_VALIDATE
19959   ;
19960   set EMWS2.Part_VALIDATE
19961   ;
19962   %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\VarClus\EMFLOWSCORE.sas.
19963  +*** Begin Class Look-up, Standardization, Replacement ;
19964  +
19965  +*** Generate dummy variables for BOTHPAYM ;
19966  +label BOTHPAYM0 = 'BOTHPAYM=0' ;
19967  +label BOTHPAYM1 = 'BOTHPAYM=1' ;
19968  +if missing( BOTHPAYM ) then do;
19969  +   BOTHPAYM0 = .;
19970  +   BOTHPAYM1 = .;
19971  +end;
19972  +else do;
19973  +   length _dm4 $ 4; drop _dm4 ;
19974  +   _dm4 = put( BOTHPAYM , $4. );
19975  +   %DMNORMIP( _dm4 )
19976  +   if _dm4 = '0'  then do;
19977  +      BOTHPAYM0 = 1;
19978  +      BOTHPAYM1 = 0;
19979  +   end;
19980  +   else if _dm4 = '1'  then do;
19981  +      BOTHPAYM0 = 0;
19982  +      BOTHPAYM1 = 1;
19983  +   end;
19984  +   else do;
19985  +      delete;
19986  +   end;
19987  +end;
19988  +
19989  +*** Generate dummy variables for CCPAYM ;
19990  +label CCPAYM0 = 'CCPAYM=0' ;
19991  +label CCPAYM1 = 'CCPAYM=1' ;
19992  +if missing( CCPAYM ) then do;
19993  +   CCPAYM0 = .;
19994  +   CCPAYM1 = .;
19995  +end;
19996  +else do;
19997  +   length _dm4 $ 4; drop _dm4 ;
19998  +   _dm4 = put( CCPAYM , $4. );
19999  +   %DMNORMIP( _dm4 )
20000  +   if _dm4 = '0'  then do;
20001  +      CCPAYM0 = 1;
20002  +      CCPAYM1 = 0;
20003  +   end;
20004  +   else if _dm4 = '1'  then do;
20005  +      CCPAYM0 = 0;
20006  +      CCPAYM1 = 1;
20007  +   end;
20008  +   else do;
20009  +      delete;
20010  +   end;
20011  +end;
20012  +
20013  +*** Generate dummy variables for PCPAYM ;
20014  +label PCPAYM0 = 'PCPAYM=0' ;
20015  +label PCPAYM1 = 'PCPAYM=1' ;
20016  +if missing( PCPAYM ) then do;
20017  +   PCPAYM0 = .;
20018  +   PCPAYM1 = .;
20019  +end;
20020  +else do;
20021  +   length _dm4 $ 4; drop _dm4 ;
20022  +   _dm4 = put( PCPAYM , $4. );
20023  +   %DMNORMIP( _dm4 )
20024  +   if _dm4 = '0'  then do;
20025  +      PCPAYM0 = 1;
20026  +      PCPAYM1 = 0;
20027  +   end;
20028  +   else if _dm4 = '1'  then do;
20029  +      PCPAYM0 = 0;
20030  +      PCPAYM1 = 1;
20031  +   end;
20032  +   else do;
20033  +      delete;
20034  +   end;
20035  +end;
20036  +
20037  +*** Generate dummy variables for METHPAYM ;
20038  +label METHPAYMCC = 'METHPAYM=CC' ;
20039  +label METHPAYMCK = 'METHPAYM=CK' ;
20040  +label METHPAYMDK = 'METHPAYM=DK' ;
20041  +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
20042  +*** encoding is sparse, initialize to zero;
20043  +METHPAYMCC = 0;
20044  +METHPAYMCK = 0;
20045  +METHPAYMDK = 0;
20046  +METHPAYMXBOT = 0;
20047  +if missing( METHPAYM ) then do;
20048  +   METHPAYMCC = .;
20049  +   METHPAYMCK = .;
20050  +   METHPAYMDK = .;
20051  +   METHPAYMXBOT = .;
20052  +end;
20053  +else do;
20054  +   length _dm4 $ 4; drop _dm4 ;
20055  +   _dm4 = put( METHPAYM , $4. );
20056  +   %DMNORMIP( _dm4 )
20057  +   if _dm4 = 'CC'  then do;
20058  +      METHPAYMCC = 1;
20059  +   end;
20060  +   else if _dm4 = 'CK'  then do;
20061  +      METHPAYMCK = 1;
20062  +   end;
20063  +   else if _dm4 = 'XBOT'  then do;
20064  +      METHPAYMXBOT = 1;
20065  +   end;
20066  +   else if _dm4 = 'DK'  then do;
20067  +      METHPAYMDK = 1;
20068  +   end;
20069  +   else do;
20070  +      delete;
20071  +   end;
20072  +end;
20073  +
20074  +*** End Class Look-up, Standardization, Replacement ;
20075  +
20076  +
20077  +/*-------------------------------------------------*/
20078  +/* Varclus Score Code Begins*/
20079  +/*-------------------------------------------------*/
20080  +
20081  +Clus1 = 0 ; /*---Cluster Component 1------ */
20082  +Clus2 = 0 ; /*---Cluster Component 2------ */
20083  +Clus3 = 0 ; /*---Cluster Component 3------ */
20084  +Clus4 = 0 ; /*---Cluster Component 4------ */
20085  +Clus5 = 0 ; /*---Cluster Component 5------ */
20086  +Clus6 = 0 ; /*---Cluster Component 6------ */
20087  +Clus7 = 0 ; /*---Cluster Component 7------ */
20088  +Clus8 = 0 ; /*---Cluster Component 8------ */
20089  +Clus9 = 0 ; /*---Cluster Component 9------ */
20090  +Clus10 = 0 ; /*---Cluster Component 10------ */
20091  +Clus11 = 0 ; /*---Cluster Component 11------ */
20092  +Clus12 = 0 ; /*---Cluster Component 12------ */
20093  +Clus13 = 0 ; /*---Cluster Component 13------ */
20094  +Clus14 = 0 ; /*---Cluster Component 14------ */
20095  +Clus15 = 0 ; /*---Cluster Component 15------ */
20096  +Clus16 = 0 ; /*---Cluster Component 16------ */
20097  +Clus17 = 0 ; /*---Cluster Component 17------ */
20098  +Clus18 = 0 ; /*---Cluster Component 18------ */
20099  +Clus19 = 0 ; /*---Cluster Component 19------ */
20100  +Clus20 = 0 ; /*---Cluster Component 20------ */
20101  +Clus21 = 0 ; /*---Cluster Component 21------ */
20102  +Clus22 = 0 ; /*---Cluster Component 22------ */
20103  +Clus23 = 0 ; /*---Cluster Component 23------ */
20104  +Clus24 = 0 ; /*---Cluster Component 24------ */
20105  +Clus25 = 0 ; /*---Cluster Component 25------ */
20106  +Clus26 = 0 ; /*---Cluster Component 26------ */
20107  +Clus27 = 0 ; /*---Cluster Component 27------ */
20108  +Clus28 = 0 ; /*---Cluster Component 28------ */
20109  +Clus29 = 0 ; /*---Cluster Component 29------ */
20110  +Clus30 = 0 ; /*---Cluster Component 30------ */
20111  +Clus31 = 0 ; /*---Cluster Component 31------ */
20112  +Clus32 = 0 ; /*---Cluster Component 32------ */
20113  +Clus33 = 0 ; /*---Cluster Component 33------ */
20114  +Clus34 = 0 ; /*---Cluster Component 34------ */
20115  +Clus35 = 0 ; /*---Cluster Component 35------ */
20116  +Clus6 = Clus6+0.31049469798101 * (ACTBUY - 0.99109663409337)/1.16003174926523;
20117  +Clus9 = Clus9+0.32502227037692 * (BUYPROP - 0.18928931964407)/0.25656954904129;
20118  +Clus32 = Clus32+0.27053392066665 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
20119  +Clus7 = Clus7+0.36779194981722 * (DAYLAST - 1182.17608189855)/1226.0780195912;
20120  +Clus29 = Clus29+0.32606352949113 * (DEPT01 - 0.50547541492166)/1.82274128473225;
20121  +Clus29 = Clus29+0.31475903553413 * (DEPT02 - 0.29257018768419)/1.15307534710204;
20122  +Clus29 = Clus29+0.35680641258699 * (DEPT03 - 1.08161935784085)/2.82203775857088;
20123  +Clus29 = Clus29+0.31539445831064 * (DEPT04 - 0.68006824879789)/2.28175674515779;
20124  +Clus29 = Clus29+0.29360569691748 * (DEPT05 - 0.54295020939972)/1.52515347226129;
20125  +Clus32 = Clus32+0.17644386618702 * (DEPT06 - 0.85925236544129)/1.98131768775175;
20126  +Clus31 = Clus31+0.21799066207907 * (DEPT07 - 0.02559329920893)/0.31536747776311;
20127  +Clus31 = Clus31+0.33993271338746 * (DEPT08 - 0.31512331316891)/1.29408639394269;
20128  +Clus31 = Clus31+0.34186033539386 * (DEPT09 - 0.2486427795874)/1.20923480324609;
20129  +Clus31 = Clus31+0.35421920019149 * (DEPT10 - 0.39066232356134)/1.7648701612552;
20130  +Clus31 = Clus31+0.28393608567866 * (DEPT11 - 0.15141926477431)/0.76300583506574;
20131  +Clus31 = Clus31+0.38386073638767 * (DEPT12 - 0.21448735846129)/0.89341788675275;
20132  +Clus32 = Clus32+0.21094125773847 * (DEPT13 - 1.30395532805956)/2.58742913517547;
20133  +Clus1 = Clus1+0.14612398962451 * (DEPT14 - 0.83527221963704)/2.18699342328426;
20134  +Clus1 = Clus1+0.09702913619723 * (DEPT15 - 0.28949899177912)/1.23869079532202;
20135  +Clus1 = Clus1+0.09670854836259 * (DEPT16 - 0.22491081123002)/1.0272304883634;
20136  +Clus1 = Clus1+0.08864693290338 * (DEPT17 - 0.19466418489219)/0.960753111967;
20137  +Clus34 = Clus34+0.68513998203611 * (DEPT18 - 0.1317512021095)/0.70116887678934;
20138  +Clus34 = Clus34+0.68513998203611 * (DEPT19 - 0.07324336900884)/0.59281735227563;
20139  +Clus32 = Clus32+0.0549670760145 * (DEPT20 - 0.02956413835892)/0.31025698407933;
20140  +Clus33 = Clus33+1 * (DEPT21 - 0.01821002016441)/0.24509272697267;
20141  +Clus32 = Clus32+0.23307614189926 * (DEPT22 - 2.12771831859779)/3.55134640550257;
20142  +Clus32 = Clus32+0.20251555040293 * (DEPT23 - 2.14223669923995)/3.81941288304535;
20143  +Clus32 = Clus32+0.17413334206296 * (DEPT24 - 0.64039087947882)/1.70711269742472;
20144  +Clus6 = Clus6+0.26635393730034 * (DEPT25 - 1.77676438653637)/4.75421718243184;
20145  +Clus9 = Clus9+0.18580207423567 * (DEPT26 - 0.19075539010392)/0.91270742425277;
20146  +Clus32 = Clus32+0.16412176293701 * (DEPT27 - 0.58712579494338)/1.55259848403997;
20147  +Clus4 = Clus4+0.41745197007519 * (DOLINDEA - 47.8585866898046)/37.591191668842;
20148  +Clus1 = Clus1+0.22176651741164 * (DOLINDET - 197.869031487513)/314.244548218948;
20149  +Clus3 = Clus3+0.34040516245314 * (DOLL24 - 45.4938073522568)/93.9875146751151;
20150  +Clus24 = Clus24+0.53431022831305 * (DOLLARQ01 - 3.60255901969908)/18.9572343997303;
20151  +Clus23 = Clus23+0.53635920804358 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
20152  +Clus11 = Clus11+0.53251837592186 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
20153  +Clus16 = Clus16+0.53398718553838 * (DOLLARQ04 - 4.67856274236079)/22.181986153492;
20154  +Clus17 = Clus17+0.53548666653293 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
20155  +Clus13 = Clus13+0.53337003658551 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
20156  +Clus25 = Clus25+0.53620252678703 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
20157  +Clus27 = Clus27+0.54119921647341 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
20158  +Clus22 = Clus22+0.5349541071483 * (DOLLARQ09 - 4.29424383434155)/20.7683103640237;
20159  +Clus10 = Clus10+0.53279724233879 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
20160  +Clus15 = Clus15+0.53532885078822 * (DOLLARQ11 - 4.15352411974562)/20.8177653006881;
20161  +Clus6 = Clus6+0.3683415196646 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
20162  +Clus26 = Clus26+0.54383527719424 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
20163  +Clus20 = Clus20+0.54398954027119 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
20164  +Clus8 = Clus8+0.53531614157592 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
20165  +Clus18 = Clus18+0.53714970024584 * (DOLLARQ16 - 7.79008624166279)/31.0104071776129;
20166  +Clus3 = Clus3+0.44436827521592 * (DOLLARQ17 - 5.57017403443461)/26.1415799982751;
20167  +Clus19 = Clus19+0.53306278493927 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
20168  +Clus14 = Clus14+0.53462067704059 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
20169  +Clus9 = Clus9+0.37631589198989 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
20170  +Clus21 = Clus21+0.53908041935557 * (DOLLARQ21 - 4.74636513106871)/24.2680885720031;
20171  +Clus12 = Clus12+0.53808320116509 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
20172  +Clus4 = Clus4+0.41538876032442 * (DOLNETDA - 45.411597554134)/36.1502695431938;
20173  +Clus1 = Clus1+0.22085514615169 * (DOLNETDT - 189.18095548317)/303.615750735173;
20174  +Clus1 = Clus1+0.19970567328905 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
20175  +Clus7 = Clus7+0.36779707552659 * (MONLAST - 38.7579959671164)/40.2783526824403;
20176  +Clus35 = Clus35+1 * (TENURE - 83.4682798200713)/60.0499642836247;
20177  +Clus24 = Clus24+0.53431022831305 * (TOTORDQ01 - 0.07833100666976)/0.31375640071534;
20178  +Clus23 = Clus23+0.53635920804358 * (TOTORDQ02 - 0.07383279044516)/0.30498525646648;
20179  +Clus11 = Clus11+0.53251837592187 * (TOTORDQ03 - 0.05841476655808)/0.25663649019308;
20180  +Clus16 = Clus16+0.53398718553838 * (TOTORDQ04 - 0.09058476810919)/0.33923460400983;
20181  +Clus17 = Clus17+0.53548666653293 * (TOTORDQ05 - 0.08766868310842)/0.32373427535999;
20182  +Clus13 = Clus13+0.53337003658551 * (TOTORDQ06 - 0.08068869241507)/0.31127041208068;
20183  +Clus25 = Clus25+0.53620252678703 * (TOTORDQ07 - 0.08583837443772)/0.3225455818214;
20184  +Clus27 = Clus27+0.54119921647341 * (TOTORDQ08 - 0.11782224290367)/0.39692742169452;
20185  +Clus22 = Clus22+0.5349541071483 * (TOTORDQ09 - 0.09120521172638)/0.32676782706381;
20186  +Clus10 = Clus10+0.53279724233879 * (TOTORDQ10 - 0.07501163331782)/0.2991488551838;
20187  +Clus15 = Clus15+0.53532885078822 * (TOTORDQ11 - 0.08630370715061)/0.31791570298113;
20188  +Clus6 = Clus6+0.38864318218989 * (TOTORDQ12 - 0.12619823173569)/0.4074226605598;
20189  +Clus26 = Clus26+0.54383527719424 * (TOTORDQ13 - 0.10832945556072)/0.35251925488707;
20190  +Clus20 = Clus20+0.54398954027119 * (TOTORDQ14 - 0.08894059252365)/0.31938115502111;
20191  +Clus8 = Clus8+0.53531614157592 * (TOTORDQ15 - 0.09821622460058)/0.342400248125;
20192  +Clus18 = Clus18+0.53714970024584 * (TOTORDQ16 - 0.14620753838994)/0.42506049526083;
20193  +Clus3 = Clus3+0.42389042465751 * (TOTORDQ17 - 0.108267411199)/0.35925036974258;
20194  +Clus19 = Clus19+0.53306278493927 * (TOTORDQ18 - 0.09319063130138)/0.32753587031264;
20195  +Clus14 = Clus14+0.53462067704059 * (TOTORDQ19 - 0.08217775709632)/0.30645832771871;
20196  +Clus9 = Clus9+0.40129080124664 * (TOTORDQ20 - 0.15985729796804)/0.46170113594525;
20197  +Clus21 = Clus21+0.53908041935557 * (TOTORDQ21 - 0.09182565534357)/0.32980785722872;
20198  +Clus12 = Clus12+0.53808320116509 * (TOTORDQ22 - 0.08611757406545)/0.31443413012517;
20199  +Clus1 = Clus1+0.21191459192951 * (UNITSIDD - 10.9602916085)/17.1055734908767;
20200  +Clus4 = Clus4+0.30018376965081 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
20201  +Clus30 = Clus30+1 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
20202  +Clus5 = Clus5+-0.33333333333333 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
20203  +Clus5 = Clus5+0.33333333333333 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
20204  +Clus2 = Clus2+-0.33333333333333 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
20205  +Clus2 = Clus2+0.33333333333333 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
20206  +Clus28 = Clus28+-0.33333333333333 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
20207  +Clus28 = Clus28+0.33333333333333 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
20208  +Clus2 = Clus2+0.33333333333333 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
20209  +Clus28 = Clus28+0.33333333333333 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
20210  +Clus7 = Clus7+0.32661485207285 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
20211  +Clus5 = Clus5+0.33333333333333 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
NOTE: %INCLUDE (level 1) ending.
20212   run;
 
NOTE: DATA STEP view saved on file EMWS2.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
20213   quit;
20214   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
20216   *------------------------------------------------------------*;
20217   * VarClus: Computing metadata for TRAIN data;
20218   *------------------------------------------------------------*;
 
NOTE: View EMWS2.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS2.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS2.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 20, 2017
Time:                02:48:16
*------------------------------------------------------------*
20621   %let EMEXCEPTIONSTRING=;
20622   *------------------------------------------------------------*;
20623   * REPORT: VarClus;
20624   *------------------------------------------------------------*;
20625   %let EM_ACTION = REPORT;
20626   %let syscc = 0;
20627
20628   %macro main;
20629
20630      filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
20631      %include temp;
20632      filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
20633      %include temp;
20634      filename temp;
20635
20636     %SetProperties;
20637
20638      %if %upcase(&EM_ACTION) = CREATE %then %do;
20639          filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
20640          %include temp;
20641          filename temp;
20642          %create;
20643      %end;
20644      %else
20645      %if %upcase(&EM_ACTION) = TRAIN %then %do;
20646           filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
20647              %include temp;
20648              filename temp;
20649              %train;
20650      %end;
20651      %else
20652      %if %upcase(&EM_ACTION) = SCORE %then %do;
20653              filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
20654              %include temp;
20655              filename temp;
20656              %score;
20657      %end;
20658      %else
20659      %if %upcase(&EM_ACTION) = REPORT %then %do;
20660              filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
20661              %include temp;
20662              filename temp;
20663              %report;
20664      %end;
20665      /*
20666      %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
20667          %put 'OPENING TABLE';
20668      %end;
20669      %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
20670          %put 'CLOSE TABLE';
20671      %end;
20672      */
20673   %mend main;
20674   %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
20675  +
20676  +/* Initialize property macro variables */
20677  +%macro SetProperties;
20678  +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
20679  +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
20680  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
20681  +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
20682  +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
20683  +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
20684  +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
20685  +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
20686  +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
20687  +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
20688  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
20689  +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
20690  +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
20691  +
20692  +%mend SetProperties;
20693  +
20694  +%Macro MakeDummyVariables(indata=,
20695  +                          outvar=,
20696  +                          outdata=,
20697  +                          fileref=,
20698  +                          recreatecmeta=N, /* optional */
20699  +                          incmeta=,     /* optional */
20700  +                          outcmeta=,    /* optional */
20701  +                          ndummyvars=_ndummyvars
20702  +                          );
20703  +    %global &ndummyvars;
20704  +
20705  +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
20706  +       class
20707  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20708  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20709  +    ;
20710  +    run;
20711  +    %let &ndummyvars = 0;
20712  +    data _null_;
20713  +    %let dsid = %sysfunc(open(work._classout));
20714  +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
20715  +    %let dsid = %sysfunc(close(&dsid));
20716  +    run;
20717  +
20718  +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
20719  +       input
20720  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20721  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20722  +        / level=nominal stdize=no;
20723  +       make outvar = &outvar;
20724  +       score data = &indata out =&outdata;
20725  +       code  file=  "&fileref";
20726  +    run;
20727  +    %if &recreatecmeta eq Y %then %do;
20728  +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
20729  +    data _tmpds;
20730  +        set _tmpds;
20731  +           ROLE = 'INPUT';
20732  +           LEVEL = 'INTERVAL';
20733  +           CREATOR='DMZIP';
20734  +           if NAME = '_TYPE_' then delete;
20735  +    run;
20736  +    data &outcmeta;
20737  +         set &incmeta _tmpds;
20738  +    run;
20739  +    %end;
20740  +    proc datasets lib=work nolist;
20741  +      delete  _dmdbdat _dmdbcat _classout
20742  +    %if &recreatecmeta eq Y %then %do;
20743  +    _tmpds
20744  +    %end;
20745  +    ;
20746  +    quit;
20747  +%Mend MakeDummyVariables;
20748  +
20749  +/*--- Determine Optimal Number of Cluster ----
20750  +%macro FindClusNum(statds=, groupds=, minvariation=);
20751  +   %global optnclus;
20752  +   data varclus_tmp(drop=_NAME_);
20753  +      set &statDs;
20754  +      where _type_ ='PROPOR';
20755  +   run;
20756  +   proc sort data=varclus_tmp;
20757  +      by _NCL_;
20758  +   run;
20759  +   proc transpose data=varclus_tmp out=varclus_tmp;
20760  +      by _NCL_;
20761  +      var %EM_INTERVAL_INPUT
20762  +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20763  +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
20764  +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
20765  +          %do i = 2 %to &nvar;
20766  +          %let varname = %sysfunc(varname(&dsid, &i));
20767  +          &varname
20768  +          %end;
20769  +      %end;
20770  +   ;
20771  +   run;
20772  +
20773  +   %if &minVariation eq %then %do;
20774  +       %let minVariation = &EM_PROPERTY_MINVARIATION;
20775  +   %end;
20776  +   %if ^(0<&minVariation<100) %then %do;
20777  +       %let minVariation = 90;
20778  +   %end;
20779  +
20780  +   data _null_;
20781  +      set varclus_tmp end=eof;
20782  +      by _NCL_;
20783  +      retain flag 0;
20784  +      if first._ncl_ then flag=0;
20785  +      if .<col1 < &minVariation then flag=1;
20786  +      if last._ncl_ and ^flag then do;
20787  +         call symput('OPTNCL', _ncl_);
20788  +         stop;
20789  +      end;
20790  +     if eof then call symput('OPTNCL', _ncl_);
20791  +   run;
20792  +
20793  +   %let optnclus = &OPTNCL;
20794  +
20795  +   data varclus_tmp(drop=_NCL_ _NAME_);
20796  +      set &statDs;
20797  +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
20798  +   run;
20799  +   proc sort data=varclus_tmp;
20800  +      by _TYPE_;
20801  +   run;
20802  +   proc transpose data=varclus_tmp out=varclus_tmp;
20803  +      by _TYPE_;
20804  +   run;
20805  +   proc sort data=varclus_tmp;
20806  +      by _name_ _type_;
20807  +   run;
20808  +
20809  +  proc transpose data=varclus_tmp out=&groupds;
20810  +      by _NAME_;
20811  +   run;
20812  +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
20813  +      by Cluster descending Rsquare;
20814  +      where Cluster ne 0;
20815  +   run;
20816  +   proc datasets lib=work nolist mt=(DATA VIEW);
20817  +      delete varclus_tmp;
20818  +   run;
20819  +   quit;
20820  +%mend findClusNum;
20821  +*/
20822  +
20823  +%macro getNclusfromTrain(inoutstat=, nc=);
20824  +%global &nc;
20825  +data _null_;
20826  +    set &inoutstat end=eof;
20827  +    if eof then do;
20828  +    call symput("&nc", _ncl_);
20829  +    end;
20830  +run;
20831  +%mend  getNclusfromTrain;
20832  +
20833  +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
20834  +
20835  +     *--- Build Code to Modify Metadata ---*;
20836  +     filename X "&deltacodefile";
20837  +     data _null_;
20838  +        FILE X;
20839  +        set &groupds end=eof;
20840  +        /*by Cluster;*/
20841  +         if _N_=1 then do;
20842  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20843  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
20844  +           %end;
20845  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
20846  +           put "if upcase(strip(NAME)) in (";
20847  +        end;
20848  +        if Strip(upcase(Selected)) eq 'YES' then do;
20849  +           string = '"'!!trim(left(VARIABLE))!!'"';
20850  +           put string;
20851  +        end;
20852  +        if eof then do;
20853  +           put ') then ROLE="INPUT";';
20854  +           put 'else ROLE="REJECTED";';
20855  +           put 'end;';
20856  +
20857  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
20858  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
20859  +           %end;
20860  +        end;
20861  +     run;
20862  +     quit;
20863  +
20864  +     filename X;
20865  +
20866  +     quit;
20867  +%mend MakeDeltaCode;
20868  +
20869  +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
20870  +    %if ^%sysfunc(exist(&statds)) %then %do;
20871  +         %goto doendc;
20872  +    %end;
20873  +
20874  +    data &corrds(drop=_TYPE_ _NCL_) ;
20875  +       set &statds;
20876  +       where _type_ eq 'CORR' ;
20877  +    run ;
20878  +    proc sort data=&corrds;
20879  +       by _NAME_ ;
20880  +    run ;
20881  +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
20882  +      BY _NAME_ ;
20883  +    run ;
20884  +    data &corrplotds;
20885  +       length _Y_ $100;
20886  +       set &corrplotDs;
20887  +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
20888  +    run ;
20889  +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
20890  +       set &corrplotds;
20891  +       where _LABEL_ ne '' ;
20892  +       keep _TMP_ _LABEL_ ;
20893  +    run ;
20894  +    data _null_;
20895  +       nobs=0;
20896  +       dsid = open('varclus_match');
20897  +       if dsid then do;
20898  +          nobs = attrn(dsid, 'NOBS');
20899  +          dsid = close(dsid);
20900  +       end;
20901  +       call symput ('CORR_NOBS', nobs);
20902  +    run;
20903  +    %if &corr_nobs %then %do;
20904  +        proc sort data=varclus_match;
20905  +           by _name_;
20906  +        run ;
20907  +        proc sort data=&corrplotds;
20908  +           by _name_;
20909  +        run ;
20910  +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
20911  +           merge varclus_match &corrplotds;
20912  +           by _NAME_ ;
20913  +           if _X_ eq '' then _X_=_NAME_ ;
20914  +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20915  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20916  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20917  +
20918  +       run ;
20919  +    %end;
20920  +    %else %do;
20921  +        proc sort data=&corrplotds;
20922  +           by _name_;
20923  +        run ;
20924  +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
20925  +           set &corrplotds;
20926  +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20927  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20928  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20929  +
20930  +        run ;
20931  +    %end;
20932  +    proc sort data=&corrplotds;
20933  +       by _X_ _Y_;
20934  +    run ;
20935  +    proc datasets lib=work nolist mt=(DATA VIEW);
20936  +       delete varclus_match;
20937  +    run;
20938  +    quit;
20939  +
20940  +%doendc:
20941  +
20942  +%mend MakeVarClusCorrData;
20943  +
20944  +%macro MakeStatPlotData(statds= , outstatplotds=);
20945  +   %if %sysfunc(exist(&statds)) %then %do;
20946  +
20947  +       data varclus_tmp(drop=_NAME_ _NCL_) ;
20948  +          set &statDs;
20949  +          where _type_ in('MEAN', 'STD', 'N');
20950  +       run ;
20951  +       proc transpose data=varclus_tmp out=&outstatplotds;
20952  +          id _TYPE_ ;
20953  +       run ;
20954  +       data &outstatplotds;
20955  +          set &outstatplotds(obs=1000);
20956  +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
20957  +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
20958  +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
20959  +          else SCALEDSTD= STD ;
20960  +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
20961  +       run ;
20962  +       proc sort data=&outstatplotds;
20963  +          by descending SCALEDSTD ;
20964  +       run ;
20965  +       proc datasets lib=work nolist mt=(DATA VIEW);
20966  +          delete varclus_tmp;
20967  +       run;
20968  +       quit;
20969  +    %end;
20970  +
20971  +%mend MakeStatPlotData;
20972  +
20973  +
20974  +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
20975  +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
20976  +    data &EM_USER_OUTSTATSCORE;
20977  +          set &indata;
20978  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
20979  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
20980  +          if _TYPE_ = 'STD' then _NAME_='STD';
20981  +          DROP _TYPE_ _NCL_;
20982  +     run;
20983  +
20984  +     filename _file_  "&fileRef";
20985  +
20986  +     data _null_;
20987  +        FILE _file_ MOD;
20988  +        put ' ';
20989  +        put '/*-------------------------------------------------*/';
20990  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
20991  +        put '/*-------------------------------------------------*/';
20992  +        put ' ';
20993  +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
20994  +
20995  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
20996  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
20997  +
20998  +        %let k = 1;
20999  +        %do %while(^%sysfunc(fetch(&dsid)));
21000  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21001  +                %if &k > 2 %then %do;
21002  +                 %let cn = %eval(&k-2);
21003  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
21004  +                %end;
21005  +                %let k = %eval(&k+1);
21006  +        %end;
21007  +
21008  +        %let rc = %sysfunc(rewind(&dsid));
21009  +
21010  +        %do i= 2 %to &nvar;
21011  +            %let _varname =  %sysfunc(varname(&dsid, &i));
21012  +            %do %while(^%sysfunc(fetch(&dsid)));
21013  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21014  +                %if &_name = MEAN %then
21015  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
21016  +                %else %if &_name = STD %then
21017  +                %let _std = %sysfunc(getvarn(&dsid, &i));
21018  +                %else %do;
21019  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
21020  +                      %let abscoeff = %sysfunc(abs(&coeff));
21021  +                          %if &abscoeff >  0 %then %do;
21022  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21023  +                           %end;
21024  +                 %end;
21025  +             %end;
21026  +             %let rc = %sysfunc(rewind(&dsid));
21027  +         %end;
21028  +
21029  +        %let dsid= %sysfunc(close(&dsid));
21030  +       run;
21031  +%mend CreateScoreCode;
21032  +
21033  +
21034  +
21035  +/*----------------------------------------------------------
21036  +    Instead of using %MakeRSquareData,
21037  +    %MakeVarClusResultTable at macro2.source is used
21038  + +----------------------------------------------------------*/
21039  +
21040  +
21041  +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
21042  +
21043  +/* modifying  from ods rsquare = data */
21044  +
21045  +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
21046  +    Length Cluster $16;
21047  +    length Variable $32;
21048  +    Length VariableLabel $64;
21049  +    set &indata; retain CurrentCluster;
21050  +    if NumberOfClusters ^= &ncluster then delete;
21051  +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
21052  +    CurrentCluster = Cluster;
21053  +   run;
21054  +proc sort data =&outdata ;
21055  +     by Cluster RsquareRatio;
21056  +run;
21057  +data _tmprsq(drop=index);
21058  +     set &outdata; by Cluster;
21059  +     if first.Cluster then do;
21060  +     index = strip(scan(Cluster,2 ));
21061  +     Variable = "Clus"||index;
21062  +     VariableLabel = "Cluster Component "||index;
21063  +     OwnCluster = 1;
21064  +     NextClosest = .;
21065  +     RsquareRatio = 0;
21066  +     output;
21067  +     end;
21068  +run;
21069  +
21070  +proc sort data = _tmprsq ;
21071  +     by Cluster RsquareRatio;
21072  +run;
21073  +data &outdata;
21074  +     set &outdata _tmprsq;
21075  +by Cluster;
21076  +run;
21077  +
21078  +
21079  +/* Just create the Selected variable with all YES */
21080  +
21081  +data &outdata;
21082  +    set &outdata; by cluster;
21083  +    length Selected $8;
21084  +    Selected = 'YES';
21085  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21086  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21087  +    rename OwnCluster = RSqWithClusterComp;
21088  +    rename NextClosest = RSqWithNextClusComp;
21089  +run;
21090  +
21091  +
21092  +/* Selected = Y/N will be done %score section -----
21093  +
21094  +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
21095  +data &outdata;
21096  +    set &outdata; by cluster;
21097  +    length Selected $8;
21098  +    if first.Cluster then Selected = 'YES';
21099  +    else Selected = 'NO';
21100  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21101  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21102  +    rename OwnCluster = RSqWithClusterComp;
21103  +    rename NextClosest = RSqWithNextClusComp;
21104  +run;
21105  +%end;
21106  +%else %do;
21107  +data &outdata;
21108  +    set &outdata; by cluster;
21109  +    if last.Cluster then Selected = 'YES';
21110  +    else Selected = 'NO';
21111  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21112  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21113  +    rename OwnCluster = RSqWithClusterComp;
21114  +    rename NextClosest = RSqWithNextClusComp;
21115  +run;
21116  +%end;
21117  +---------------------------------------------------------------*/
21118  +
21119  +%if %sysfunc(exist(&inClusRSquare)) %then %do;
21120  +/* to calculate NextClosestClusRsq */
21121  +proc transpose data = &inClusRSquare  out=_clusRsq;
21122  +      by cluster;
21123  +      run;
21124  +data _clusRsq;
21125  +     set _clusRsq;
21126  +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
21127  +run;
21128  +
21129  +proc sort data=_clusRsq;
21130  +    by cluster col1;
21131  +    run;
21132  +data _clusRsq(drop=_NAME_ _LABEL_);
21133  +     set _clusRsq; by cluster;
21134  +     if last.Cluster then output;
21135  +     label  COL1 = 'R-Sqaure with Next Cluster Component';
21136  +     rename COL1 = RSqWithNextClusComp;
21137  +     rename Cluster = Variable;
21138  +     label  Cluster = "Variable";
21139  +run;
21140  +
21141  +proc sort data =&outdata;
21142  +     by Variable;
21143  +run;
21144  +data &outdata;
21145  +    merge &outdata _clusRsq;
21146  +    by Variable;
21147  +run;
21148  +proc sort data =&outdata;
21149  +by Cluster  RsquareRatio;
21150  +run;
21151  +quit;
21152  +%end;
21153  +
21154  +proc datasets lib = work nolist;
21155  +     delete _tmprsq _clusRsq;
21156  +     run;
21157  +quit;
21158  +
21159  +%mend MakeRSquareData;
21160  +
21161  +
21162  +/*-------------------------------------------------------------------------*/
21163  +
21164  +
21165  +
21166  +%macro ModifyCorr(indata=,
21167  +                  outdata=,
21168  +                  rsquare = Y
21169  +                  );
21170  +    data corr_tmp;
21171  +        set &indata;
21172  +    run;
21173  +     proc sql;
21174  +           update &indata
21175  +           set
21176  +     %let dsid = %sysfunc(open(work.corr_tmp));
21177  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21178  +          %do i = 4 %to &nvar;
21179  +          %let _name = %sysfunc(varname(&dsid, &i));
21180  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21181  +            %else  %let _name_md = &_name;
21182  +            %if &i < &nvar %then %do;
21183  +               &_name = 1- &_name_md ,
21184  +            %end;
21185  +            %else %do;
21186  +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
21187  +            %end;
21188  +          %end;
21189  +      %let dsid= %sysfunc(close(&dsid));
21190  +
21191  +      select * from &indata;
21192  +      run;
21193  +      proc datasets lib = work nolist;
21194  +           delete corr_tmp;
21195  +      run;
21196  +      quit;
21197  +
21198  + %mend ModifyCorr;
21199  +
21200  + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
21201  +    data &outdata(drop= _NCL_  _TYPE_);
21202  +       set &indata;
21203  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21204  +       rename _NAME_ = Cluster;
21205  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21206  +    run;
21207  +    %if &RSquare eq Y %then %do;
21208  +     data corr_tmp;
21209  +        set &outdata;
21210  +     run;
21211  +
21212  +     data &outdata(drop=i);
21213  +          set &outdata;
21214  +          %let dsid = %sysfunc(open(work.corr_tmp));
21215  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21216  +          %do i = 2 %to &nvar;
21217  +            %let _name = %sysfunc(varname(&dsid, &i));
21218  +            %let _name_md = &_name.**2;
21219  +                &_name = &_name_md;
21220  +          %end;
21221  +      %let dsid= %sysfunc(close(&dsid));
21222  +      run;
21223  +      proc datasets lib = work nolist;
21224  +           delete corr_tmp;
21225  +      run;
21226  +
21227  +    %end;
21228  +     quit;
21229  +%mend MakeClusStructCorrData;
21230  +
21231  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
21232  +    data &outdata(drop= _NCL_  _TYPE_);
21233  +       set &indata;
21234  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21235  +       rename _NAME_ = Cluster;
21236  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21237  +    run;
21238  +    data corr_tmp;
21239  +        set &outdata;
21240  +    run;
21241  +
21242  +    %let dsid = %sysfunc(open(work.corr_tmp));
21243  +    %let nclus2= %eval(&ncluster+1);
21244  +    data &outdata;
21245  +         set &outdata;
21246  +          %do i = 2 %to &nclus2;
21247  +          %let i_1 = %eval(&i-1);
21248  +            %let _name = %sysfunc(varname(&dsid, &i));
21249  +            %let _newName = Clus&i_1;
21250  +                rename &_name = &_newName; ;
21251  +                *label &_name ="Cluster &i_1";
21252  +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21253  +          %end;
21254  +          keep Cluster
21255  +          %do i = 2 %to &nclus2;
21256  +                %let _name = %sysfunc(varname(&dsid, &i));
21257  +                &_name
21258  +          %end;
21259  +          ;
21260  +    %let dsid= %sysfunc(close(&dsid));
21261  +     run;
21262  +     quit;
21263  +
21264  +    %if &RSquare eq Y %then %do;
21265  +
21266  +       data corr_tmp;
21267  +        set &outdata;
21268  +     run;
21269  +
21270  +     data &outdata(drop=i);
21271  +          set &outdata;
21272  +          %let dsid = %sysfunc(open(work.corr_tmp));
21273  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21274  +          %do i = 2 %to &nvar;
21275  +            %let _name = %sysfunc(varname(&dsid, &i));
21276  +            %let _name_md = &_name.**2;
21277  +                &_name = &_name_md;
21278  +          %end;
21279  +      %let dsid= %sysfunc(close(&dsid));
21280  +      run;
21281  +    %end;
21282  +
21283  +    %if &makeplotds eq Y %then %do;
21284  +     proc transpose data = &outdata
21285  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21286  +          by cluster;
21287  +     run;
21288  +     data &plotds;
21289  +          set  &plotds;
21290  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21291  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21292  +     run;
21293  +     %end;
21294  +     proc datasets lib = work nolist;
21295  +           delete corr_tmp;
21296  +     run;
21297  +     quit;
21298  +%mend MakeInterClusCorrData;
21299  +
21300  +
21301  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21302  +
21303  +data &outlink(drop = Selected);
21304  +     set &indata;
21305  +     LINKID = _N_;
21306  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21307  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21308  +run;
21309  +data &outnode(keep=NODEID TYPE LABEL);
21310  +    set &indata;
21311  +    length TYPE $16;
21312  +    rename Variable = NODEID;
21313  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21314  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21315  +    then  TYPE = "CLUSTER";
21316  +    else  TYPE="VARIABLE";
21317  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21318  +run;
21319  +quit;
21320  +%mend MakeClusConstellData;
21321  +
21322  +
21323  +
21324  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21325  +
21326  +data &outlink(drop = Selected);
21327  +     set &indata;
21328  +     LINKID = _N_;
21329  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21330  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21331  +run;
21332  +data &outnode(keep=NODEID TYPE LABEL);
21333  +    set &indata;
21334  +    length TYPE $16;
21335  +    rename Variable = NODEID;
21336  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21337  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21338  +    then  TYPE = "CLUSTER";
21339  +    else  TYPE="VARIABLE";
21340  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21341  +run;
21342  +quit;
21343  +%mend MakeClusConstellData;
21344  +
21345  +
21346  +/*--- This will work only when inds is not a view data -------
21347  +
21348  +%macro getNVarNObs(inds=, nvar=, nobs=);
21349  +
21350  +    %global &nvar;
21351  +    %global &nobs;
21352  +    data _null_;
21353  +         dsid = open("&inds");
21354  +         nv = attrn(dsid, 'NVAR');
21355  +         no = attrn(dsid, 'NOBS');
21356  +         dsid = close(dsid);
21357  +         call symput("&nvar", nv);
21358  +         call symput("&nobs", no);
21359  +    run;
21360  +    quit;
21361  +%mend  getNVarNObs;
21362  +
21363  ++---------------------------------------------------------------*/
21364  +
21365  +
21366  +%macro getNVar(inds=, nvar=);
21367  +    %global &nvar;
21368  +    data _null_;
21369  +         dsid = open("&inds");
21370  +         nv = attrn(dsid, 'NVAR');
21371  +         dsid = close(dsid);
21372  +         call symput("&nvar", nv);
21373  +    run;
21374  +    quit;
21375  +%mend  getNVar;
21376  +
21377  +
21378  +
21379  +%macro getNObs(inds=, nobs=);
21380  +    %global &nobs;
21381  +    data _null_;
21382  +        set &inds end=eof;
21383  +        if eof then call symput("&nobs", _N_);
21384  +    run;
21385  +    quit;
21386  +%mend  getNObs;
21387  +
21388  +%Macro CreateVarclusMeta(trainnum=);
21389  +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21390  +    data &EM_USER_VARCLUSMETA;
21391  +         length TrainNum 8.;
21392  +         length NewTrain $8;
21393  +         length NGCluster 8.;
21394  +         length ExportedComp $16;
21395  +         length HideVariable $8;
21396  +         TrainNum = &trainnum;
21397  +         NewTrain = "Y";
21398  +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
21399  +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
21400  +         NGCluster = 0; /* zero means no twostage */
21401  +   run;
21402  +   quit;
21403  +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
21404  +
21405  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
21406  +    data &outdata(drop= _NCL_  _TYPE_);
21407  +       set &indata;
21408  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21409  +       %if &globalclusid ne %then %do;
21410  +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21411  +       rename _NAME_ = Cluster;
21412  +       %end;
21413  +       %else %do;
21414  +        _NAME_ = upcase(_NAME_);
21415  +       rename _NAME_ = Cluster;
21416  +       %end;
21417  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21418  +    run;
21419  +    data corr_tmp;
21420  +        set &outdata;
21421  +    run;
21422  +
21423  +    %let dsid = %sysfunc(open(work.corr_tmp));
21424  +    %let nclus2= %eval(&ncluster+1);
21425  +    data &outdata;
21426  +         set &outdata;
21427  +          %do i = 2 %to &nclus2;
21428  +          %let i_1 = %eval(&i-1);
21429  +            %let _name = %sysfunc(varname(&dsid, &i));
21430  +            %if &globalclusid ne %then
21431  +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
21432  +                     rename &_name = &_newName;
21433  +                     *label &_name ="GC &globalclusid : Cluster &i_1";
21434  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
21435  +                %end;
21436  +            %else
21437  +                %do; %let _newName = CLUS&i_1;
21438  +                     rename &_name = &_newName;
21439  +                     *label &_name ="Cluster &i_1";
21440  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21441  +                %end;
21442  +          %end;
21443  +          keep Cluster
21444  +          %do i = 2 %to &nclus2;
21445  +                %let _name = %sysfunc(varname(&dsid, &i));
21446  +                &_name
21447  +          %end;
21448  +          ;
21449  +    %let dsid= %sysfunc(close(&dsid));
21450  +     run;
21451  +     quit;
21452  +
21453  +    %if &RSquare eq Y %then %do;
21454  +
21455  +       data corr_tmp;
21456  +        set &outdata;
21457  +     run;
21458  +
21459  +     data &outdata;
21460  +          set &outdata;
21461  +          %let dsid = %sysfunc(open(work.corr_tmp));
21462  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21463  +          %do i = 2 %to &nvar;
21464  +            %let _name = %sysfunc(varname(&dsid, &i));
21465  +            %let _name_md = &_name.**2;
21466  +                &_name = &_name_md;
21467  +          %end;
21468  +      %let dsid= %sysfunc(close(&dsid));
21469  +      run;
21470  +    %end;
21471  +
21472  +    %if &makeplotds eq Y %then %do;
21473  +     proc transpose data = &outdata
21474  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21475  +          by cluster;
21476  +     run;
21477  +     data &plotds;
21478  +          set  &plotds;
21479  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21480  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21481  +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21482  +     run;
21483  +     %end;
21484  +     proc datasets lib = work nolist;
21485  +           delete corr_tmp;
21486  +     run;
21487  +     quit;
21488  +%mend MakeInterClusCorrData;
21489  +
21490  +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
21491  +    data _tmpds(drop= _NCL_);
21492  +       set &indata;
21493  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
21494  +       %if &globalclusid ne %then %do;
21495  +           _NAME_ = "GC&globalclusid.";
21496  +       rename _NAME_ = Cluster;
21497  +       %end;
21498  +       %else %do;
21499  +        _NAME_ = "CLUS";
21500  +        rename _NAME_ = Cluster;
21501  +       %end;
21502  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21503  +    run;
21504  +    proc transpose data =_tmpds out =&outdata;
21505  +    run;
21506  +
21507  +    data &outdata(drop=COL1);
21508  +        %if &globalclusid ne %then %do;
21509  +        length GCluster $16;
21510  +        %end;
21511  +        length Cluster $32;
21512  +        length _NAME_ $32;
21513  +         set &outdata;
21514  +         _NAME_ = upcase(_NAME_);
21515  +         rename _NAME_=Variable;
21516  +         *label _NAME_="Variable";
21517  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21518  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21519  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21520  +
21521  +         %if &globalclusid ne %then %do;
21522  +          GCluster = "GC&globalclusid";
21523  +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
21524  +         %end;
21525  +         %else %do;
21526  +         Cluster = "CLUS"||strip(COL1);
21527  +        %end;
21528  +         rename COL2 = RSqWithOwnClusComp;
21529  +         *label COL2 = "R-Square With Own Cluster Component";
21530  +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21531  +
21532  +   run;
21533  +   proc sort data =&outdata;
21534  +        by Cluster RSqWithOwnClusComp;
21535  +   run;
21536  +   proc datasets lib = work nolist;
21537  +           delete _tmpds;
21538  +   run;
21539  +   quit;
21540  +%mend MakeOwnRSquare;
21541  +
21542  +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
21543  +    data &outdata(drop= _NCL_  _TYPE_);
21544  +       %if &globalclusid ne %then %do;
21545  +        length GCluster $16;
21546  +        %end;
21547  +       set &indata;
21548  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21549  +       %if &globalclusid ne %then %do;
21550  +         GCluster = "GC&globalclusid";
21551  +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21552  +         rename _NAME_ = Cluster;
21553  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21554  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21555  +
21556  +       %end;
21557  +       %else %do;
21558  +         _NAME_ = upcase(_NAME_);
21559  +         rename _NAME_ = Cluster;
21560  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21561  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21562  +
21563  +       %end;
21564  +     run;
21565  +    %if &RSquare eq Y %then %do;
21566  +     data corr_tmp;
21567  +          set &outdata;
21568  +     run;
21569  +     %let istart = 2;
21570  +     %if &globalclusid ne %then %let istart = 3;
21571  +     data &outdata;
21572  +          set &outdata;
21573  +          %let dsid = %sysfunc(open(work.corr_tmp));
21574  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21575  +          %do i =&istart %to &nvar;
21576  +            %let _name = %sysfunc(varname(&dsid, &i));
21577  +            %let _name_md = &_name.**2;
21578  +                &_name = &_name_md;
21579  +          %end;
21580  +      %let dsid= %sysfunc(close(&dsid));
21581  +      run;
21582  +      proc datasets lib = work nolist;
21583  +           delete corr_tmp;
21584  +      run;
21585  +    %end;
21586  +     quit;
21587  +%mend MakeClusStructCorrData;
21588  +
21589  +/*
21590  +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
21591  +*/
21592  +
21593  +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
21594  +
21595  +     /* The indata should be the outdata
21596  +        from %MakeClusStructCorrData(indata=, outdata=, ); */
21597  +
21598  +     proc sort data =&indata out=_tmpclusRsq;
21599  +     by cluster;
21600  +     run;
21601  +
21602  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21603  +      by cluster;
21604  +     run;
21605  +
21606  +     proc sort data=_tmpclusRsq;
21607  +        by _NAME_ COL1;
21608  +     run;
21609  +
21610  +     data _tmpclusRsq;
21611  +         length _NAME_ $32;
21612  +         set _tmpclusRsq; by _NAME_;
21613  +          _NAME_ = upcase(_NAME_);
21614  +          %if &ncluster ne 1 %then %do;
21615  +             if last._NAME_ then delete;
21616  +          %end;
21617  +          %else %do;
21618  +             COL1 = 0;
21619  +          %end;
21620  +     run;
21621  +     /* need to sort again */
21622  +     proc sort data=_tmpclusRsq;
21623  +        by _NAME_ COL1;
21624  +     run;
21625  +
21626  +     data &outdata;
21627  +         set _tmpclusRsq; by _NAME_;
21628  +         Cluster = upcase(Cluster);
21629  +         if last._NAME_ then output;
21630  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21631  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21632  +         rename COL1 = RSqWithNextClusComp;
21633  +         Cluster = upcase(Cluster);
21634  +         rename Cluster = ClosestCluster;
21635  +         *label  Cluster = "Next Closest Cluster";
21636  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21637  +         rename _NAME_ = Variable;
21638  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21639  +    run;
21640  +
21641  +
21642  +    %if &globalclusid ne %then %do;
21643  +    data &outdata;
21644  +       length GCluster $16;
21645  +       set &outdata;
21646  +       GCluster = "GC&globalclusid";
21647  +       run;
21648  +    %end;
21649  +    proc datasets lib = work nolist;
21650  +           delete _tmpclusRsq;
21651  +    run;
21652  +    quit;
21653  +%mend FindNextClosestClusByVar;
21654  +
21655  +
21656  +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
21657  +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
21658  +     proc sort data =&indata out=_tmpclusRsq;
21659  +     by cluster;
21660  +     run;
21661  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21662  +     by cluster;
21663  +     run;
21664  +     proc sort data=_tmpclusRsq;
21665  +        by _NAME_ col1;
21666  +     run;
21667  +     data _tmpclusRsq;
21668  +         length _NAME_ $32;
21669  +         set _tmpclusRsq; by _NAME_;
21670  +          _NAME_ = upcase(_NAME_);
21671  +          %if &ncluster ne 1 %then %do;
21672  +             if last._NAME_ then delete;
21673  +          %end;
21674  +          %else %do;
21675  +             COL1 = 0;
21676  +          %end;
21677  +     run;
21678  +     data &outdata;
21679  +         set _tmpclusRsq; by _NAME_;
21680  +         Cluster = upcase(Cluster);
21681  +         if last._NAME_ then output;
21682  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21683  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21684  +         rename COL1 = RSqWithNextClusComp;
21685  +         Cluster = upcase(Cluster);
21686  +         rename Cluster = ClosestCluster;
21687  +         *label  Cluster = "Next Closest Cluster";
21688  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21689  +         rename _NAME_ = Variable;
21690  +         *label  _NAME_ = "Variable";
21691  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21692  +
21693  +    run;
21694  +    %if &globalclusid ne %then %do;
21695  +    data &outdata;
21696  +       length GCluster $16;
21697  +       set &outdata;
21698  +       GCluster = "GC&globalclusid";
21699  +       run;
21700  +    %end;
21701  +
21702  +    proc datasets lib = work nolist;
21703  +           delete _tmpclusRsq;
21704  +    run;
21705  +
21706  +    quit;
21707  +%mend FindNextClosestClusByCluster;
21708  +
21709  +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
21710  +/*----
21711  +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
21712  +-----------*/
21713  +
21714  +proc sort data =&indata1;
21715  +    by Variable;
21716  +run;
21717  +proc sort data =&indata2;
21718  +    by Variable;
21719  +run;
21720  +data &outdata;
21721  +    merge &indata1 &indata2;
21722  +    by Variable;
21723  +    length Type $16;
21724  +    Type = 'Variable';
21725  +    *label Type ='Type';
21726  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21727  +run;
21728  +
21729  +
21730  +data &indata3;
21731  +    set  &indata3 ;
21732  +    length RSqWithOwnClusComp 8.;
21733  +    Cluster = Variable;
21734  +    RSqWithOwnClusComp = 1;
21735  +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
21736  +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21737  +    length Type $16;
21738  +    Type = 'ClusterComp';
21739  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21740  +
21741  +;
21742  +run;
21743  +
21744  +proc sort data=&outdata;
21745  +    by Cluster;
21746  +run;
21747  +proc sort data =&indata3;
21748  +    by Cluster;
21749  +run;
21750  +
21751  +data &outdata;
21752  +     set &outdata &indata3;
21753  +     by Cluster;
21754  +run;
21755  +
21756  +
21757  +/* Create the Selected variable with all YES */
21758  +
21759  +data &outdata;
21760  +     set &outdata;
21761  +     length RsqRatio 8.;
21762  +     length Selected $8;
21763  +     *label RSqRatio = "1-R**2 Ratio";
21764  +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
21765  +     *label Selected = "Variable Selected";
21766  +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
21767  +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
21768  +     Selected ='YES';
21769  +     rename _LABEL_ = Label;
21770  +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21771  +run;
21772  +
21773  +
21774  +/*----  Selected = Y/N will be assigened at the %score                   -------+
21775  +        Just create the Selected variable with all YES at the step above
21776  + +------------------------------------------------------------------------------+
21777  +
21778  +proc sort data=&outdata;
21779  +    by Cluster RsqRatio;
21780  +run;
21781  +
21782  +%if &selectedcomp eq CLUSTERCOMP %then %do;
21783  +data &outdata;
21784  +     set &outdata; by Cluster;
21785  +     length Selected $8;
21786  +     label Selected = "Variable Selected";
21787  +     if  first.Cluster then Selected ='Yes';
21788  +     else Selected = 'No';
21789  +    run;
21790  +%end;
21791  +%else %do;
21792  +data &outdata(drop = _var _varchange);
21793  +     set &outdata; retain _var 0; by Cluster;
21794  +     length Selected $8;
21795  +     label Selected = "Variable Selected";
21796  +     if first.Cluster then  _varchange = 0;
21797  +     else _varchange =1;
21798  +     if _var ne _varchange then  Selected  = 'Yes';
21799  +     else Selected = 'No';
21800  +     if last.cluster then  _var = 0;
21801  +     else _var = _varchange;
21802  +run;
21803  +%end;
21804  +
21805  +--------------------------------------------------------------*/
21806  +
21807  +quit;
21808  +%mend MakeVarClusResultTable;
21809  +
21810  +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
21811  +     proc sort data =&indata;
21812  +        by cluster;
21813  +     run;
21814  +     proc transpose data =&indata
21815  +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21816  +          by cluster;
21817  +     run;
21818  +     data &outdata;
21819  +          set  &outdata;
21820  +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21821  +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21822  +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
21823  +     run;
21824  +     %if &globalclusid ne %then %do;
21825  +     data &outdata;
21826  +          Length GCluster $16;
21827  +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21828  +          set  &outdata;
21829  +          GCluster ="GC&globalclusid.";
21830  +          run;
21831  +     %end;
21832  +
21833  +%Mend MakePlotDataFromCorrTable;
21834  +
21835  +
21836  +%macro MakeCorrelation(indata=,
21837  +                       outstat=_tmpoutstat,
21838  +                       corrmatrix=N,
21839  +                       outcorr=_tmpoutcorr,
21840  +                       includeclassvar=N,
21841  +                       target=,
21842  +                       freq=,
21843  +                       weight=);
21844  +   %if &target eq  %then %do;
21845  +
21846  +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
21847  +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
21848  +       %if &includeclassvar eq Y %then %do;
21849  +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21850  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21851  +          %do i = 2 %to &nvar;
21852  +          %let varname = %sysfunc(varname(&dsid, &i));
21853  +          &varname
21854  +          %end;
21855  +       %end;
21856  +       ;
21857  +      %if &freq ne  %then %do;
21858  +          freq &freq;
21859  +      %end;
21860  +      %if &weight ne  %then %do;
21861  +          weight &weight;
21862  +      %end;
21863  +
21864  +      run;
21865  +      %if &corrmatrix eq Y %then %do;
21866  +      data  &outcorr (drop = _NCL_ _TYPE_);
21867  +           set  &outstat ;
21868  +           if _TYPE_ ='CORR' then output;
21869  +      run;
21870  +      %end;
21871  +    %end;
21872  +    %else %do;
21873  +       proc corr data=&indata outp=&outstat noprint;
21874  +            var
21875  +       %let dsid = %sysfunc(open(&indata));
21876  +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
21877  +          %do i = 1 %to &nvar;
21878  +              %let _name = %sysfunc(varname(&dsid, &i));
21879  +              %if &_name ne &target %then;
21880  +              &_name
21881  +           %end;
21882  +        %let dsid= %sysfunc(close(&dsid));
21883  +        ;
21884  +        with &target;
21885  +        run;
21886  +    %end;
21887  +    quit;
21888  +%mend MakeCorrelation;
21889  +
21890  +
21891  +%macro MakeCorrelationDistance(indata=,
21892  +                               outdata=,
21893  +                               rsquare = N
21894  +                               );
21895  +    data corr_tmp;
21896  +        set &indata;
21897  +        if _N_ = 1 then do;
21898  +           output;
21899  +           stop;
21900  +         end;
21901  +    run;
21902  +    %if &outdata ne  %then %let  _outdata = &outdata;
21903  +    %else %let _outdata = &indata;
21904  +
21905  +    data &_outdata;
21906  +         set &indata;
21907  +
21908  +         %let dsid = %sysfunc(open(work.corr_tmp));
21909  +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
21910  +          %do i = 2 %to &nvar;
21911  +              %let _name = %sysfunc(varname(&dsid, &i));
21912  +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
21913  +              %else  %let _name_md = &_name;
21914  +              &_name = 1- &_name_md;
21915  +          %end;
21916  +      %let dsid= %sysfunc(close(&dsid));
21917  +      run;
21918  +      proc datasets lib = work nolist;
21919  +           delete corr_tmp;
21920  +      run;
21921  +      quit;
21922  +  %mend MakeCorrelationDistance;
21923  +
21924  +
21925  +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
21926  +                                   rsquare = N
21927  +                                   );
21928  +    data corr_tmp;
21929  +        set &indata;
21930  +    run;
21931  +    proc sql noprint;
21932  +           update &indata
21933  +           set
21934  +     %let dsid = %sysfunc(open(work.corr_tmp));
21935  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21936  +          %do i = 4 %to &nvar;
21937  +          %let _name = %sysfunc(varname(&dsid, &i));
21938  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21939  +            %else  %let _name_md = &_name;
21940  +            %if &i < &nvar %then %do;
21941  +               &_name = 1- &_name_md ,
21942  +            %end;
21943  +            %else %do;
21944  +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
21945  +            %end;
21946  +          %end;
21947  +      %let dsid= %sysfunc(close(&dsid));
21948  +
21949  +      select * from &indata;
21950  +      run;
21951  +     data &indata( drop = _NCL_);
21952  +           set &indata;
21953  +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
21954  +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
21955  +     run;
21956  +     data &indata(DROP = _NCL_);
21957  +           set &indata;
21958  +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
21959  +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
21960  +           rename _NAME_ = _VAR_;
21961  +     run;
21962  +     proc datasets lib = work nolist;
21963  +           delete corr_tmp;
21964  +     run;
21965  +     quit;
21966  + %mend UpdateOutStatCorrToDistance;
21967  +
21968  +
21969  +%macro HierClusWithCorr(indata= ,
21970  +                        ncluster=,
21971  +                        method = Ward,
21972  +                        outtree = _outtree,
21973  +                        idvar =_VAR_,
21974  +                        outdata=,
21975  +                        rescore = N,
21976  +                        newncluster=
21977  +                        );
21978  +      %global &newncluster;
21979  +      %if &rescore ne Y %then %do;
21980  +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
21981  +                   method=&method outtree=&outtree noprint;
21982  +           id &idvar;
21983  +      run;
21984  +      %end;
21985  +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
21986  +      run;
21987  +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
21988  +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
21989  +      run;
21990  +      data _outcontent;
21991  +          set _outcontent;
21992  +          if NAME in ('_TYPE_' , '_VAR_') then delete;
21993  +          index = 1;
21994  +          rename NAME = _NAME_;
21995  +      run;
21996  +      proc sort data=_outcontent;
21997  +          by _NAME_;
21998  +      run;
21999  +      proc sort data =&outdata;
22000  +           by _NAME_;
22001  +      run;
22002  +      data &outdata(drop=index);
22003  +          merge &outdata _outcontent;
22004  +          by _NAME_;
22005  +          if index = . then delete;
22006  +      run;
22007  +      /*-----------------------------------------------------------*/
22008  +      data &outdata;
22009  +           length CLUSNAME $16;
22010  +           set &outdata;
22011  +           if CLUSTER > &ncluster then delete;
22012  +           CLUSNAME='GC'||strip(CLUSTER);
22013  +           *label CLUSNAME = "Cluster Name";
22014  +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
22015  +           rename _NAME_ = VARIABLE ;
22016  +           *label _NAME_ = "Variable";
22017  +           *label CLUSTER = "Cluster";
22018  +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22019  +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22020  +      run;
22021  +      proc sort data=&outdata out=&outdata;
22022  +           by CLUSTER;
22023  +      run;
22024  +      proc means data =&outdata noprint;
22025  +           output out=_meanout;
22026  +      run;
22027  +      data _null_;
22028  +            set _meanout;
22029  +            if strip(_STAT_) eq 'MAX' then do;
22030  +            call symput("&newncluster", CLUSTER);
22031  +            stop;
22032  +            end;
22033  +      run;
22034  +
22035  +      proc datasets lib = work nolist;
22036  +           delete _outcontent _meanout;
22037  +      run;
22038  +      quit;
22039  +%mend  HierClusWithCorr;
22040  +
22041  +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
22042  +
22043  +     data _tmpindata;
22044  +          set &indata;
22045  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
22046  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22047  +          if _TYPE_ = 'STD' then _NAME_='STD';
22048  +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
22049  +          DROP _TYPE_ _NCL_;
22050  +     run;
22051  +
22052  +     filename _file_  "&fileRef";
22053  +
22054  +     data _null_;
22055  +        FILE _file_ MOD;
22056  +        put ' ';
22057  +        put "/*-------------------------------------------------*/";
22058  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
22059  +        put "/*-------------------------------------------------*/";
22060  +        put ' ';
22061  +        %let dsid = %sysfunc(open(work._tmpindata));
22062  +
22063  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22064  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22065  +        %let k = 1;
22066  +        %do %while(^%sysfunc(fetch(&dsid)));
22067  +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22068  +               %if &k > 2 %then %do;
22069  +                %let cn = %eval(&k-2);
22070  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
22071  +                %end;
22072  +                %let k = %eval(&k+1);
22073  +
22074  +        %end;
22075  +        %let rc = %sysfunc(rewind(&dsid));
22076  +
22077  +        %do j= 2 %to &nvar;
22078  +            %let _varname = %sysfunc(varname(&dsid, &j));
22079  +            %do %while(^%sysfunc(fetch(&dsid)));
22080  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22081  +                %if &_name = MEAN %then
22082  +                %let _mean = %sysfunc(getvarn(&dsid, &j));
22083  +                %else %if &_name = STD %then
22084  +                %let _std = %sysfunc(getvarn(&dsid, &j));
22085  +                %else %do;
22086  +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
22087  +                      %let abscoeff = %sysfunc(abs(&coeff));
22088  +                          %if &abscoeff >  0 %then %do;
22089  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22090  +                           %end;
22091  +                 %end;
22092  +             %end;
22093  +             %let rc = %sysfunc(rewind(&dsid));
22094  +         %end;
22095  +
22096  +        %let dsid= %sysfunc(close(&dsid));
22097  +
22098  +     run;
22099  +
22100  +     filename _file_;
22101  +     proc datasets lib = work nolist;
22102  +           delete _tmpindata;
22103  +     run;
22104  +     quit;
22105  +%mend CreateScoreCode2;
22106  +
22107  +
22108  +%macro MakeDeltaCode2(groupds=,deltacodefile=);
22109  +
22110  +     /*--- Build Code to Modify Metadata ---*/
22111  +     filename X "&deltacodefile";
22112  +     data _null_;
22113  +        FILE X;
22114  +        set &groupds end=eof;
22115  +        if _N_=1 then do;
22116  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
22117  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
22118  +           %end;
22119  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
22120  +           put "if upcase(strip(NAME)) in (";
22121  +        end;
22122  +        if Strip(upcase(Selected)) eq 'YES' then do;
22123  +           string = '"'!!trim(left(VARIABLE))!!'"';
22124  +           put string;
22125  +        end;
22126  +        if eof then do;
22127  +           put ') then ROLE="INPUT";';
22128  +           put 'else ROLE="REJECTED";';
22129  +           put 'end;';
22130  +
22131  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
22132  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
22133  +           %end;
22134  +        end;
22135  +     run;
22136  +     quit;
22137  +
22138  +     filename X;
22139  +     quit;
22140  +%mend MakeDeltaCode2;
22141  +
22142  +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
22143  +  %global &ngc;
22144  +  data _null_;
22145  +  %if &indata ne %then %do;
22146  +      %let dsid = %sysfunc(open(&indata));
22147  +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
22148  +      %let dsid = %sysfunc(close(&dsid));
22149  +  %end;
22150  +  %else %do;
22151  +       %let nvar = %eval(&ninput+&ndummy); ;
22152  +  %end;
22153  +  %let numgc = %eval(&nvar/&div+2);
22154  +  %let &ngc = &numgc;
22155  +   run;
22156  +  quit;
22157  +%mend getInitialGClusterNumber;
22158  +
22159  +
22160  +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
22161  +data &outlink(drop = Selected);
22162  +     set &indata;
22163  +     LINKID = _N_;
22164  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
22165  +run;
22166  +data &outnode(keep=NODEID TYPE LABEL);
22167  +    set &indata;
22168  +    length TYPE $16;
22169  +    rename VARIABLE = NODEID;
22170  +    *label  CLUSNAME="Node ID";
22171  +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22172  +    TYPE = "VARIABLE";
22173  +    *label TYPE = "Node Type";
22174  +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22175  +    run;
22176  +data _tmp(keep=NODEID TYPE LABEL);
22177  +    set &indata;
22178  +    length TYPE $16;
22179  +    rename CLUSNAME = NODEID;
22180  +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22181  +    TYPE = "GCLUSTER";
22182  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22183  +    run;
22184  +proc sort data=_tmp;
22185  +    by NODEID;
22186  +run;
22187  +data _tmp;
22188  +    set _tmp; by NODEID;
22189  +    if first.NODEID then output;
22190  +run;
22191  +proc sort data=&outnode;
22192  +    by NODEID;
22193  +run;
22194  +data  &outnode;
22195  +    set _tmp &outnode;
22196  +run;
22197  +proc datasets lib = work nolist;
22198  +     delete _tmp;
22199  +run;
22200  +quit;
22201  +%mend MakeGobalConstellData;
22202  +
22203  +/* Make contellation plot data among GCLUSTERS */
22204  +
22205  +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
22206  +
22207  +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
22208  +     set &indata;
22209  +     LINKID = _N_;
22210  +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
22211  +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
22212  +     end;
22213  +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
22214  +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
22215  +     end;
22216  +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
22217  +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
22218  +    end;
22219  +run;
22220  +
22221  +data _tmp_outrsquare;
22222  +        set &inoutrsq;
22223  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22224  +run;
22225  +
22226  +proc freq data =_tmp_outrsquare noprint;
22227  +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
22228  +run;
22229  +
22230  +data &outnode(keep=_NAME_ TYPE LABEL);
22231  +    set &outlink;
22232  +    length TYPE $16;
22233  +    length LABEL $100;
22234  +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
22235  +
22236  +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22237  +    TYPE = "GCLUSTER";
22238  +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22239  +    end;
22240  +    else do;
22241  +    TYPE= "ROOT";
22242  +    LABEL= _NAME_;
22243  +    end;
22244  +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22245  +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
22246  +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22247  +    run;
22248  +
22249  +proc sort data=&outnode;
22250  +     by _NAME_;
22251  +proc sort data=_tmp_GCLUSFREQ;
22252  +     by _NAME_;
22253  +run;
22254  +
22255  +data  &outnode;
22256  +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
22257  +     if COUNT=. then COUNT=1;
22258  +run;
22259  +
22260  +proc datasets lib = work nolist;
22261  +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
22262  +run;
22263  +
22264  +quit;
22265  +%Mend MakeGClusterConstData;
22266  +
22267  +
22268  +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
22269  +
22270  +    data _gscoretmpds;
22271  +          set &indata;
22272  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
22273  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22274  +          if _TYPE_ = 'STD' then _NAME_='STD';
22275  +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
22276  +          DROP _TYPE_ _NCL_;
22277  +     run;
22278  +
22279  +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
22280  +        GCluster Component &globalclusid ------ */
22281  +
22282  +    filename _file_  "&fileref";
22283  +
22284  +    data _null_;
22285  +        %if &globalclusid eq 1 %then %do;
22286  +          FILE _file_;
22287  +        %end;
22288  +        %else %do;
22289  +          FILE _file_ MOD;
22290  +        %end;
22291  +
22292  +        %let dsid = %sysfunc(open(work._gscoretmpds));
22293  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22294  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22295  +
22296  +        %let k = 1;
22297  +        %do %while(^%sysfunc(fetch(&dsid)));
22298  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22299  +                %if &k > 2 %then %do;
22300  +                put "&_name = 0 ; ";
22301  +                %end;
22302  +                %let k = %eval(&k+1);
22303  +        %end;
22304  +
22305  +        %let rc = %sysfunc(rewind(&dsid));
22306  +        %do i= 2 %to &nvar;
22307  +            %let _varname =  %sysfunc(varname(&dsid, &i));
22308  +            %do %while(^%sysfunc(fetch(&dsid)));
22309  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22310  +                %if &_name = MEAN %then
22311  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
22312  +                %else %if &_name = STD %then
22313  +                %let _std = %sysfunc(getvarn(&dsid, &i));
22314  +                %else %do;
22315  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
22316  +                      %let abscoeff = %sysfunc(abs(&coeff));
22317  +                          %if &abscoeff >  0 %then %do;
22318  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22319  +                           %end;
22320  +                 %end;
22321  +             %end;
22322  +             %let rc = %sysfunc(rewind(&dsid));
22323  +
22324  +         %end;
22325  +
22326  +        %let dsid= %sysfunc(close(&dsid));
22327  +       run;
22328  +
22329  +
22330  +       proc datasets lib=work nolist;
22331  +            delete _gscoretmpds;
22332  +       run;
22333  +      quit;
22334  +
22335  +%mend CreateGClusterScoreCode;
22336  +
22337  +
22338  +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
22339  +
22340  +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
22341  +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
22342  +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
22343  +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
22344  +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
22345  +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
22346  +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
22347  +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
22348  +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
22349  +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
22350  +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
22351  +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
22352  +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
22353  +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
22354  +
22355  +   filename gsfile "&gscorecode";
22356  +
22357  +   data &EM_USER_GSCORE;
22358  +             set &indata;
22359  +             %include  gsfile;
22360  +        keep
22361  +        %do i=1 %to &ngcluster;
22362  +         %let gcvarname = GC&i;
22363  +         &gcvarname
22364  +        %end;
22365  +     ;
22366  +   run;
22367  +
22368  +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
22369  +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
22370  +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
22371  +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
22372  +    noprint  ;
22373  +     var
22374  +       %do i=1 %to &ngcluster;
22375  +         %let gcvarname = GC&i;
22376  +         &gcvarname
22377  +        %end;
22378  +   ;
22379  +   run;
22380  +
22381  +
22382  +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
22383  +   data &EM_USER_GSCORECORRPLOT ;
22384  +        set &EM_USER_GSCORECORRPLOT;
22385  +        rename _X_ = X;
22386  +        rename _Y_ = Y;
22387  +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22388  +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22389  +   run;
22390  +
22391  +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
22392  +
22393  +   data &EM_USER_GSCORETREE;
22394  +        length _NAME_ $32;
22395  +        length _LABEL_ $100;
22396  +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
22397  +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22398  +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22399  +        end;else do;
22400  +         _LABEL_ = _NAME_;
22401  +        end;
22402  +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
22403  +
22404  +   run;
22405  +
22406  +   quit;
22407  +
22408  +%mend MakeGClusterCorrelation;
22409  +
22410  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
22411  +%macro report;
22412  +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
22413  +
22414  +    data _null_;
22415  +         set &EM_USER_VARCLUSMETA;
22416  +         if _N_=1 then
22417  +         call symput('_trainnum', TrainNum);
22418  +    run;
22419  +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
22420  +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
22421  +           %include temp;
22422  +           filename temp;
22423  +           %report1;
22424  +       %end;
22425  +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
22426  +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
22427  +           %include temp;
22428  +           filename temp;
22429  +           %report2;
22430  +    %end;
22431  +
22432  +   /* End of all runs, change the flag of newtrain to N */
22433  +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
22434  +    data &EM_USER_VARCLUSMETA;
22435  +         set &EM_USER_VARCLUSMETA;
22436  +         NewTrain = "N";
22437  +    run;
22438  +    quit;
22439  +%mend report;
22440  +
22441  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      105588:166
NOTE: There were 1 observations read from the data set EMWS2.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
22442  +%macro report1;
22444  +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
22445  +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
22446  +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
22448  +   data &EM_USER_OUTVARSEL;
22449  +        set &EM_USER_OUTRSQUARE;
22450  +        if upcase(strip(SELECTED)) = 'YES' then output;
22451  +   run;
22453  +   data _tmp_outrsquare;
22454  +        set &EM_USER_OUTRSQUARE;
22455  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22456  +   run;
22458  +   proc freq data =_tmp_outrsquare noprint;
22459  +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
22460  +   run;
22462  +   proc datasets lib = work nolist;
22463  +     delete _tmp_outrsquare;
22464  +   run;
22466  +   data &EM_USER_CLUSFREQ;
22467  +       set &EM_USER_CLUSFREQ;
22468  +       label
22469  +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
22470  +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
22471  +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
22472  +       ;
22473  +   run;
22475  +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
22476  +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
22477  +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
22479  +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
22480  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
22481  +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
22482  +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
22483  +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
22484  +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
22485  +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
22486  +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
22488  +   /*
22489  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
22490  +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
22491  +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
22494  +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 131 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_OUTVARSEL has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS2.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 96 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS2.VARCLUS_CLUSFREQ has 35 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS2.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS2.VARCLUS_CLUSFREQ has 35 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS2.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
22497   *------------------------------------------------------------*;
22498   * End REPORT: VarClus;
22499   *------------------------------------------------------------*;
22500
 
22501   /* Reset EM Options */
22502   options formchar="|----|+|---+=|-/\<>*";
22503   options nocenter ls=256 ps=10000;
22504   goptions reset=all device=GIF NODISPLAY;
 
22505   proc sort data=WORK.EM_USER_REPORT;
22506   by ID VIEW;
22507   run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
