*------------------------------------------------------------*
* Training Log
Date:                April 20, 2017
Time:                01:21:17
*------------------------------------------------------------*
14715  proc freq data=EMWS2.Tree2_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree2META;
14717  run;

NOTE: There were 99 observations read from the data set EMWS2.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14718  proc print data=WORK.Tree2META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;

NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14724  title10;

14725  %let EMNORLEN = %DMNORLEN;
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
14754  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14755  length ORDER $20;
14756  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14757     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14758  set EMWS2.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
14759  NumLevels=2;
14760  select(upcase(ORDER));
14761  when('DESC') ORDER = 'Descending';
14762  when('ASC') ORDER = 'Ascending';
14763  when('FMTDESC') ORDER = 'Formatted Descending';
14764  when('FMTASC') ORDER = 'Formatted Ascending';
14765  otherwise ORDER = 'Descending';
14766  end;
14767  output;
14768  run;

NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

14769  title9 ' ';
14770  proc print data=WORK.Tree2_EVENT noobs label;
14771  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14772  title9 ' ';
14773  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14774  run;

NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14775  title10;

"No decisions defined for target "RESPOND"." 
14776  proc print data = EMWS2.Ids_RESPOND_DM noobs label;
14777  var _type_ variable label;
14778  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14779  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14780  title9 ' ';
14781  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14782  run;

NOTE: There were 7 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14783  title10;

14784  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15347  *------------------------------------------------------------*;
15348  * Tree2: Generation of macros and macro variables;
15349  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15350  *------------------------------------------------------------*;

15351  %let EMEXCEPTIONSTRING=;
15352  *------------------------------------------------------------*;
15353  * TRAIN: Tree2;
15354  *------------------------------------------------------------*;
15355  %let EM_ACTION = TRAIN;
15356  %let syscc = 0;
15357  %macro main;
15358  
15359    %if %upcase(&EM_ACTION) = CREATE %then %do;
15360      filename temp catalog 'sashelp.emmodl.tree_create.source';
15361      %include temp;
15362      filename temp;
15363  
15364      %em_tree_create;
15365    %end;
15366  
15367     %else
15368     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15369  
15370         filename temp catalog 'sashelp.emmodl.tree_train.source';
15371         %include temp;
15372         filename temp;
15373         %em_tree_train;
15374     %end;
15375  
15376    %else
15377    %if %upcase(&EM_ACTION) = SCORE %then %do;
15378      filename temp catalog 'sashelp.emmodl.tree_score.source';
15379      %include temp;
15380      filename temp;
15381  
15382      %em_tree_score;
15383  
15384    %end;
15385  
15386    %else
15387    %if %upcase(&EM_ACTION) = REPORT %then %do;
15388  
15389         filename temp catalog 'sashelp.emmodl.tree_report.source';
15390         %include temp;
15391         filename temp;
15392  
15393         %em_tree_report;
15394     %end;
15395  
15396    %else
15397    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15398  
15399         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15400         %include temp;
15401         filename temp;
15402         %EM_TREE_OPENTREEVIEWER;
15403  
15404     %end;
15405  
15406    %else
15407    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15408  
15409         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15410         %include temp;
15411         filename temp;
15412         %EM_TREE_CLOSETREEVIEWER;
15413  
15414     %end;
15415  
15416  
15417     %doendm:
15418  %mend main;
15419  
15420  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15422 +%macro em_tree_train;
15424 +   %if &EM_IMPORT_DATA eq %then %do;
15425 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15426 +       %put &em_codebar;
15427 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15428 +       %put &errormsg;
15429 +       %put &em_codebar;
15430 +       %goto doendm;
15431 +   %end;
15432 +   %else
15433 +       %let EMEXCEPTIONSTRING =;
15435 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15436 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15437 +        %put &em_codebar;
15438 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15439 +        %put &errormsg;
15440 +        %put &em_codebar;
15441 +        %goto doendm;
15442 +   %end;
15444 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15445 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15446 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15447 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15448 +        %put &em_codebar;
15449 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15450 +        %put &errormsg;
15451 +        %put &em_codebar;
15452 +        %goto doendm;
15453 +   %end;
15455 +   /* Initialize property macro variables */
15456 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15457 +   %include temp;
15458 +   filename temp;
15460 +   %EM_SetProperties;
15462 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15463 +   %EM_GETNAME(key=EMTREE, type=DATA);
15464 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15465 +     /* if import eq Y and no importtable defined, throw an exception */
15466 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15467 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15468 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15469 +         %put &em_codebar;
15470 +         %put &errmsg;
15471 +         %put &em_codebar;
15472 +         %goto doendm;
15473 +      %end;
15474 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15475 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15476 +         %put &em_codebar;
15477 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15478 +         %put &errormsg;
15479 +         %put &em_codebar;
15480 +         %goto doendm;
15481 +      %end;
15482 +      %else %do;
15483 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15484 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15485 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15486 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15487 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15488 +         %let dsid = %sysfunc(close(&dsid));
15489 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15490 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15491 +            %put &em_codebar;
15492 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15493 +            %put &errormsg;
15494 +            %put &em_codebar;
15495 +            %goto doendm;
15496 +         %end;
15497 +      %end;
15498 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15499 +         proc delete data=&EM_USER_EMTREE;
15500 +         run;
15501 +      %end;
15502 +   %end;
15503 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15504 +      proc delete data=&EM_USER_EMTREE;
15505 +      run;
15506 +   %end;
15508 +   /* load tree macros */
15509 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15510 +   %include temp;
15511 +   filename temp;
15513 +   /* data sets */
15514 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15515 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15516 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15518 +   /* files */
15519 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15521 +   /* check actual num of target levels */
15522 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15523 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15524 +                              nLevel=_nTargetLevel );
15525 +      %if &_nTargetLevel  > 2 %then %do;
15526 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15527 +        %put &em_codebar;
15528 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15529 +        %put &errormsg;
15530 +        %put &em_codebar;
15531 +        %goto doendm;
15532 +      %end;
15533 +   %end;
15535 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15536 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15537 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15538 +        %let costflag=0;
15539 +        data _null_;
15540 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15541 +          if eof then call symput("costflag", _N_);
15542 +        run;
15543 +        %if &costflag gt 0 %then %do;
15544 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15545 +          %put &em_codebar;
15546 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15547 +          %put &errormsg;
15548 +          %put &em_codebar;
15549 +          %goto doendm;
15550 +       %end;
15551 +     %end;
15552 +   %end;
15554 +   /* determine if multiple targets will be processed */
15555 +   %let em_tree_multipleTargets=N;
15556 +   %let em_tree_numTarget = 1;
15557 +   %let em_tree_targetVars=;
15559 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15560 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15561 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15562 +         %let em_tree_multipleTargets=N;
15563 +      %end;
15564 +      %else %do;
15565 +         /* create macro array of targets  */
15566 +         data _null_;
15567 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15568 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15569 +           if eof then
15570 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15571 +        run;
15573 +        %if &em_tree_numTarget gt 1 %then %do;
15574 +           %let em_tree_multipleTargets=Y;
15575 +        %end;
15576 +      %end;
15577 +   %end;
15579 +   /* create view of only necessary variable for performance reasons */
15580 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15581 +   data &tempData / view=&tempData;
15582 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15583 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15584 +       %EM_TARGET
15585 +     %end;
15586 +     %else %do;
15587 +       %if &em_tree_numTarget ne 0 %then %do;
15588 +         %do i=1 %to &em_tree_numTarget;
15589 +            &&em_tree_targetVars&i
15590 +         %end;
15591 +       %end;
15592 +     %end;
15593 +     );
15594 +   run;
15596 +   /* run Tree procedure */
15597 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15599 +   /* Check return code and throw exception if error is detected */
15600 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15601 +   %if &syserr %then %do;
15602 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15603 +     %goto doendm;
15604 +   %end;
15606 +   /* add decision score code if multiple targets are processed */
15607 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15608 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15609 +   %end;
15611 +   /* create outfit dataset if multiple score statements have been executed */
15612 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15614 +   /* create English Rules */
15615 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15616 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15617 +       %em_tree_makeEnglishRules;
15619 +       /* English Rules */
15620 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15622 +     %end;
15623 +   filename x;
15625 +   %doendm:
15626 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15627 +%macro EM_SetProperties;
15629 +   /* train properties */
15630 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15672 +   /* properties for interactive sample */
15673 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15678 +   /* report properties */
15679 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15685 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15686 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15687 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15688 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15689 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15690 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15691 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15693 +   /* score properties */
15694 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15695 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15697 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Deleting EMWS2.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15699 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15700 +  %global &nLevel;
15701 +  proc dmdb batch data=&indata
15702 +    classout=_tmp_dmdbout;
15703 +    class &target;
15704 +  run;
15705 +  data _tmp_dmdbout;
15706 +    set _tmp_dmdbout;
15707 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15708 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15709 +  run;
15710 +  data _null_;
15711 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15712 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15713 +    %let dsid = %sysfunc(close(&dsid));
15714 +     call symput("&nLevel", put(&_obs, Best12.));
15715 +  run;
15717 +  proc datasets lib=work nolist;
15718 +     delete _tmp_dmdbout;
15719 +  run;
15720 +  quit;
15721 +%Mend EM_CheckBinaryTargetLevel;
15724 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15726 +  /* determine the number of obs in training data */
15727 +  proc sql;
15728 +    reset noprint;
15729 +    select count(*) into :em_nobs from &indata;
15730 +  quit;
15732 +  /* determine the number of input variables */
15733 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15734 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15736 +  /* retrieve targetEvent from decmeta */
15737 +  %let targetEvent=;
15738 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15739 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15740 +      data _null_;
15741 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15742 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15743 +      run;
15744 +    %end;
15745 +  %end;
15747 +  /* create targetTable if multipleTar eq Y */
15748 +  data temptarget;
15749 +    set &EM_DATA_VARIABLESET;
15750 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15751 +  run;
15753 + /* data sets */
15754 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15755 + %EM_GETNAME(key=EMTREE,        type=DATA);
15756 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15757 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15758 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15759 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15760 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15761 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15762 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15763 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15765 + /* files */
15766 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15767 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15769 + /* turn on pmml if requested */
15770 + %let nnpmml=0;
15771 + %if %symexist(EM_PMML) %then %do;
15772 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15773 +       %let nnpmml=1;
15775 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15776 +%end;
15778 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15780 + %if &nnpmml or &numClassTarget %then %do;
15782 +       /* create dmdb needed for pmml generation */
15783 +       %let tree_maxlevel = 512;
15784 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15785 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15786 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15787 +         %end;
15788 +       %end;
15789 +       %if &tree_maxlevel gt 0 %then %do;
15790 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15791 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15792 +       %end;
15794 +       %let targetOrderString =;
15795 +       %let targetString = ;
15796 +       data _null_;
15797 +          length orderString nameString $10000;
15798 +          retain orderString nameString;
15799 +          set &em_data_variableset end=eof;
15800 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15801 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15802 +          %end;
15803 +          %else %do;
15804 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15805 +          %end;          select(order);
15806 +            when('')        order ='DESC';
15807 +            when('FMTASC')  order='ASCFMT';
15808 +            when('FMTDESC') order='DESFMT';
15809 +            otherwise;
15810 +          end;
15811 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15812 +          nameString = trim(nameString)!!' '!!trim(NAME);
15814 +          if eof then do;
15815 +             call symput('targetOrderString', trim(orderString));
15816 +             call symput('targetString', trim(nameString));
15817 +          end;
15818 +       run;
15820 +       %let arborkluge= "work._treeDMDB";
15822 +       proc dmdb batch data=&indata
15823 +       %if &nnpmml %then %do;
15824 +           PMML
15825 +       %end;
15826 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15829 +   %if &nnpmml %then %do;
15830 +        %if "%EM_ID" ne "" %then %do;
15831 +          id %EM_ID;
15832 +        %end;
15833 +        %if &EM_NUM_CLASS gt 0 %then %do;
15834 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15835 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15836 +               &targetOrderString;
15837 +        %end;
15838 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15839 +          var %EM_INTERVAL;
15840 +        %end;
15841 +        target &targetString %EM_INTERVAL_TARGET;
15842 +        %if "%EM_FREQ" ne "" %then %do;
15843 +          freq %EM_FREQ;
15844 +        %end;
15845 +  %end;
15846 +  %else %do;
15847 +      class  &targetOrderString;
15848 +      target &targetString %EM_INTERVAL_TARGET;
15849 +  %end;
15850 +       run;
15851 +       quit;
15853 +       proc datasets lib=work nolist;
15854 +          delete classout varout;
15855 +       run;
15856 +       quit;
15858 +    %end;
15859 + %end;
15861 + /* run Arbor procedure */
15862 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15863 +  proc arbor data=&INDATA
15865 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15866 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15867 +  %end;
15869 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15870 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15871 +  %end;
15873 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15874 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15875 +  %end;
15877 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15878 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15879 +  %end;
15881 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15882 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15883 +  %end;
15885 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15886 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15887 +  %end;
15888 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15889 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15890 +  %end;
15891 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15892 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15893 +  %end;
15895 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15896 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15897 +      alpha = &EM_PROPERTY_SIGLEVEL
15898 +    %end;
15899 +  %end;
15901 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15902 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15903 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15904 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15905 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15907 +        padjust =
15908 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15909 +          &chaid
15910 +        %end;
15911 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15912 +          DEPTH
15913 +        %end;
15914 +      %end;
15915 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15916 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15917 +         pvars = &num_inputs
15918 +      %end;
15919 +    %end;
15920 +  %end;
15921 +  %else %do;
15922 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15923 +         padjust = NONE
15924 +      %end;
15925 +  %end;
15927 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15928 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15929 +    Maxrules = &num_nrules
15930 +  %end;
15932 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15933 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15934 +    Maxsurrs = &num_nsurrs
15935 +  %end;
15937 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15938 +     Missing=&EM_PROPERTY_MISSINGVALUE
15939 +  %end;
15941 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15942 +     USEVARONCE
15943 +  %end;
15945 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15946 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15947 +  %end;
15950 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15951 +    event = "&targetEvent"
15952 +  %end;
15954 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15955 +     DECSEARCH
15956 +  %end;
15958 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15959 +     PRIORSSEARCH
15960 +  %end;
15962 +  %if &arbor_1 ne %then %do;
15963 +    &arbor_1
15964 +  %end;
15966 +  %if &em_arbor ne %then %do;
15967 +     &em_arbor
15968 +  %end;
15969 +  ;
15970 + %end;
15971 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15972 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15973 +       interact;
15974 + %end;
15975 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15976 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15977 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15978 +    %put &em_codebar;
15979 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15980 +    %put &errormsg;
15981 +    %put &em_codebar;
15982 +    %goto doendm;
15983 +   %end;
15984 +   %else %do;
15985 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15986 +       interact;
15987 +   %end;
15988 + %end;
15990 + %else %do;
15991 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15992 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15993 +    %put &em_codebar;
15994 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15995 +    %put &errormsg;
15996 +    %put &em_codebar;
15997 +    %goto doendm;
15998 +   %end;
15999 +   %else %do;
16000 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16001 +        interact;
16002 +   %end;
16003 + %end;
16005 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16006 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16007 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16008 +    %end;
16010 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16011 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16012 +    %end;
16014 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16015 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16016 +    %end;
16018 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16019 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16020 +    %end;
16022 +    %if "%EM_FREQ" ne "" %then %do;
16023 +       freq %EM_FREQ;
16024 +    %end;
16026 +    %if "&multipleTar" eq "Y" %then %do;
16027 +       /* cycle through all target vars in variableset */
16028 +       %let tdsid = %sysfunc(open(temptarget));
16029 +       %if &tdsid %then %do;
16030 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16031 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16032 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16033 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16034 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16035 +             target &var / level = &lvl
16036 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16037 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16038 +             %end;
16039 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16040 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16041 +             %end;
16042 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16043 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16044 +             %end;
16045 +          %end;
16046 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16047 +       %end;
16048 +       useTarget variable = %EM_TARGET;
16049 +    %end;
16050 +    %else %do;
16051 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16052 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16053 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16054 +      %end;
16055 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16056 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16057 +      %end;
16058 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16059 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16060 +      %end;
16061 +    %end;
16063 +    %if "&multipleTar" eq "N" %then %do;
16064 +      &EM_DEC_STATEMENT;
16065 +    %end;
16067 +    Performance &EM_PROPERTY_PERFORMANCE
16068 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16069 +      nodesize=&EM_PROPERTY_NODESAMPLE
16070 +    %end;
16071 +    ;
16073 +    %if "&intFlag" eq "Y" %then %do;
16074 +       INTERACT Largest;
16075 +       Train maxnewdepth=0;
16076 +    %end;
16078 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16079 +         Assess
16080 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16081 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16082 +              %put &em_codebar;
16083 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16084 +              %put &errormsg;
16085 +              %put &em_codebar;
16086 +            %end;
16087 +            %else %do;
16088 +               Validata=&EM_IMPORT_VALIDATE
16089 +            %end;
16090 +         %end;
16091 +         %else %do;
16092 +           NoValidata
16093 +         %end;
16094 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16095 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16096 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16097 +               %if &dsid %then %do;
16098 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16099 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16100 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16101 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16102 +                   %else %do;
16103 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16104 +                      %else %let measure= MISC;
16105 +                   %end;
16106 +                 %end;
16107 +               %end;
16108 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16109 +            %end;
16110 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16111 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16112 +                 %let measure=ASE;
16113 +              %end;
16114 +              %else %do;
16115 +                 %let measure=MISC;
16116 +              %end;
16117 +            %end;
16118 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16119 +              %let measure=ASE;
16120 +            %end;
16121 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16122 +               %let measure = LIFT;
16123 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16124 +               %if &dsid %then %do;
16125 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16126 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16127 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16128 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16129 +                 %end;
16130 +               %end;
16131 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16132 +            %end;
16133 +            measure=&measure
16134 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16135 +               event = "&targetEvent"
16136 +            %end;
16137 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16138 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16139 +            %end;
16140 +         %end;
16141 +         %if "&multipleTar" eq "N" %then %do;
16142 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16143 +               CV
16144 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16145 +                 CVNITer = &EM_PROPERTY_CVNITER
16146 +               %end;
16147 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16148 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16149 +               %end;
16150 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16151 +                 CVSeed = &EM_PROPERTY_CVSEED
16152 +               %end;
16153 +            %end;
16154 +         %end;
16155 +       %end;
16156 +      ;
16158 +      %if "&intFlag" ne "Y" %then %do;
16159 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16160 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16161 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16162 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16164 +          SUBTREE &subtree
16165 +          %if "&subtree" eq "NLEAVES" %then %do;
16166 +            =&EM_PROPERTY_NSUBTREE
16167 +          %end;
16168 +          ;
16169 +        %end;
16171 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16172 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16173 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16174 +          %end;
16175 +       %end;
16176 +      %end;
16177 + %end;
16180 + MakeMacro nleaves = nleaves;
16181 + save
16182 + %if "&EM_USER_EMTREE" ne "" %then %do;
16183 +   MODEL=&EM_USER_EMTREE
16184 + %end;
16185 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16186 +   SEQUENCE=&EM_USER_OUTSEQ
16187 + %end;
16188 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16189 +   IMPORTANCE=&EM_USER_OUTIMPORT
16190 + %end;
16191 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16192 +   NODESTAT=&EM_USER_OUTNODES
16193 + %end;
16194 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16195 +   SUMMARY=&EM_USER_OUTSUMMARY
16196 + %end;
16197 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16198 +   STATSBYNODE=&EM_USER_OUTSTATS
16199 + %end;
16200 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16201 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16202 + %end;
16203 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16204 +   Pathlistnonmissing=&EM_USER_OUTPATH
16205 + %end;
16206 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16207 +   RULES = &EM_USER_OUTRULES
16208 + %end;
16209 + ;
16211 + %if "&intFlag" ne "Y" %then %do;
16213 +   %let lookupString = ;
16214 +   %if ^%symexist(EM_OPTION) %then
16215 +      %let EM_OPTION=;
16217 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16218 +      %let lookupString = LOOKUP=SELECT;
16219 +   %end;
16221 +   %let codetext=;
16222 +   %let norescodetxt=;
16224 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16225 +     %let codetext=&codetext DUMMY;
16226 +     %let norescodetxt=&norescodetxt DUMMY;
16227 +   %end;
16228 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16229 +     %let codetext=&codetext NOLEAFID;
16230 +     %let norescodetxt=&norescodetxt NOLEAFID;
16231 +   %end;
16232 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16233 +     %let norescodetxt=&norescodetxt NOPRED;
16234 +   %end;
16236 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16237 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16239 +   %if &nnpmml %then %do;
16240 +     code pmml;
16241 +   %end;
16243 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16244 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16245 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16246 +   %end;
16247 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16248 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16249 +   %end;
16250 + %end;
16252 + run;
16253 + quit;
16255 + /*%em_checkerror(); */
16256 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16257 +   /* Delete DMDB catalog */
16258 +   proc datasets lib=work nolist;
16259 +       delete _treeDMDB / mt=cat;
16260 +  run;
16261 +  %end;
16263 + %if &nnpmml %then %do;
16264 +    ods pmml close;
16265 + %end;
16267 +  %doendm:
16269 +%mend em_tree_runTreeProcedure;
16271 +%macro em_tree_createFitStats( multipleTar= );
16274 +  /* create targetTable is multipleTar eq Y */
16275 +  data temptarget;
16276 +    set &EM_DATA_VARIABLESET;
16277 +    where ROLE="TARGET";
16278 +  run;
16280 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16281 +   data &EM_USER_EMOUTFIT;
16282 +     length target $32;
16283 +     merge work.fit_train
16284 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16285 +       work.fit_valid
16286 +     %end;
16287 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16288 +       work.fit_test
16289 +     %end;
16290 +     ;
16291 +     %if "&multipleTar" eq "N" %then %do;
16292 +       target="%EM_TARGET";
16293 +     %end;
16294 +     %else %do;
16295 +       target = _TARGET_;
16296 +     %end;
16297 +     drop _NW_ _SUMW_
16298 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16299 +        _VSUMW_
16300 +     %end;
16301 +     ;
16302 +   run;
16304 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16305 +     proc datasets library=work nolist;
16306 +       delete fit_valid;
16307 +     run;
16308 +   %end;
16309 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16310 +     proc datasets library=work nolist;
16311 +       delete fit_test;
16312 +     run;
16313 +   %end;
16315 +%mend em_tree_createFitStats;
16318 +%macro em_tree_makeEnglishRules;
16320 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16321 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16323 +  /* verify that necessary tables exist and if not, skip processing */
16324 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16325 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16326 +    %goto doendm;
16327 +  %end;
16328 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16329 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16330 +    %goto doendm;
16331 +  %end;
16333 +  /* determine length of variable in outpath dataset */
16334 +  %let vlength= ;
16335 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16336 +  %if &dsid ne %then %do;
16337 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16338 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16339 +  %end;
16340 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16342 +  data tempoutpath;
16343 +    length varname $&vlength;
16344 +    retain varname;
16345 +    set &EM_USER_OUTPATH;
16347 +    if ^missing(variable) then varname=variable;
16348 +    else if ^missing(var_name) then varname=var_name;
16349 +    output;
16350 +  run;
16352 +  /* create an array of generated predicted variable names */
16353 +  %let tree_pred_vars = ;
16354 +  %let tree_pred_label = ;
16355 +  %let numpred= 0;
16356 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16358 +    data _null_;
16359 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16360 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16361 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16362 +     if eof then
16363 +       call symput('numpred', strip(put(_N_, BEST.)));
16364 +    run;
16365 +  %end;
16367 +  /* determine if NPRIORS exists in outnodes  */
16368 +  %local nprior_flag;
16369 +  data _null_;
16370 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16371 +    if eof then do;
16372 +      call symput('nprior_flag', strip(put(npriors, best.)));
16373 +    end;
16374 +  run;
16376 +  proc sort data=tempoutpath; by node; run;
16377 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16379 +  data tempoutpath;
16380 +    merge tempoutpath(in=_a) outnodes(keep= node
16381 +    %if "&nprior_flag" ne "." %then %do;
16382 +      NPRIORS
16383 +    %end;
16384 +    %else %do;
16385 +      N
16386 +    %end;
16387 +    %if &numpred gt 0 %then %do;
16388 +      %do i=1 %to &numpred;
16389 +        &&tree_pred_vars&i
16390 +      %end;
16391 +    %end;
16392 +    );
16393 +    by node;
16394 +    if _a;
16395 +  run;
16397 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16399 +  data _null_;
16400 +    file x;
16401 +    set tempoutpath;
16402 +    by node descending varname;
16403 +    retain origvar oldnode string;
16404 +    length origvar $32 oldnode 8 string $200;
16406 +    if _N_ = 1 then do;
16407 +      origvar = varname;
16408 +      oldnode = node;
16409 +    end;
16411 +    if first.node then do;
16412 +       put "&EM_CODEBAR";
16413 +       put " Node = " node;
16414 +       put "&EM_CODEBAR";
16415 +    end;
16417 +      if first.varname then do;
16418 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16419 +            if MISSING(CHARACTER_VALUE) then do;
16420 +             if NUMERIC_VALUE ne .  then do;
16421 +              if ^first.node then do;
16422 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16423 +              end;
16424 +              else do;
16425 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16426 +              end;
16427 +             end;
16428 +            end;
16429 +            else do;
16430 +              if ^first.node then do;
16431 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16432 +              end;
16433 +              else do;
16434 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16435 +              end;
16436 +             end;
16437 +         end;
16438 +         else if RELATION in ("=") then do;
16439 +            if ^first.node then do;
16440 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16441 +            end;
16442 +            else do;
16443 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16444 +            end;
16445 +         end;
16446 +         else if RELATION in ("ISMISSING") then do;
16447 +            if ^first.node then do;
16448 +              string = " AND "|| strip(varname) || " equals Missing";
16449 +            end;
16450 +            else do;
16451 +              string = "if "|| strip(varname) ||" equals Missing";
16452 +            end;
16453 +         end;
16454 +         else if RELATION in ("ISNOTMISSING") then do;
16455 +            if ^first.node then do;
16456 +              string = " AND "|| strip(varname) || " equals All Values";
16457 +            end;
16458 +            else do;
16459 +              string = "if "|| strip(varname) ||" equals All Values";
16460 +            end;
16461 +         end;
16462 +         if ^missing(varname) then origvar = varname;
16463 +         oldnode=node;
16465 +      end;
16466 +      else do;
16467 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16468 +          if MISSING(CHARACTER_VALUE) then do;
16469 +           if  NUMERIC_VALUE ne .  then do;
16470 +            if ^MISSING(string) then
16471 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16472 +            else
16473 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16474 +           end;
16475 +          end;
16476 +          else do;
16477 +            if ^MISSING(string) then
16478 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16479 +            else
16480 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16481 +          end;
16483 +         end;
16484 +         else if RELATION in ("=") then do;
16485 +           string = strip(string)||", "||strip(character_value);
16486 +         end;
16487 +         else if RELATION in ("ISMISSING") then do;
16489 +         end;
16490 +         if ^missing(varname) then origvar = varname;
16491 +         oldnode=node;
16492 +      end;
16493 +      if last.varname then do;
16494 +         if RELATION in ("ISMISSING") then do;
16495 +           if ^first.varname then do;
16496 +             string = strip(string) || " or MISSING";
16497 +           end;
16498 +         end;
16499 +         put string;
16500 +         if ^missing(varname) then origvar = varname;
16501 +         oldnode=node;
16502 +      end;
16504 +      if last.node then do;
16505 +         put "then ";
16506 +         put " Tree Node Identifier   = " node;
16508 +         %if "&nprior_flag" ne "." %then %do;
16509 +           put " Number of Observations = " NPRIORS;
16510 +         %end;
16511 +         %else %do;
16512 +           put " Number of Observations = " N;
16513 +         %end;
16515 +         %if &numpred gt 0 %then %do;
16516 +           %do i=1 %to &numpred;
16517 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16518 +           %end;
16519 +         %end;
16521 +         put " ";
16522 +         if ^missing(varname) then origvar = varname;
16523 +         oldnode=node;
16524 +      end;
16526 +  run;
16528 +  proc datasets lib=work nolist;
16529 +    delete tempoutpath outnodes;
16530 +  run;
16532 +  %doendm:
16533 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA STEP view saved on file EMWS2.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      


NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      


NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: 1596687 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633958912 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 70699408 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Created macro variable NLEAVES equal to 8.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_EMTREE has 2275 observations and 4 variables.
NOTE: The data set EMWS2.TREE2_OUTNODES has 15 observations and 24 variables.
NOTE: The data set EMWS2.TREE2_OUTPATH has 55 observations and 7 variables.
NOTE: The data set EMWS2.TREE2_OUTRULES has 386 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS2.TREE2_OUTSTATS has 105 observations and 5 variables.
NOTE: The data set EMWS2.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_OUTTOPOLOGY has 15 observations and 5 variables.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\TREEFLOW.sas opened.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\TREEPUBLISH.sas opened.
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.


NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           3.65 seconds
      cpu time            3.42 seconds
      
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           3.65 seconds
      cpu time            3.42 seconds
      


NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS2.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 55 observations read from the data set EMWS2.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 15 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=20Apr2017:01:21:22,
      Create Time=20Apr2017:01:21:22

NOTE: 94 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref X has been deassigned.
16535  
16536  *------------------------------------------------------------*;
16537  * End TRAIN: Tree2;
16538  *------------------------------------------------------------*;

16539  *------------------------------------------------------------*;
16540  * Close any missing semi colons;
16541  *------------------------------------------------------------*;
16542  ;
16543  ;
16544  ;
16545  ;
16546  quit;
16547  *------------------------------------------------------------*;
16548  * Close any unbalanced quotes;
16549  *------------------------------------------------------------*;
16550  /*; *"; *'; */
16551  ;
16552  run;
16553  quit;
16554  /* Reset EM Options */
16555  options formchar="|----|+|---+=|-/\<>*";
16556  options nocenter ls=256 ps=10000;
16557  goptions reset=all device=GIF NODISPLAY;

16558  proc sort data=WORK.EM_USER_REPORT;
16559  by ID VIEW;
16560  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

