*------------------------------------------------------------*
User:                pkumari1
Date:                April 20, 2017
Time:                01:21:28
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 20, 2017
Time:                01:21:17
*------------------------------------------------------------*
14715  proc freq data=EMWS2.Tree2_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree2META;
14717  run;
 
NOTE: There were 99 observations read from the data set EMWS2.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14718  proc print data=WORK.Tree2META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14754  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14755  length ORDER $20;
14756  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14757     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14758  set EMWS2.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
14759  NumLevels=2;
14760  select(upcase(ORDER));
14761  when('DESC') ORDER = 'Descending';
14762  when('ASC') ORDER = 'Ascending';
14763  when('FMTDESC') ORDER = 'Formatted Descending';
14764  when('FMTASC') ORDER = 'Formatted Ascending';
14765  otherwise ORDER = 'Descending';
14766  end;
14767  output;
14768  run;
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14769  title9 ' ';
14770  proc print data=WORK.Tree2_EVENT noobs label;
14771  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14772  title9 ' ';
14773  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14774  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14775  title10;
 
"No decisions defined for target "RESPOND"."
14776  proc print data = EMWS2.Ids_RESPOND_DM noobs label;
14777  var _type_ variable label;
14778  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14779  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14780  title9 ' ';
14781  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14782  run;
 
NOTE: There were 7 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14783  title10;
 
14784  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15347  *------------------------------------------------------------*;
15348  * Tree2: Generation of macros and macro variables;
15349  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15350  *------------------------------------------------------------*;
 
15351  %let EMEXCEPTIONSTRING=;
15352  *------------------------------------------------------------*;
15353  * TRAIN: Tree2;
15354  *------------------------------------------------------------*;
15355  %let EM_ACTION = TRAIN;
15356  %let syscc = 0;
15357  %macro main;
15358
15359    %if %upcase(&EM_ACTION) = CREATE %then %do;
15360      filename temp catalog 'sashelp.emmodl.tree_create.source';
15361      %include temp;
15362      filename temp;
15363
15364      %em_tree_create;
15365    %end;
15366
15367     %else
15368     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15369
15370         filename temp catalog 'sashelp.emmodl.tree_train.source';
15371         %include temp;
15372         filename temp;
15373         %em_tree_train;
15374     %end;
15375
15376    %else
15377    %if %upcase(&EM_ACTION) = SCORE %then %do;
15378      filename temp catalog 'sashelp.emmodl.tree_score.source';
15379      %include temp;
15380      filename temp;
15381
15382      %em_tree_score;
15383
15384    %end;
15385
15386    %else
15387    %if %upcase(&EM_ACTION) = REPORT %then %do;
15388
15389         filename temp catalog 'sashelp.emmodl.tree_report.source';
15390         %include temp;
15391         filename temp;
15392
15393         %em_tree_report;
15394     %end;
15395
15396    %else
15397    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15398
15399         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15400         %include temp;
15401         filename temp;
15402         %EM_TREE_OPENTREEVIEWER;
15403
15404     %end;
15405
15406    %else
15407    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15408
15409         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15410         %include temp;
15411         filename temp;
15412         %EM_TREE_CLOSETREEVIEWER;
15413
15414     %end;
15415
15416
15417     %doendm:
15418  %mend main;
15419
15420  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15422 +%macro em_tree_train;
15424 +   %if &EM_IMPORT_DATA eq %then %do;
15425 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15426 +       %put &em_codebar;
15427 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15428 +       %put &errormsg;
15429 +       %put &em_codebar;
15430 +       %goto doendm;
15431 +   %end;
15432 +   %else
15433 +       %let EMEXCEPTIONSTRING =;
15435 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15436 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15437 +        %put &em_codebar;
15438 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15439 +        %put &errormsg;
15440 +        %put &em_codebar;
15441 +        %goto doendm;
15442 +   %end;
15444 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15445 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15446 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15447 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15448 +        %put &em_codebar;
15449 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15450 +        %put &errormsg;
15451 +        %put &em_codebar;
15452 +        %goto doendm;
15453 +   %end;
15455 +   /* Initialize property macro variables */
15456 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15457 +   %include temp;
15458 +   filename temp;
15460 +   %EM_SetProperties;
15462 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15463 +   %EM_GETNAME(key=EMTREE, type=DATA);
15464 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15465 +     /* if import eq Y and no importtable defined, throw an exception */
15466 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15467 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15468 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15469 +         %put &em_codebar;
15470 +         %put &errmsg;
15471 +         %put &em_codebar;
15472 +         %goto doendm;
15473 +      %end;
15474 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15475 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15476 +         %put &em_codebar;
15477 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15478 +         %put &errormsg;
15479 +         %put &em_codebar;
15480 +         %goto doendm;
15481 +      %end;
15482 +      %else %do;
15483 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15484 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15485 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15486 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15487 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15488 +         %let dsid = %sysfunc(close(&dsid));
15489 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15490 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15491 +            %put &em_codebar;
15492 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15493 +            %put &errormsg;
15494 +            %put &em_codebar;
15495 +            %goto doendm;
15496 +         %end;
15497 +      %end;
15498 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15499 +         proc delete data=&EM_USER_EMTREE;
15500 +         run;
15501 +      %end;
15502 +   %end;
15503 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15504 +      proc delete data=&EM_USER_EMTREE;
15505 +      run;
15506 +   %end;
15508 +   /* load tree macros */
15509 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15510 +   %include temp;
15511 +   filename temp;
15513 +   /* data sets */
15514 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15515 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15516 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15518 +   /* files */
15519 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15521 +   /* check actual num of target levels */
15522 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15523 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15524 +                              nLevel=_nTargetLevel );
15525 +      %if &_nTargetLevel  > 2 %then %do;
15526 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15527 +        %put &em_codebar;
15528 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15529 +        %put &errormsg;
15530 +        %put &em_codebar;
15531 +        %goto doendm;
15532 +      %end;
15533 +   %end;
15535 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15536 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15537 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15538 +        %let costflag=0;
15539 +        data _null_;
15540 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15541 +          if eof then call symput("costflag", _N_);
15542 +        run;
15543 +        %if &costflag gt 0 %then %do;
15544 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15545 +          %put &em_codebar;
15546 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15547 +          %put &errormsg;
15548 +          %put &em_codebar;
15549 +          %goto doendm;
15550 +       %end;
15551 +     %end;
15552 +   %end;
15554 +   /* determine if multiple targets will be processed */
15555 +   %let em_tree_multipleTargets=N;
15556 +   %let em_tree_numTarget = 1;
15557 +   %let em_tree_targetVars=;
15559 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15560 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15561 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15562 +         %let em_tree_multipleTargets=N;
15563 +      %end;
15564 +      %else %do;
15565 +         /* create macro array of targets  */
15566 +         data _null_;
15567 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15568 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15569 +           if eof then
15570 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15571 +        run;
15573 +        %if &em_tree_numTarget gt 1 %then %do;
15574 +           %let em_tree_multipleTargets=Y;
15575 +        %end;
15576 +      %end;
15577 +   %end;
15579 +   /* create view of only necessary variable for performance reasons */
15580 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15581 +   data &tempData / view=&tempData;
15582 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15583 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15584 +       %EM_TARGET
15585 +     %end;
15586 +     %else %do;
15587 +       %if &em_tree_numTarget ne 0 %then %do;
15588 +         %do i=1 %to &em_tree_numTarget;
15589 +            &&em_tree_targetVars&i
15590 +         %end;
15591 +       %end;
15592 +     %end;
15593 +     );
15594 +   run;
15596 +   /* run Tree procedure */
15597 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15599 +   /* Check return code and throw exception if error is detected */
15600 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15601 +   %if &syserr %then %do;
15602 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15603 +     %goto doendm;
15604 +   %end;
15606 +   /* add decision score code if multiple targets are processed */
15607 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15608 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15609 +   %end;
15611 +   /* create outfit dataset if multiple score statements have been executed */
15612 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15614 +   /* create English Rules */
15615 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15616 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15617 +       %em_tree_makeEnglishRules;
15619 +       /* English Rules */
15620 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15622 +     %end;
15623 +   filename x;
15625 +   %doendm:
15626 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15627 +%macro EM_SetProperties;
15629 +   /* train properties */
15630 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15672 +   /* properties for interactive sample */
15673 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15678 +   /* report properties */
15679 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15685 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15686 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15687 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15688 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15689 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15690 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15691 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15693 +   /* score properties */
15694 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15695 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15697 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS2.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15699 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15700 +  %global &nLevel;
15701 +  proc dmdb batch data=&indata
15702 +    classout=_tmp_dmdbout;
15703 +    class &target;
15704 +  run;
15705 +  data _tmp_dmdbout;
15706 +    set _tmp_dmdbout;
15707 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15708 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15709 +  run;
15710 +  data _null_;
15711 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15712 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15713 +    %let dsid = %sysfunc(close(&dsid));
15714 +     call symput("&nLevel", put(&_obs, Best12.));
15715 +  run;
15717 +  proc datasets lib=work nolist;
15718 +     delete _tmp_dmdbout;
15719 +  run;
15720 +  quit;
15721 +%Mend EM_CheckBinaryTargetLevel;
15724 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15726 +  /* determine the number of obs in training data */
15727 +  proc sql;
15728 +    reset noprint;
15729 +    select count(*) into :em_nobs from &indata;
15730 +  quit;
15732 +  /* determine the number of input variables */
15733 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15734 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15736 +  /* retrieve targetEvent from decmeta */
15737 +  %let targetEvent=;
15738 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15739 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15740 +      data _null_;
15741 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15742 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15743 +      run;
15744 +    %end;
15745 +  %end;
15747 +  /* create targetTable if multipleTar eq Y */
15748 +  data temptarget;
15749 +    set &EM_DATA_VARIABLESET;
15750 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15751 +  run;
15753 + /* data sets */
15754 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15755 + %EM_GETNAME(key=EMTREE,        type=DATA);
15756 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15757 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15758 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15759 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15760 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15761 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15762 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15763 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15765 + /* files */
15766 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15767 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15769 + /* turn on pmml if requested */
15770 + %let nnpmml=0;
15771 + %if %symexist(EM_PMML) %then %do;
15772 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15773 +       %let nnpmml=1;
15775 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15776 +%end;
15778 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15780 + %if &nnpmml or &numClassTarget %then %do;
15782 +       /* create dmdb needed for pmml generation */
15783 +       %let tree_maxlevel = 512;
15784 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15785 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15786 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15787 +         %end;
15788 +       %end;
15789 +       %if &tree_maxlevel gt 0 %then %do;
15790 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15791 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15792 +       %end;
15794 +       %let targetOrderString =;
15795 +       %let targetString = ;
15796 +       data _null_;
15797 +          length orderString nameString $10000;
15798 +          retain orderString nameString;
15799 +          set &em_data_variableset end=eof;
15800 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15801 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15802 +          %end;
15803 +          %else %do;
15804 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15805 +          %end;          select(order);
15806 +            when('')        order ='DESC';
15807 +            when('FMTASC')  order='ASCFMT';
15808 +            when('FMTDESC') order='DESFMT';
15809 +            otherwise;
15810 +          end;
15811 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15812 +          nameString = trim(nameString)!!' '!!trim(NAME);
15814 +          if eof then do;
15815 +             call symput('targetOrderString', trim(orderString));
15816 +             call symput('targetString', trim(nameString));
15817 +          end;
15818 +       run;
15820 +       %let arborkluge= "work._treeDMDB";
15822 +       proc dmdb batch data=&indata
15823 +       %if &nnpmml %then %do;
15824 +           PMML
15825 +       %end;
15826 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15829 +   %if &nnpmml %then %do;
15830 +        %if "%EM_ID" ne "" %then %do;
15831 +          id %EM_ID;
15832 +        %end;
15833 +        %if &EM_NUM_CLASS gt 0 %then %do;
15834 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15835 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15836 +               &targetOrderString;
15837 +        %end;
15838 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15839 +          var %EM_INTERVAL;
15840 +        %end;
15841 +        target &targetString %EM_INTERVAL_TARGET;
15842 +        %if "%EM_FREQ" ne "" %then %do;
15843 +          freq %EM_FREQ;
15844 +        %end;
15845 +  %end;
15846 +  %else %do;
15847 +      class  &targetOrderString;
15848 +      target &targetString %EM_INTERVAL_TARGET;
15849 +  %end;
15850 +       run;
15851 +       quit;
15853 +       proc datasets lib=work nolist;
15854 +          delete classout varout;
15855 +       run;
15856 +       quit;
15858 +    %end;
15859 + %end;
15861 + /* run Arbor procedure */
15862 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15863 +  proc arbor data=&INDATA
15865 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15866 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15867 +  %end;
15869 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15870 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15871 +  %end;
15873 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15874 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15875 +  %end;
15877 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15878 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15879 +  %end;
15881 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15882 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15883 +  %end;
15885 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15886 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15887 +  %end;
15888 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15889 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15890 +  %end;
15891 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15892 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15893 +  %end;
15895 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15896 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15897 +      alpha = &EM_PROPERTY_SIGLEVEL
15898 +    %end;
15899 +  %end;
15901 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15902 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15903 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15904 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15905 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15907 +        padjust =
15908 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15909 +          &chaid
15910 +        %end;
15911 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15912 +          DEPTH
15913 +        %end;
15914 +      %end;
15915 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15916 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15917 +         pvars = &num_inputs
15918 +      %end;
15919 +    %end;
15920 +  %end;
15921 +  %else %do;
15922 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15923 +         padjust = NONE
15924 +      %end;
15925 +  %end;
15927 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15928 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15929 +    Maxrules = &num_nrules
15930 +  %end;
15932 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15933 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15934 +    Maxsurrs = &num_nsurrs
15935 +  %end;
15937 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15938 +     Missing=&EM_PROPERTY_MISSINGVALUE
15939 +  %end;
15941 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15942 +     USEVARONCE
15943 +  %end;
15945 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15946 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15947 +  %end;
15950 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15951 +    event = "&targetEvent"
15952 +  %end;
15954 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15955 +     DECSEARCH
15956 +  %end;
15958 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15959 +     PRIORSSEARCH
15960 +  %end;
15962 +  %if &arbor_1 ne %then %do;
15963 +    &arbor_1
15964 +  %end;
15966 +  %if &em_arbor ne %then %do;
15967 +     &em_arbor
15968 +  %end;
15969 +  ;
15970 + %end;
15971 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15972 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15973 +       interact;
15974 + %end;
15975 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15976 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15977 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15978 +    %put &em_codebar;
15979 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15980 +    %put &errormsg;
15981 +    %put &em_codebar;
15982 +    %goto doendm;
15983 +   %end;
15984 +   %else %do;
15985 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15986 +       interact;
15987 +   %end;
15988 + %end;
15990 + %else %do;
15991 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15992 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15993 +    %put &em_codebar;
15994 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15995 +    %put &errormsg;
15996 +    %put &em_codebar;
15997 +    %goto doendm;
15998 +   %end;
15999 +   %else %do;
16000 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16001 +        interact;
16002 +   %end;
16003 + %end;
16005 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16006 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16007 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16008 +    %end;
16010 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16011 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16012 +    %end;
16014 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16015 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16016 +    %end;
16018 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16019 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16020 +    %end;
16022 +    %if "%EM_FREQ" ne "" %then %do;
16023 +       freq %EM_FREQ;
16024 +    %end;
16026 +    %if "&multipleTar" eq "Y" %then %do;
16027 +       /* cycle through all target vars in variableset */
16028 +       %let tdsid = %sysfunc(open(temptarget));
16029 +       %if &tdsid %then %do;
16030 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16031 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16032 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16033 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16034 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16035 +             target &var / level = &lvl
16036 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16037 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16038 +             %end;
16039 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16040 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16041 +             %end;
16042 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16043 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16044 +             %end;
16045 +          %end;
16046 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16047 +       %end;
16048 +       useTarget variable = %EM_TARGET;
16049 +    %end;
16050 +    %else %do;
16051 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16052 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16053 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16054 +      %end;
16055 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16056 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16057 +      %end;
16058 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16059 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16060 +      %end;
16061 +    %end;
16063 +    %if "&multipleTar" eq "N" %then %do;
16064 +      &EM_DEC_STATEMENT;
16065 +    %end;
16067 +    Performance &EM_PROPERTY_PERFORMANCE
16068 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16069 +      nodesize=&EM_PROPERTY_NODESAMPLE
16070 +    %end;
16071 +    ;
16073 +    %if "&intFlag" eq "Y" %then %do;
16074 +       INTERACT Largest;
16075 +       Train maxnewdepth=0;
16076 +    %end;
16078 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16079 +         Assess
16080 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16081 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16082 +              %put &em_codebar;
16083 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16084 +              %put &errormsg;
16085 +              %put &em_codebar;
16086 +            %end;
16087 +            %else %do;
16088 +               Validata=&EM_IMPORT_VALIDATE
16089 +            %end;
16090 +         %end;
16091 +         %else %do;
16092 +           NoValidata
16093 +         %end;
16094 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16095 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16096 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16097 +               %if &dsid %then %do;
16098 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16099 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16100 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16101 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16102 +                   %else %do;
16103 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16104 +                      %else %let measure= MISC;
16105 +                   %end;
16106 +                 %end;
16107 +               %end;
16108 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16109 +            %end;
16110 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16111 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16112 +                 %let measure=ASE;
16113 +              %end;
16114 +              %else %do;
16115 +                 %let measure=MISC;
16116 +              %end;
16117 +            %end;
16118 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16119 +              %let measure=ASE;
16120 +            %end;
16121 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16122 +               %let measure = LIFT;
16123 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16124 +               %if &dsid %then %do;
16125 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16126 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16127 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16128 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16129 +                 %end;
16130 +               %end;
16131 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16132 +            %end;
16133 +            measure=&measure
16134 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16135 +               event = "&targetEvent"
16136 +            %end;
16137 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16138 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16139 +            %end;
16140 +         %end;
16141 +         %if "&multipleTar" eq "N" %then %do;
16142 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16143 +               CV
16144 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16145 +                 CVNITer = &EM_PROPERTY_CVNITER
16146 +               %end;
16147 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16148 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16149 +               %end;
16150 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16151 +                 CVSeed = &EM_PROPERTY_CVSEED
16152 +               %end;
16153 +            %end;
16154 +         %end;
16155 +       %end;
16156 +      ;
16158 +      %if "&intFlag" ne "Y" %then %do;
16159 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16160 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16161 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16162 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16164 +          SUBTREE &subtree
16165 +          %if "&subtree" eq "NLEAVES" %then %do;
16166 +            =&EM_PROPERTY_NSUBTREE
16167 +          %end;
16168 +          ;
16169 +        %end;
16171 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16172 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16173 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16174 +          %end;
16175 +       %end;
16176 +      %end;
16177 + %end;
16180 + MakeMacro nleaves = nleaves;
16181 + save
16182 + %if "&EM_USER_EMTREE" ne "" %then %do;
16183 +   MODEL=&EM_USER_EMTREE
16184 + %end;
16185 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16186 +   SEQUENCE=&EM_USER_OUTSEQ
16187 + %end;
16188 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16189 +   IMPORTANCE=&EM_USER_OUTIMPORT
16190 + %end;
16191 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16192 +   NODESTAT=&EM_USER_OUTNODES
16193 + %end;
16194 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16195 +   SUMMARY=&EM_USER_OUTSUMMARY
16196 + %end;
16197 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16198 +   STATSBYNODE=&EM_USER_OUTSTATS
16199 + %end;
16200 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16201 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16202 + %end;
16203 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16204 +   Pathlistnonmissing=&EM_USER_OUTPATH
16205 + %end;
16206 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16207 +   RULES = &EM_USER_OUTRULES
16208 + %end;
16209 + ;
16211 + %if "&intFlag" ne "Y" %then %do;
16213 +   %let lookupString = ;
16214 +   %if ^%symexist(EM_OPTION) %then
16215 +      %let EM_OPTION=;
16217 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16218 +      %let lookupString = LOOKUP=SELECT;
16219 +   %end;
16221 +   %let codetext=;
16222 +   %let norescodetxt=;
16224 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16225 +     %let codetext=&codetext DUMMY;
16226 +     %let norescodetxt=&norescodetxt DUMMY;
16227 +   %end;
16228 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16229 +     %let codetext=&codetext NOLEAFID;
16230 +     %let norescodetxt=&norescodetxt NOLEAFID;
16231 +   %end;
16232 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16233 +     %let norescodetxt=&norescodetxt NOPRED;
16234 +   %end;
16236 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16237 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16239 +   %if &nnpmml %then %do;
16240 +     code pmml;
16241 +   %end;
16243 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16244 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16245 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16246 +   %end;
16247 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16248 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16249 +   %end;
16250 + %end;
16252 + run;
16253 + quit;
16255 + /*%em_checkerror(); */
16256 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16257 +   /* Delete DMDB catalog */
16258 +   proc datasets lib=work nolist;
16259 +       delete _treeDMDB / mt=cat;
16260 +  run;
16261 +  %end;
16263 + %if &nnpmml %then %do;
16264 +    ods pmml close;
16265 + %end;
16267 +  %doendm:
16269 +%mend em_tree_runTreeProcedure;
16271 +%macro em_tree_createFitStats( multipleTar= );
16274 +  /* create targetTable is multipleTar eq Y */
16275 +  data temptarget;
16276 +    set &EM_DATA_VARIABLESET;
16277 +    where ROLE="TARGET";
16278 +  run;
16280 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16281 +   data &EM_USER_EMOUTFIT;
16282 +     length target $32;
16283 +     merge work.fit_train
16284 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16285 +       work.fit_valid
16286 +     %end;
16287 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16288 +       work.fit_test
16289 +     %end;
16290 +     ;
16291 +     %if "&multipleTar" eq "N" %then %do;
16292 +       target="%EM_TARGET";
16293 +     %end;
16294 +     %else %do;
16295 +       target = _TARGET_;
16296 +     %end;
16297 +     drop _NW_ _SUMW_
16298 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16299 +        _VSUMW_
16300 +     %end;
16301 +     ;
16302 +   run;
16304 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16305 +     proc datasets library=work nolist;
16306 +       delete fit_valid;
16307 +     run;
16308 +   %end;
16309 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16310 +     proc datasets library=work nolist;
16311 +       delete fit_test;
16312 +     run;
16313 +   %end;
16315 +%mend em_tree_createFitStats;
16318 +%macro em_tree_makeEnglishRules;
16320 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16321 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16323 +  /* verify that necessary tables exist and if not, skip processing */
16324 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16325 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16326 +    %goto doendm;
16327 +  %end;
16328 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16329 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16330 +    %goto doendm;
16331 +  %end;
16333 +  /* determine length of variable in outpath dataset */
16334 +  %let vlength= ;
16335 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16336 +  %if &dsid ne %then %do;
16337 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16338 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16339 +  %end;
16340 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16342 +  data tempoutpath;
16343 +    length varname $&vlength;
16344 +    retain varname;
16345 +    set &EM_USER_OUTPATH;
16347 +    if ^missing(variable) then varname=variable;
16348 +    else if ^missing(var_name) then varname=var_name;
16349 +    output;
16350 +  run;
16352 +  /* create an array of generated predicted variable names */
16353 +  %let tree_pred_vars = ;
16354 +  %let tree_pred_label = ;
16355 +  %let numpred= 0;
16356 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16358 +    data _null_;
16359 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16360 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16361 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16362 +     if eof then
16363 +       call symput('numpred', strip(put(_N_, BEST.)));
16364 +    run;
16365 +  %end;
16367 +  /* determine if NPRIORS exists in outnodes  */
16368 +  %local nprior_flag;
16369 +  data _null_;
16370 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16371 +    if eof then do;
16372 +      call symput('nprior_flag', strip(put(npriors, best.)));
16373 +    end;
16374 +  run;
16376 +  proc sort data=tempoutpath; by node; run;
16377 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16379 +  data tempoutpath;
16380 +    merge tempoutpath(in=_a) outnodes(keep= node
16381 +    %if "&nprior_flag" ne "." %then %do;
16382 +      NPRIORS
16383 +    %end;
16384 +    %else %do;
16385 +      N
16386 +    %end;
16387 +    %if &numpred gt 0 %then %do;
16388 +      %do i=1 %to &numpred;
16389 +        &&tree_pred_vars&i
16390 +      %end;
16391 +    %end;
16392 +    );
16393 +    by node;
16394 +    if _a;
16395 +  run;
16397 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16399 +  data _null_;
16400 +    file x;
16401 +    set tempoutpath;
16402 +    by node descending varname;
16403 +    retain origvar oldnode string;
16404 +    length origvar $32 oldnode 8 string $200;
16406 +    if _N_ = 1 then do;
16407 +      origvar = varname;
16408 +      oldnode = node;
16409 +    end;
16411 +    if first.node then do;
16412 +       put "&EM_CODEBAR";
16413 +       put " Node = " node;
16414 +       put "&EM_CODEBAR";
16415 +    end;
16417 +      if first.varname then do;
16418 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16419 +            if MISSING(CHARACTER_VALUE) then do;
16420 +             if NUMERIC_VALUE ne .  then do;
16421 +              if ^first.node then do;
16422 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16423 +              end;
16424 +              else do;
16425 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16426 +              end;
16427 +             end;
16428 +            end;
16429 +            else do;
16430 +              if ^first.node then do;
16431 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16432 +              end;
16433 +              else do;
16434 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16435 +              end;
16436 +             end;
16437 +         end;
16438 +         else if RELATION in ("=") then do;
16439 +            if ^first.node then do;
16440 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16441 +            end;
16442 +            else do;
16443 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16444 +            end;
16445 +         end;
16446 +         else if RELATION in ("ISMISSING") then do;
16447 +            if ^first.node then do;
16448 +              string = " AND "|| strip(varname) || " equals Missing";
16449 +            end;
16450 +            else do;
16451 +              string = "if "|| strip(varname) ||" equals Missing";
16452 +            end;
16453 +         end;
16454 +         else if RELATION in ("ISNOTMISSING") then do;
16455 +            if ^first.node then do;
16456 +              string = " AND "|| strip(varname) || " equals All Values";
16457 +            end;
16458 +            else do;
16459 +              string = "if "|| strip(varname) ||" equals All Values";
16460 +            end;
16461 +         end;
16462 +         if ^missing(varname) then origvar = varname;
16463 +         oldnode=node;
16465 +      end;
16466 +      else do;
16467 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16468 +          if MISSING(CHARACTER_VALUE) then do;
16469 +           if  NUMERIC_VALUE ne .  then do;
16470 +            if ^MISSING(string) then
16471 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16472 +            else
16473 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16474 +           end;
16475 +          end;
16476 +          else do;
16477 +            if ^MISSING(string) then
16478 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16479 +            else
16480 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16481 +          end;
16483 +         end;
16484 +         else if RELATION in ("=") then do;
16485 +           string = strip(string)||", "||strip(character_value);
16486 +         end;
16487 +         else if RELATION in ("ISMISSING") then do;
16489 +         end;
16490 +         if ^missing(varname) then origvar = varname;
16491 +         oldnode=node;
16492 +      end;
16493 +      if last.varname then do;
16494 +         if RELATION in ("ISMISSING") then do;
16495 +           if ^first.varname then do;
16496 +             string = strip(string) || " or MISSING";
16497 +           end;
16498 +         end;
16499 +         put string;
16500 +         if ^missing(varname) then origvar = varname;
16501 +         oldnode=node;
16502 +      end;
16504 +      if last.node then do;
16505 +         put "then ";
16506 +         put " Tree Node Identifier   = " node;
16508 +         %if "&nprior_flag" ne "." %then %do;
16509 +           put " Number of Observations = " NPRIORS;
16510 +         %end;
16511 +         %else %do;
16512 +           put " Number of Observations = " N;
16513 +         %end;
16515 +         %if &numpred gt 0 %then %do;
16516 +           %do i=1 %to &numpred;
16517 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16518 +           %end;
16519 +         %end;
16521 +         put " ";
16522 +         if ^missing(varname) then origvar = varname;
16523 +         oldnode=node;
16524 +      end;
16526 +  run;
16528 +  proc datasets lib=work nolist;
16529 +    delete tempoutpath outnodes;
16530 +  run;
16532 +  %doendm:
16533 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS2.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1596687 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633958912 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 70699408 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Created macro variable NLEAVES equal to 8.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_EMTREE has 2275 observations and 4 variables.
NOTE: The data set EMWS2.TREE2_OUTNODES has 15 observations and 24 variables.
NOTE: The data set EMWS2.TREE2_OUTPATH has 55 observations and 7 variables.
NOTE: The data set EMWS2.TREE2_OUTRULES has 386 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS2.TREE2_OUTSTATS has 105 observations and 5 variables.
NOTE: The data set EMWS2.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS2.TREE2_OUTTOPOLOGY has 15 observations and 5 variables.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\TREEFLOW.sas opened.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\TREEPUBLISH.sas opened.
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS2.EM_TREE2.VIEW used (Total process time):
      real time           3.65 seconds
      cpu time            3.42 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           3.65 seconds
      cpu time            3.42 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS2.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 55 observations read from the data set EMWS2.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 15 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=20Apr2017:01:21:22,
      Create Time=20Apr2017:01:21:22
 
NOTE: 94 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16535
16536  *------------------------------------------------------------*;
16537  * End TRAIN: Tree2;
16538  *------------------------------------------------------------*;
 
16539  *------------------------------------------------------------*;
16540  * Close any missing semi colons;
16541  *------------------------------------------------------------*;
16542  ;
16543  ;
16544  ;
16545  ;
16546  quit;
16547  *------------------------------------------------------------*;
16548  * Close any unbalanced quotes;
16549  *------------------------------------------------------------*;
16550  /*; *"; *'; */
16551  ;
16552  run;
16553  quit;
16554  /* Reset EM Options */
16555  options formchar="|----|+|---+=|-/\<>*";
16556  options nocenter ls=256 ps=10000;
16557  goptions reset=all device=GIF NODISPLAY;
 
16558  proc sort data=WORK.EM_USER_REPORT;
16559  by ID VIEW;
16560  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 20, 2017
Time:                01:21:23
*------------------------------------------------------------*
16662  %let EMEXCEPTIONSTRING=;
16663  *------------------------------------------------------------*;
16664  * SCORE: Tree2;
16665  *------------------------------------------------------------*;
16666  %let EM_ACTION = SCORE;
16667  %let syscc = 0;
16668  %macro main;
16669
16670    %if %upcase(&EM_ACTION) = CREATE %then %do;
16671      filename temp catalog 'sashelp.emmodl.tree_create.source';
16672      %include temp;
16673      filename temp;
16674
16675      %em_tree_create;
16676    %end;
16677
16678     %else
16679     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16680
16681         filename temp catalog 'sashelp.emmodl.tree_train.source';
16682         %include temp;
16683         filename temp;
16684         %em_tree_train;
16685     %end;
16686
16687    %else
16688    %if %upcase(&EM_ACTION) = SCORE %then %do;
16689      filename temp catalog 'sashelp.emmodl.tree_score.source';
16690      %include temp;
16691      filename temp;
16692
16693      %em_tree_score;
16694
16695    %end;
16696
16697    %else
16698    %if %upcase(&EM_ACTION) = REPORT %then %do;
16699
16700         filename temp catalog 'sashelp.emmodl.tree_report.source';
16701         %include temp;
16702         filename temp;
16703
16704         %em_tree_report;
16705     %end;
16706
16707    %else
16708    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16709
16710         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16711         %include temp;
16712         filename temp;
16713         %EM_TREE_OPENTREEVIEWER;
16714
16715     %end;
16716
16717    %else
16718    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16719
16720         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16721         %include temp;
16722         filename temp;
16723         %EM_TREE_CLOSETREEVIEWER;
16724
16725     %end;
16726
16727
16728     %doendm:
16729  %mend main;
16730
16731  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16733 +%macro em_tree_score;
16735 +   /* determine if multiple targets will be processed */
16736 +   %let em_tree_multipleTargets=N;
16737 +   %let em_tree_numTarget=1;
16738 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16739 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16740 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16741 +         %let em_tree_multipleTargets=N;
16742 +      %end;
16743 +      %else %do;
16744 +         /* create macro array of targets  */
16745 +         data _null_;
16746 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16747 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16748 +           if eof then
16749 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16750 +        run;
16752 +        %if &em_tree_numTarget gt 1 %then %do;
16753 +           %let em_tree_multipleTargets=Y;
16754 +        %end;
16755 +      %end;
16756 +   %end;
16758 +   /* build flow and publish scoring code */
16759 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16760 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16762 +   filename treeflow "&EM_USER_TREEFLOW";
16763 +   filename treepub "&EM_USER_TREEPUBLISH";
16765 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16766 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16768 +   %em_copyfile(infref=treeflow, outfref=flowref);
16769 +   %em_copyfile(infref=treepub, outfref=pubref);
16771 +   filename treeflow;
16772 +   filename treepub;
16774 +   /* if priors are used, add code to generate unadjusted residuals in export */
16775 +   %let useAdjPriors = N;
16776 +   data _null_;
16777 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16778 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16779 +   run;
16780 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16781 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16782 +      %include temp;
16783 +      filename temp;
16785 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16786 +      filename adjref "&EM_USER_adjResidualCode";
16787 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16789 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16791 +      filename adjref;
16792 +   %end;
16794 +   /* LEAF */
16795 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16796 +      data _null_;
16797 +        file flowref mod;
16798 +        put 'drop _LEAF_;';
16799 +      run;
16801 +      data _null_;
16802 +        file pubref mod;
16803 +        put 'drop _LEAF_;';
16804 +      run;
16806 +   %end;
16808 +   filename flowref;
16809 +   filename pubref;
16811 +   /* em_metachange code */
16812 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16813 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16814 +   %end;
16816 +   /* variable selection based on importance stat    */
16817 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16818 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16819 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16820 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16821 +     %let obs = %sysfunc(fetch(&dsid));
16822 +     %do %while(&obs=0);
16823 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16824 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16825 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16826 +       %let obs = %sysfunc(fetch(&dsid));
16827 +     %end;
16828 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16829 +   %end;
16831 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16832 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16833 +    %let tree_pred_vars = ;
16834 +    %let tree_pred_lvl =;
16835 +    %let numpred= 0;
16837 +    data _null_;
16838 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16839 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16840 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16841 +     if eof then
16842 +       call symput('numpred', strip(put(_N_, BEST.)));
16843 +    run;
16844 +   %end;
16846 +   %if &numpred ne 0 %then %do;
16847 +    %do i=1 %to &numpred;
16848 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16849 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16850 +    %end;
16851 +   %end;
16853 +   /* determine if multiple targets will be processed */
16854 +   %let em_tree_multipleTargets=N;
16855 +   %let em_tree_numTarget=1;
16856 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16857 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16858 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16859 +         %let em_tree_multipleTargets=N;
16860 +      %end;
16861 +      %else %do;
16862 +        data _null_;
16863 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16864 +          if eof then
16865 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16866 +        run;
16868 +        %if &em_tree_numTarget gt 1 %then %do;
16869 +           %let em_tree_multipleTargets=Y;
16870 +        %end;
16871 +     %end;
16872 +   %end;
16874 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16875 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16877 +      /* variable importance */
16878 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16879 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16881 +         %let validexist=0;
16882 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16883 +           %let validexist=1;
16884 +         %end;
16886 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16887 +         /* and the columns may not be generated                                                                                 */
16888 +         %let em_tree_cvexists=;
16889 +         %let em_tree_surrexists=.;
16890 +         data _null_;
16891 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16892 +            if eof then do ;
16893 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16894 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16895 +            end;
16896 +         run;
16898 +         data &EM_USER_OUTIMPORT;
16899 +            set &EM_USER_OUTIMPORT;
16901 +            /* format columns based on Precison value specified */
16902 +            format importance 15.&EM_PROPERTY_PRECISION
16903 +                 %if &validexist %then %do;
16904 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16905 +                 %end;
16906 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16907 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16908 +                 %end;
16909 +            ;
16910 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16911 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16912 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16913 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16914 +                 %if "&em_tree_surrexists" ne "" %then %do;
16915 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16916 +                 %end;
16917 +                 %if &validexist %then %do;
16918 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16919 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16920 +                 %end;
16921 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16922 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16923 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16924 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16925 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16926 +                 %end;
16927 +            ;
16928 +         run;
16930 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16931 +      %end;
16932 +   %end;
16934 +   %doendm:
16935 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=20Apr2017:01:21:22,
      Create Time=20Apr2017:01:21:22
 
NOTE: 170 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=20Apr2017:01:21:22,
      Create Time=20Apr2017:01:21:22
 
NOTE: 148 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5983,
      Last Modified=20Apr2017:01:21:22,
      Create Time=20Apr2017:01:21:22
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5354,
      Last Modified=20Apr2017:01:21:22,
      Create Time=20Apr2017:01:21:22
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 75 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 76 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 77 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 77 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 78 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 79 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 80 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 81 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 82 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 82 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 83 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 83 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 84 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 85 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 85 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 86 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 90 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16936
16937  *------------------------------------------------------------*;
16938  * End SCORE: Tree2;
16939  *------------------------------------------------------------*;
 
16940  proc sort data=WORK.EM_METACHANGE;
16941  by key uname;
16942  run;
 
NOTE: There were 87 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16943  filename x "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\CDELTA_TRAIN.sas";
16944  data _null_;
16945  file x;
16946  put 'if upcase(NAME) = "BOTHPAYM" then do;';
16947  put 'ROLE = "REJECTED";';
16948  put 'end;';
16949  put 'else ';
16950  put 'if upcase(NAME) = "BUYPROP" then do;';
16951  put 'ROLE = "REJECTED";';
16952  put 'end;';
16953  put 'else ';
16954  put 'if upcase(NAME) = "CATALOGCNT" then do;';
16955  put 'ROLE = "REJECTED";';
16956  put 'end;';
16957  put 'else ';
16958  put 'if upcase(NAME) = "CCPAYM" then do;';
16959  put 'ROLE = "REJECTED";';
16960  put 'end;';
16961  put 'else ';
16962  put 'if upcase(NAME) = "DEPT01" then do;';
16963  put 'ROLE = "REJECTED";';
16964  put 'end;';
16965  put 'else ';
16966  put 'if upcase(NAME) = "DEPT02" then do;';
16967  put 'ROLE = "REJECTED";';
16968  put 'end;';
16969  put 'else ';
16970  put 'if upcase(NAME) = "DEPT03" then do;';
16971  put 'ROLE = "REJECTED";';
16972  put 'end;';
16973  put 'else ';
16974  put 'if upcase(NAME) = "DEPT04" then do;';
16975  put 'ROLE = "REJECTED";';
16976  put 'end;';
16977  put 'else ';
16978  put 'if upcase(NAME) = "DEPT05" then do;';
16979  put 'ROLE = "REJECTED";';
16980  put 'end;';
16981  put 'else ';
16982  put 'if upcase(NAME) = "DEPT06" then do;';
16983  put 'ROLE = "REJECTED";';
16984  put 'end;';
16985  put 'else ';
16986  put 'if upcase(NAME) = "DEPT07" then do;';
16987  put 'ROLE = "REJECTED";';
16988  put 'end;';
16989  put 'else ';
16990  put 'if upcase(NAME) = "DEPT08" then do;';
16991  put 'ROLE = "REJECTED";';
16992  put 'end;';
16993  put 'else ';
16994  put 'if upcase(NAME) = "DEPT09" then do;';
16995  put 'ROLE = "REJECTED";';
16996  put 'end;';
16997  put 'else ';
16998  put 'if upcase(NAME) = "DEPT10" then do;';
16999  put 'ROLE = "REJECTED";';
17000  put 'end;';
17001  put 'else ';
17002  put 'if upcase(NAME) = "DEPT11" then do;';
17003  put 'ROLE = "REJECTED";';
17004  put 'end;';
17005  put 'else ';
17006  put 'if upcase(NAME) = "DEPT12" then do;';
17007  put 'ROLE = "REJECTED";';
17008  put 'end;';
17009  put 'else ';
17010  put 'if upcase(NAME) = "DEPT13" then do;';
17011  put 'ROLE = "REJECTED";';
17012  put 'end;';
17013  put 'else ';
17014  put 'if upcase(NAME) = "DEPT14" then do;';
17015  put 'ROLE = "REJECTED";';
17016  put 'end;';
17017  put 'else ';
17018  put 'if upcase(NAME) = "DEPT15" then do;';
17019  put 'ROLE = "REJECTED";';
17020  put 'end;';
17021  put 'else ';
17022  put 'if upcase(NAME) = "DEPT16" then do;';
17023  put 'ROLE = "REJECTED";';
17024  put 'end;';
17025  put 'else ';
17026  put 'if upcase(NAME) = "DEPT17" then do;';
17027  put 'ROLE = "REJECTED";';
17028  put 'end;';
17029  put 'else ';
17030  put 'if upcase(NAME) = "DEPT18" then do;';
17031  put 'ROLE = "REJECTED";';
17032  put 'end;';
17033  put 'else ';
17034  put 'if upcase(NAME) = "DEPT19" then do;';
17035  put 'ROLE = "REJECTED";';
17036  put 'end;';
17037  put 'else ';
17038  put 'if upcase(NAME) = "DEPT20" then do;';
17039  put 'ROLE = "REJECTED";';
17040  put 'end;';
17041  put 'else ';
17042  put 'if upcase(NAME) = "DEPT21" then do;';
17043  put 'ROLE = "REJECTED";';
17044  put 'end;';
17045  put 'else ';
17046  put 'if upcase(NAME) = "DEPT22" then do;';
17047  put 'ROLE = "REJECTED";';
17048  put 'end;';
17049  put 'else ';
17050  put 'if upcase(NAME) = "DEPT23" then do;';
17051  put 'ROLE = "REJECTED";';
17052  put 'end;';
17053  put 'else ';
17054  put 'if upcase(NAME) = "DEPT24" then do;';
17055  put 'ROLE = "REJECTED";';
17056  put 'end;';
17057  put 'else ';
17058  put 'if upcase(NAME) = "DEPT26" then do;';
17059  put 'ROLE = "REJECTED";';
17060  put 'end;';
17061  put 'else ';
17062  put 'if upcase(NAME) = "DEPT27" then do;';
17063  put 'ROLE = "REJECTED";';
17064  put 'end;';
17065  put 'else ';
17066  put 'if upcase(NAME) = "DOLINDEA" then do;';
17067  put 'ROLE = "REJECTED";';
17068  put 'end;';
17069  put 'else ';
17070  put 'if upcase(NAME) = "DOLINDET" then do;';
17071  put 'ROLE = "REJECTED";';
17072  put 'end;';
17073  put 'else ';
17074  put 'if upcase(NAME) = "DOLLARQ01" then do;';
17075  put 'ROLE = "REJECTED";';
17076  put 'end;';
17077  put 'else ';
17078  put 'if upcase(NAME) = "DOLLARQ02" then do;';
17079  put 'ROLE = "REJECTED";';
17080  put 'end;';
17081  put 'else ';
17082  put 'if upcase(NAME) = "DOLLARQ03" then do;';
17083  put 'ROLE = "REJECTED";';
17084  put 'end;';
17085  put 'else ';
17086  put 'if upcase(NAME) = "DOLLARQ04" then do;';
17087  put 'ROLE = "REJECTED";';
17088  put 'end;';
17089  put 'else ';
17090  put 'if upcase(NAME) = "DOLLARQ05" then do;';
17091  put 'ROLE = "REJECTED";';
17092  put 'end;';
17093  put 'else ';
17094  put 'if upcase(NAME) = "DOLLARQ06" then do;';
17095  put 'ROLE = "REJECTED";';
17096  put 'end;';
17097  put 'else ';
17098  put 'if upcase(NAME) = "DOLLARQ07" then do;';
17099  put 'ROLE = "REJECTED";';
17100  put 'end;';
17101  put 'else ';
17102  put 'if upcase(NAME) = "DOLLARQ08" then do;';
17103  put 'ROLE = "REJECTED";';
17104  put 'end;';
17105  put 'else ';
17106  put 'if upcase(NAME) = "DOLLARQ09" then do;';
17107  put 'ROLE = "REJECTED";';
17108  put 'end;';
17109  put 'else ';
17110  put 'if upcase(NAME) = "DOLLARQ10" then do;';
17111  put 'ROLE = "REJECTED";';
17112  put 'end;';
17113  put 'else ';
17114  put 'if upcase(NAME) = "DOLLARQ11" then do;';
17115  put 'ROLE = "REJECTED";';
17116  put 'end;';
17117  put 'else ';
17118  put 'if upcase(NAME) = "DOLLARQ12" then do;';
17119  put 'ROLE = "REJECTED";';
17120  put 'end;';
17121  put 'else ';
17122  put 'if upcase(NAME) = "DOLLARQ13" then do;';
17123  put 'ROLE = "REJECTED";';
17124  put 'end;';
17125  put 'else ';
17126  put 'if upcase(NAME) = "DOLLARQ14" then do;';
17127  put 'ROLE = "REJECTED";';
17128  put 'end;';
17129  put 'else ';
17130  put 'if upcase(NAME) = "DOLLARQ15" then do;';
17131  put 'ROLE = "REJECTED";';
17132  put 'end;';
17133  put 'else ';
17134  put 'if upcase(NAME) = "DOLLARQ16" then do;';
17135  put 'ROLE = "REJECTED";';
17136  put 'end;';
17137  put 'else ';
17138  put 'if upcase(NAME) = "DOLLARQ17" then do;';
17139  put 'ROLE = "REJECTED";';
17140  put 'end;';
17141  put 'else ';
17142  put 'if upcase(NAME) = "DOLLARQ18" then do;';
17143  put 'ROLE = "REJECTED";';
17144  put 'end;';
17145  put 'else ';
17146  put 'if upcase(NAME) = "DOLLARQ19" then do;';
17147  put 'ROLE = "REJECTED";';
17148  put 'end;';
17149  put 'else ';
17150  put 'if upcase(NAME) = "DOLLARQ20" then do;';
17151  put 'ROLE = "REJECTED";';
17152  put 'end;';
17153  put 'else ';
17154  put 'if upcase(NAME) = "DOLLARQ21" then do;';
17155  put 'ROLE = "REJECTED";';
17156  put 'end;';
17157  put 'else ';
17158  put 'if upcase(NAME) = "DOLLARQ22" then do;';
17159  put 'ROLE = "REJECTED";';
17160  put 'end;';
17161  put 'else ';
17162  put 'if upcase(NAME) = "DOLNETDA" then do;';
17163  put 'ROLE = "REJECTED";';
17164  put 'end;';
17165  put 'else ';
17166  put 'if upcase(NAME) = "DOLNETDT" then do;';
17167  put 'ROLE = "REJECTED";';
17168  put 'end;';
17169  put 'else ';
17170  put 'if upcase(NAME) = "METHPAYM" then do;';
17171  put 'ROLE = "REJECTED";';
17172  put 'end;';
17173  put 'else ';
17174  put 'if upcase(NAME) = "MONLAST" then do;';
17175  put 'ROLE = "REJECTED";';
17176  put 'end;';
17177  put 'else ';
17178  put 'if upcase(NAME) = "PCPAYM" then do;';
17179  put 'ROLE = "REJECTED";';
17180  put 'end;';
17181  put 'else ';
17182  put 'if upcase(NAME) = "Q_RESPOND0" then do;';
17183  put 'ROLE = "ASSESS";';
17184  put 'end;';
17185  put 'else ';
17186  put 'if upcase(NAME) = "Q_RESPOND1" then do;';
17187  put 'ROLE = "ASSESS";';
17188  put 'end;';
17189  put 'else ';
17190  put 'if upcase(NAME) = "TOTORDQ01" then do;';
17191  put 'ROLE = "REJECTED";';
17192  put 'end;';
17193  put 'else ';
17194  put 'if upcase(NAME) = "TOTORDQ02" then do;';
17195  put 'ROLE = "REJECTED";';
17196  put 'end;';
17197  put 'else ';
17198  put 'if upcase(NAME) = "TOTORDQ03" then do;';
17199  put 'ROLE = "REJECTED";';
17200  put 'end;';
17201  put 'else ';
17202  put 'if upcase(NAME) = "TOTORDQ04" then do;';
17203  put 'ROLE = "REJECTED";';
17204  put 'end;';
17205  put 'else ';
17206  put 'if upcase(NAME) = "TOTORDQ05" then do;';
17207  put 'ROLE = "REJECTED";';
17208  put 'end;';
17209  put 'else ';
17210  put 'if upcase(NAME) = "TOTORDQ06" then do;';
17211  put 'ROLE = "REJECTED";';
17212  put 'end;';
17213  put 'else ';
17214  put 'if upcase(NAME) = "TOTORDQ07" then do;';
17215  put 'ROLE = "REJECTED";';
17216  put 'end;';
17217  put 'else ';
17218  put 'if upcase(NAME) = "TOTORDQ08" then do;';
17219  put 'ROLE = "REJECTED";';
17220  put 'end;';
17221  put 'else ';
17222  put 'if upcase(NAME) = "TOTORDQ09" then do;';
17223  put 'ROLE = "REJECTED";';
17224  put 'end;';
17225  put 'else ';
17226  put 'if upcase(NAME) = "TOTORDQ10" then do;';
17227  put 'ROLE = "REJECTED";';
17228  put 'end;';
17229  put 'else ';
17230  put 'if upcase(NAME) = "TOTORDQ11" then do;';
17231  put 'ROLE = "REJECTED";';
17232  put 'end;';
17233  put 'else ';
17234  put 'if upcase(NAME) = "TOTORDQ12" then do;';
17235  put 'ROLE = "REJECTED";';
17236  put 'end;';
17237  put 'else ';
17238  put 'if upcase(NAME) = "TOTORDQ13" then do;';
17239  put 'ROLE = "REJECTED";';
17240  put 'end;';
17241  put 'else ';
17242  put 'if upcase(NAME) = "TOTORDQ14" then do;';
17243  put 'ROLE = "REJECTED";';
17244  put 'end;';
17245  put 'else ';
17246  put 'if upcase(NAME) = "TOTORDQ15" then do;';
17247  put 'ROLE = "REJECTED";';
17248  put 'end;';
17249  put 'else ';
17250  put 'if upcase(NAME) = "TOTORDQ16" then do;';
17251  put 'ROLE = "REJECTED";';
17252  put 'end;';
17253  put 'else ';
17254  put 'if upcase(NAME) = "TOTORDQ17" then do;';
17255  put 'ROLE = "REJECTED";';
17256  put 'end;';
17257  put 'else ';
17258  put 'if upcase(NAME) = "TOTORDQ18" then do;';
17259  put 'ROLE = "REJECTED";';
17260  put 'end;';
17261  put 'else ';
17262  put 'if upcase(NAME) = "TOTORDQ19" then do;';
17263  put 'ROLE = "REJECTED";';
17264  put 'end;';
17265  put 'else ';
17266  put 'if upcase(NAME) = "TOTORDQ20" then do;';
17267  put 'ROLE = "REJECTED";';
17268  put 'end;';
17269  put 'else ';
17270  put 'if upcase(NAME) = "TOTORDQ21" then do;';
17271  put 'ROLE = "REJECTED";';
17272  put 'end;';
17273  put 'else ';
17274  put 'if upcase(NAME) = "TOTORDQ22" then do;';
17275  put 'ROLE = "REJECTED";';
17276  put 'end;';
17277  put 'else ';
17278  put 'if upcase(NAME) = "UNITSIDD" then do;';
17279  put 'ROLE = "REJECTED";';
17280  put 'end;';
17281  put 'else ';
17282  put 'if upcase(NAME) = "UNITSLAP" then do;';
17283  put 'ROLE = "REJECTED";';
17284  put 'end;';
17285  put 'else ';
17286  put 'if upcase(NAME) = "UNTLANPO" then do;';
17287  put 'ROLE = "REJECTED";';
17288  put 'end;';
17289  put 'else ';
17290  put 'if upcase(NAME) = "_NODE_" then do;';
17291  put 'ROLE = "SEGMENT";';
17292  put 'LEVEL = "NOMINAL";';
17293  put 'end;';
17294  run;
 
NOTE: The file X is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=20Apr2017:01:21:23,
      Create Time=19Apr2017:01:41:14
 
NOTE: 348 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17295  filename x;
NOTE: Fileref X has been deassigned.
 
17296  filename emflow "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas";
17297  *------------------------------------------------------------*;
17298  * Tree2: Scoring DATA data;
17299  *------------------------------------------------------------*;
17300  data EMWS2.Tree2_TRAIN
17301  / view=EMWS2.Tree2_TRAIN
17302  ;
17303  set EMWS2.Part_TRAIN
17304  ;
17305  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas.
17306 +****************************************************************;
17307 +******             DECISION TREE SCORING CODE             ******;
17308 +****************************************************************;
17309 +
17310 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17311 +LENGTH F_RESPOND  $   12;
17312 +LENGTH I_RESPOND  $   12;
17313 +LENGTH _WARN_  $    4;
17314 +
17315 +******              LABELS FOR NEW VARIABLES              ******;
17316 +label _NODE_ = 'Node' ;
17317 +label _LEAF_ = 'Leaf' ;
17318 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17319 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17320 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17321 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17322 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17323 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17324 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17325 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17326 +label F_RESPOND = 'From: RESPOND' ;
17327 +label I_RESPOND = 'Into: RESPOND' ;
17328 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17329 +label _WARN_ = 'Warnings' ;
17330 +
17331 +
17332 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17333 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17334 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17335 +
17336 +
17337 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17338 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17339 +
17340 +******             ASSIGN OBSERVATION TO NODE             ******;
17341 +IF  NOT MISSING(DOLL24 ) AND
17342 +                 121.2 <= DOLL24  THEN DO;
17343 +  IF  NOT MISSING(DEPT25 ) AND
17344 +                    32.5 <= DEPT25  THEN DO;
17345 +    _NODE_  =                    7;
17346 +    _LEAF_  =                    8;
17347 +    P_RESPOND1  =      0.4390243902439;
17348 +    P_RESPOND0  =     0.56097560975609;
17349 +    Q_RESPOND1  =      0.4390243902439;
17350 +    Q_RESPOND0  =     0.56097560975609;
17351 +    V_RESPOND1  =      0.3076923076923;
17352 +    V_RESPOND0  =     0.69230769230769;
17353 +    I_RESPOND  = '0' ;
17354 +    U_RESPOND  =                    0;
17355 +    END;
17356 +  ELSE DO;
17357 +    IF  NOT MISSING(FREQPRCH ) AND
17358 +                       8.5 <= FREQPRCH  THEN DO;
17359 +      _NODE_  =                   13;
17360 +      _LEAF_  =                    7;
17361 +      P_RESPOND1  =     0.17607413647851;
17362 +      P_RESPOND0  =     0.82392586352148;
17363 +      Q_RESPOND1  =     0.17607413647851;
17364 +      Q_RESPOND0  =     0.82392586352148;
17365 +      V_RESPOND1  =     0.17874396135265;
17366 +      V_RESPOND0  =     0.82125603864734;
17367 +      I_RESPOND  = '0' ;
17368 +      U_RESPOND  =                    0;
17369 +      END;
17370 +    ELSE DO;
17371 +      _NODE_  =                   12;
17372 +      _LEAF_  =                    6;
17373 +      P_RESPOND1  =     0.10013175230566;
17374 +      P_RESPOND0  =     0.89986824769433;
17375 +      Q_RESPOND1  =     0.10013175230566;
17376 +      Q_RESPOND0  =     0.89986824769433;
17377 +      V_RESPOND1  =       0.089590443686;
17378 +      V_RESPOND0  =     0.91040955631399;
17379 +      I_RESPOND  = '0' ;
17380 +      U_RESPOND  =                    0;
17381 +      END;
17382 +    END;
17383 +  END;
17384 +ELSE DO;
17385 +  IF  NOT MISSING(TENURE ) AND
17386 +    TENURE  <                  1.5 THEN DO;
17387 +    IF  NOT MISSING(DAYLAST ) AND
17388 +                      46.5 <= DAYLAST  THEN DO;
17389 +      _NODE_  =                    9;
17390 +      _LEAF_  =                    2;
17391 +      P_RESPOND1  =     0.11111111111111;
17392 +      P_RESPOND0  =     0.88888888888888;
17393 +      Q_RESPOND1  =     0.11111111111111;
17394 +      Q_RESPOND0  =     0.88888888888888;
17395 +      V_RESPOND1  =                    0;
17396 +      V_RESPOND0  =                    1;
17397 +      I_RESPOND  = '0' ;
17398 +      U_RESPOND  =                    0;
17399 +      END;
17400 +    ELSE DO;
17401 +      _NODE_  =                    8;
17402 +      _LEAF_  =                    1;
17403 +      P_RESPOND1  =     0.95454545454545;
17404 +      P_RESPOND0  =     0.04545454545454;
17405 +      Q_RESPOND1  =     0.95454545454545;
17406 +      Q_RESPOND0  =     0.04545454545454;
17407 +      V_RESPOND1  =                    1;
17408 +      V_RESPOND0  =                    0;
17409 +      I_RESPOND  = '1' ;
17410 +      U_RESPOND  =                    1;
17411 +      END;
17412 +    END;
17413 +  ELSE DO;
17414 +    IF  NOT MISSING(DOLL24 ) AND
17415 +                    23.975 <= DOLL24  THEN DO;
17416 +      IF  NOT MISSING(ACTBUY ) AND
17417 +                         1.5 <= ACTBUY  THEN DO;
17418 +        _NODE_  =                   19;
17419 +        _LEAF_  =                    5;
17420 +        P_RESPOND1  =     0.10306612486147;
17421 +        P_RESPOND0  =     0.89693387513852;
17422 +        Q_RESPOND1  =     0.10306612486147;
17423 +        Q_RESPOND0  =     0.89693387513852;
17424 +        V_RESPOND1  =     0.09674922600619;
17425 +        V_RESPOND0  =      0.9032507739938;
17426 +        I_RESPOND  = '0' ;
17427 +        U_RESPOND  =                    0;
17428 +        END;
17429 +      ELSE DO;
17430 +        _NODE_  =                   18;
17431 +        _LEAF_  =                    4;
17432 +        P_RESPOND1  =     0.05328917657684;
17433 +        P_RESPOND0  =     0.94671082342315;
17434 +        Q_RESPOND1  =     0.05328917657684;
17435 +        Q_RESPOND0  =     0.94671082342315;
17436 +        V_RESPOND1  =     0.05952028427598;
17437 +        V_RESPOND0  =     0.94047971572401;
17438 +        I_RESPOND  = '0' ;
17439 +        U_RESPOND  =                    0;
17440 +        END;
17441 +      END;
17442 +    ELSE DO;
17443 +      _NODE_  =                   10;
17444 +      _LEAF_  =                    3;
17445 +      P_RESPOND1  =     0.03609902631033;
17446 +      P_RESPOND0  =     0.96390097368966;
17447 +      Q_RESPOND1  =     0.03609902631033;
17448 +      Q_RESPOND0  =     0.96390097368966;
17449 +      V_RESPOND1  =     0.03674786591713;
17450 +      V_RESPOND0  =     0.96325213408286;
17451 +      I_RESPOND  = '0' ;
17452 +      U_RESPOND  =                    0;
17453 +      END;
17454 +    END;
17455 +  END;
17456 +
17457 +*****  RESIDUALS R_ *************;
17458 +IF  F_RESPOND  NE '1'
17459 +AND F_RESPOND  NE '0'  THEN DO;
17460 +        R_RESPOND1  = .;
17461 +        R_RESPOND0  = .;
17462 + END;
17463 + ELSE DO;
17464 +       R_RESPOND1  =  -P_RESPOND1 ;
17465 +       R_RESPOND0  =  -P_RESPOND0 ;
17466 +       SELECT( F_RESPOND  );
17467 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17468 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17469 +       END;
17470 + END;
17471 +
17472 +****************************************************************;
17473 +******          END OF DECISION TREE SCORING CODE         ******;
17474 +****************************************************************;
17475 +
17476 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17477  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17478  quit;
17479  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17480  filename emflow "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas";
17481  *------------------------------------------------------------*;
17482  * Tree2: Scoring VALIDATE data;
17483  *------------------------------------------------------------*;
17484  data EMWS2.Tree2_VALIDATE
17485  / view=EMWS2.Tree2_VALIDATE
17486  ;
17487  set EMWS2.Part_VALIDATE
17488  ;
17489  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree2\EMFLOWSCORE.sas.
17490 +****************************************************************;
17491 +******             DECISION TREE SCORING CODE             ******;
17492 +****************************************************************;
17493 +
17494 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17495 +LENGTH F_RESPOND  $   12;
17496 +LENGTH I_RESPOND  $   12;
17497 +LENGTH _WARN_  $    4;
17498 +
17499 +******              LABELS FOR NEW VARIABLES              ******;
17500 +label _NODE_ = 'Node' ;
17501 +label _LEAF_ = 'Leaf' ;
17502 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17503 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17504 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17505 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17506 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17507 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17508 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17509 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17510 +label F_RESPOND = 'From: RESPOND' ;
17511 +label I_RESPOND = 'Into: RESPOND' ;
17512 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17513 +label _WARN_ = 'Warnings' ;
17514 +
17515 +
17516 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17517 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17518 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17519 +
17520 +
17521 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17522 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17523 +
17524 +******             ASSIGN OBSERVATION TO NODE             ******;
17525 +IF  NOT MISSING(DOLL24 ) AND
17526 +                 121.2 <= DOLL24  THEN DO;
17527 +  IF  NOT MISSING(DEPT25 ) AND
17528 +                    32.5 <= DEPT25  THEN DO;
17529 +    _NODE_  =                    7;
17530 +    _LEAF_  =                    8;
17531 +    P_RESPOND1  =      0.4390243902439;
17532 +    P_RESPOND0  =     0.56097560975609;
17533 +    Q_RESPOND1  =      0.4390243902439;
17534 +    Q_RESPOND0  =     0.56097560975609;
17535 +    V_RESPOND1  =      0.3076923076923;
17536 +    V_RESPOND0  =     0.69230769230769;
17537 +    I_RESPOND  = '0' ;
17538 +    U_RESPOND  =                    0;
17539 +    END;
17540 +  ELSE DO;
17541 +    IF  NOT MISSING(FREQPRCH ) AND
17542 +                       8.5 <= FREQPRCH  THEN DO;
17543 +      _NODE_  =                   13;
17544 +      _LEAF_  =                    7;
17545 +      P_RESPOND1  =     0.17607413647851;
17546 +      P_RESPOND0  =     0.82392586352148;
17547 +      Q_RESPOND1  =     0.17607413647851;
17548 +      Q_RESPOND0  =     0.82392586352148;
17549 +      V_RESPOND1  =     0.17874396135265;
17550 +      V_RESPOND0  =     0.82125603864734;
17551 +      I_RESPOND  = '0' ;
17552 +      U_RESPOND  =                    0;
17553 +      END;
17554 +    ELSE DO;
17555 +      _NODE_  =                   12;
17556 +      _LEAF_  =                    6;
17557 +      P_RESPOND1  =     0.10013175230566;
17558 +      P_RESPOND0  =     0.89986824769433;
17559 +      Q_RESPOND1  =     0.10013175230566;
17560 +      Q_RESPOND0  =     0.89986824769433;
17561 +      V_RESPOND1  =       0.089590443686;
17562 +      V_RESPOND0  =     0.91040955631399;
17563 +      I_RESPOND  = '0' ;
17564 +      U_RESPOND  =                    0;
17565 +      END;
17566 +    END;
17567 +  END;
17568 +ELSE DO;
17569 +  IF  NOT MISSING(TENURE ) AND
17570 +    TENURE  <                  1.5 THEN DO;
17571 +    IF  NOT MISSING(DAYLAST ) AND
17572 +                      46.5 <= DAYLAST  THEN DO;
17573 +      _NODE_  =                    9;
17574 +      _LEAF_  =                    2;
17575 +      P_RESPOND1  =     0.11111111111111;
17576 +      P_RESPOND0  =     0.88888888888888;
17577 +      Q_RESPOND1  =     0.11111111111111;
17578 +      Q_RESPOND0  =     0.88888888888888;
17579 +      V_RESPOND1  =                    0;
17580 +      V_RESPOND0  =                    1;
17581 +      I_RESPOND  = '0' ;
17582 +      U_RESPOND  =                    0;
17583 +      END;
17584 +    ELSE DO;
17585 +      _NODE_  =                    8;
17586 +      _LEAF_  =                    1;
17587 +      P_RESPOND1  =     0.95454545454545;
17588 +      P_RESPOND0  =     0.04545454545454;
17589 +      Q_RESPOND1  =     0.95454545454545;
17590 +      Q_RESPOND0  =     0.04545454545454;
17591 +      V_RESPOND1  =                    1;
17592 +      V_RESPOND0  =                    0;
17593 +      I_RESPOND  = '1' ;
17594 +      U_RESPOND  =                    1;
17595 +      END;
17596 +    END;
17597 +  ELSE DO;
17598 +    IF  NOT MISSING(DOLL24 ) AND
17599 +                    23.975 <= DOLL24  THEN DO;
17600 +      IF  NOT MISSING(ACTBUY ) AND
17601 +                         1.5 <= ACTBUY  THEN DO;
17602 +        _NODE_  =                   19;
17603 +        _LEAF_  =                    5;
17604 +        P_RESPOND1  =     0.10306612486147;
17605 +        P_RESPOND0  =     0.89693387513852;
17606 +        Q_RESPOND1  =     0.10306612486147;
17607 +        Q_RESPOND0  =     0.89693387513852;
17608 +        V_RESPOND1  =     0.09674922600619;
17609 +        V_RESPOND0  =      0.9032507739938;
17610 +        I_RESPOND  = '0' ;
17611 +        U_RESPOND  =                    0;
17612 +        END;
17613 +      ELSE DO;
17614 +        _NODE_  =                   18;
17615 +        _LEAF_  =                    4;
17616 +        P_RESPOND1  =     0.05328917657684;
17617 +        P_RESPOND0  =     0.94671082342315;
17618 +        Q_RESPOND1  =     0.05328917657684;
17619 +        Q_RESPOND0  =     0.94671082342315;
17620 +        V_RESPOND1  =     0.05952028427598;
17621 +        V_RESPOND0  =     0.94047971572401;
17622 +        I_RESPOND  = '0' ;
17623 +        U_RESPOND  =                    0;
17624 +        END;
17625 +      END;
17626 +    ELSE DO;
17627 +      _NODE_  =                   10;
17628 +      _LEAF_  =                    3;
17629 +      P_RESPOND1  =     0.03609902631033;
17630 +      P_RESPOND0  =     0.96390097368966;
17631 +      Q_RESPOND1  =     0.03609902631033;
17632 +      Q_RESPOND0  =     0.96390097368966;
17633 +      V_RESPOND1  =     0.03674786591713;
17634 +      V_RESPOND0  =     0.96325213408286;
17635 +      I_RESPOND  = '0' ;
17636 +      U_RESPOND  =                    0;
17637 +      END;
17638 +    END;
17639 +  END;
17640 +
17641 +*****  RESIDUALS R_ *************;
17642 +IF  F_RESPOND  NE '1'
17643 +AND F_RESPOND  NE '0'  THEN DO;
17644 +        R_RESPOND1  = .;
17645 +        R_RESPOND0  = .;
17646 + END;
17647 + ELSE DO;
17648 +       R_RESPOND1  =  -P_RESPOND1 ;
17649 +       R_RESPOND0  =  -P_RESPOND0 ;
17650 +       SELECT( F_RESPOND  );
17651 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17652 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17653 +       END;
17654 + END;
17655 +
17656 +****************************************************************;
17657 +******          END OF DECISION TREE SCORING CODE         ******;
17658 +****************************************************************;
17659 +
17660 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17661  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17662  quit;
17663  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
17665  proc sort data=WORK.EM_USER_REPORT;
17666  by ID VIEW;
17667  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17668  *------------------------------------------------------------*;
17669  * Tree2: Computing metadata for TRAIN data;
17670  *------------------------------------------------------------*;
 
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18366  data WORK.MODELTEMP_INFO;
18367  set EMWS2.Tree2_EMINFO;
18368  where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18369  run;
 
NOTE: There were 0 observations read from the data set EMWS2.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18370  data EMWS2.Tree2_EMINFO;
18371  length TARGET KEY $32 DATA $43;
18372  input TARGET KEY DATA $;
18373  cards;
 
NOTE: The data set EMWS2.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
18377  run;
18378  data EMWS2.Tree2_EMINFO;
18379  set EMWS2.Tree2_EMINFO WORK.MODELTEMP_INFO;
18380  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS2.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
18381  proc sort data = EMWS2.Tree2_EMINFO NOTHREADS;
18382  by TARGET KEY;
18383  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE2_EMINFO.
NOTE: The data set EMWS2.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
18384  proc sort data = EMWS2.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18385  by TARGET KEY;
18386  run;
 
NOTE: There were 4 observations read from the data set EMWS2.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18387  proc sort data = EMWS2.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18388  by TARGET KEY;
18389  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS2.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18390  data EMWS2.Tree2_EMINFO;
18391  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18392  by TARGET KEY;
18393  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS2.TREE2_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18394  proc datasets lib=work nolist;
18395  delete TEMP_INFO SORTEDEMINFO;
18396  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18397  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS2.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 20, 2017
Time:                01:21:25
*------------------------------------------------------------*
18421  data EMWS2.Tree2_EMOUTFIT;
18422  set EMWS2.Tree2_EMOUTFIT;
18423  length TargetLabel $200;
18424  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18425  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18426  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_EMOUTFIT.
NOTE: The data set EMWS2.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
18427  proc sort data=EMWS2.Tree2_EMREPORTFIT nothreads;
18428  by TARGET;
18429  run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE2_EMREPORTFIT.
NOTE: The data set EMWS2.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
18430  %let _EMwarndup = 0;
18431  %let _EMtargetdup =;
18432  %let _EMASEtargetdup =;
18433  data _null_;
18434  set EMWS2.Tree2_EMOUTFIT;
18435  if .<_ASE_<0.000001 then do;
18436  call symput('_EMwarndup', '1');
18437  call symput('_EMtargetdup', target);
18438  call symput('_EMASEtargetdup', put(_ASE_, best.));
18439  end;
18440  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18441  %let EMEXCEPTIONSTRING=;
18442  *------------------------------------------------------------*;
18443  * REPORT: Tree2;
18444  *------------------------------------------------------------*;
18445  %let EM_ACTION = REPORT;
18446  %let syscc = 0;
18447  %macro main;
18448
18449    %if %upcase(&EM_ACTION) = CREATE %then %do;
18450      filename temp catalog 'sashelp.emmodl.tree_create.source';
18451      %include temp;
18452      filename temp;
18453
18454      %em_tree_create;
18455    %end;
18456
18457     %else
18458     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18459
18460         filename temp catalog 'sashelp.emmodl.tree_train.source';
18461         %include temp;
18462         filename temp;
18463         %em_tree_train;
18464     %end;
18465
18466    %else
18467    %if %upcase(&EM_ACTION) = SCORE %then %do;
18468      filename temp catalog 'sashelp.emmodl.tree_score.source';
18469      %include temp;
18470      filename temp;
18471
18472      %em_tree_score;
18473
18474    %end;
18475
18476    %else
18477    %if %upcase(&EM_ACTION) = REPORT %then %do;
18478
18479         filename temp catalog 'sashelp.emmodl.tree_report.source';
18480         %include temp;
18481         filename temp;
18482
18483         %em_tree_report;
18484     %end;
18485
18486    %else
18487    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18488
18489         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18490         %include temp;
18491         filename temp;
18492         %EM_TREE_OPENTREEVIEWER;
18493
18494     %end;
18495
18496    %else
18497    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18498
18499         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18500         %include temp;
18501         filename temp;
18502         %EM_TREE_CLOSETREEVIEWER;
18503
18504     %end;
18505
18506
18507     %doendm:
18508  %mend main;
18509
18510  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18512 +%macro em_tree_makePlotDs( multipleTar= );
18514 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18515 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18516 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18517 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18519 +  /* determine if validation statistics will be displayed */
18520 +  %let validflag=N;
18521 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18522 +    /* determine if validation data exists */
18523 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18524 +      %let validflag=Y;
18525 +    %end;
18526 +  %end;
18528 +   /* retrieve name of decmeta even in presence of multiple targets */
18529 +   %let decmeta = ;
18530 +   %if &EM_DEC_DECMETA eq %then %do;
18531 +     data _Target;
18532 +       set &em_data_variableset;
18533 +       where ROLE='TARGET' and USE in('D', 'Y');
18534 +       keep NAME;
18535 +     run;
18536 +     proc sort data=_Target;
18537 +       by NAME;
18538 +     run;
18539 +     proc sort data=EM_TARGETDECINFO;
18540 +       by TARGET;
18541 +     run;
18542 +     data _Target;
18543 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18544 +       by NAME;
18545 +       if _a then do;
18546 +         call symput('decmeta', trim(DECMETA));
18547 +       end;
18548 +     run;
18549 +     proc delete data=_Target;run;
18550 +   %end;
18551 +   %else %let decmeta = &EM_DEC_DECMETA;
18554 +  /* retrieve targetEvent from decmeta */
18555 +  %let targetEvent=;
18556 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18557 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18558 +      data _null_;
18559 +       set &DECMETA(where=(_TYPE_="TARGET"));
18560 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18561 +      run;
18562 +    %end;
18563 +  %end;
18565 +  /* retrieve predicted var for targetEvent from decmeta */
18566 +  %let predTarget=;
18567 +  %let predLvl=;
18568 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18569 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18570 +      data _null_;
18571 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18572 +       call symput('predTarget', strip(VARIABLE));
18573 +       call symput('predLvl', strip(LEVEL));
18574 +      run;
18575 +    %end;
18576 +  %end;
18577 +  %else %do;
18578 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18579 +      data _null_;
18580 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18581 +       call symput('predTarget', strip(VARIABLE));
18582 +      run;
18583 +    %end;
18584 +  %end;
18586 +  /* create BelowText value */
18587 +  data belowtext;
18588 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18589 +    keep node belowtext;
18590 +  run;
18592 +  /* relace belowtext with variable label if it exists */
18593 +  data belowtext2;
18594 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18595 +    keep node belowtextlbl;
18596 +  run;
18598 +  proc sort data=belowtext; by node; run;
18599 +  proc sort data=belowtext2; by node; run;
18601 +  data belowtext;
18602 +    merge belowtext belowtext2(in=_a);
18603 +    by node;
18604 +    if _a then belowtext=belowtextlbl;
18605 +    keep node belowtext;
18606 +  run;
18608 +  /* create AboveText value */
18609 +  data abovetext;
18610 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18611 +  run;
18612 +  proc sort data=abovetext; by node numeric_value; run;
18614 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18615 +  data abovetext;
18616 +    set abovetext(rename=(node=parent));
18617 +    by parent numeric_value;
18618 +    retain abovetext tempstring flag branch origval origchar ;
18619 +    length abovetext $256;
18620 +    length tempstring origchar $64;
18622 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18623 +      if first.parent then do;
18624 +        if missing(character_value) then do;
18625 +          numeric_value = round(numeric_value, &sp_precision);
18626 +          abovetext = "< "||strip(NUMERIC_VALUE);
18627 +          branch = 1;
18628 +          origval = numeric_value;
18629 +          output;
18630 +        end;
18631 +        else do;
18632 +          abovetext = "< "||strip(CHARACTER_VALUE);
18633 +          branch = 1;
18634 +          origchar = character_value;
18635 +          output;
18636 +        end;
18638 +        if first.parent AND last.parent then do;
18639 +          if missing(character_value) then do;
18640 +            numeric_value = round(numeric_value, &sp_precision);
18641 +            branch = branch + 1;
18642 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18643 +            output;
18644 +          end;
18645 +          else do;
18646 +            branch = branch + 1;
18647 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18648 +            output;
18649 +          end;
18650 +        end;
18651 +      end;
18652 +      else if last.parent then do;
18653 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18654 +          if missing(character_value) then do;
18655 +            numeric_value = round(numeric_value, &sp_precision);
18656 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18657 +          end;
18658 +          else do;
18659 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18660 +          end;
18661 +          branch = branch + 1;
18662 +          output;
18664 +          if missing(character_value) then do;
18665 +            numeric_value = round(numeric_value, &sp_precision);
18666 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18667 +          end;
18668 +          else do;
18669 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18670 +          end;
18671 +          branch = branch + 1;
18672 +          output;
18673 +        end;
18674 +        else do;
18675 +          if missing(character_value) then do;
18676 +            numeric_value = round(numeric_value, &sp_precision);
18677 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18678 +          end;
18679 +          else do;
18680 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18681 +          end;
18682 +          branch = branch + 1;
18683 +          output;
18684 +        end;
18685 +      end;
18686 +      else do;
18687 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18688 +          if missing(character_value) then do;
18689 +            numeric_value = round(numeric_value,&sp_precision);
18690 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18691 +            origval = numeric_value;
18692 +          end;
18693 +          else do;
18694 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18695 +            origchar = character_value;
18696 +          end;
18697 +          branch = branch + 1;
18698 +          output;
18700 +        end;
18701 +        else do;
18702 +          if missing(character_value) then do;
18703 +            numeric_value = round(numeric_value, &sp_precision);
18704 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18705 +            origval = numeric_value;
18706 +          end;
18707 +          else do;
18708 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18709 +            origval = character_value;
18710 +          end;
18711 +          branch = branch + 1;
18712 +          output;
18713 +        end;
18714 +      end;
18715 +    end;
18716 +    else do;
18717 +       if first.numeric_value then do;
18718 +         flag = 0;
18719 +         abovetext = strip(CHARACTER_VALUE);
18720 +         branch = numeric_value;
18721 +         if first.numeric_value AND last.numeric_value then do;
18722 +           output;
18723 +         end;
18724 +       end;
18725 +       else if last.numeric_value then do;
18726 +         if flag=0 then do;
18727 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18728 +           length = length(strip(tempstring));
18729 +           if length < 32 then do;
18730 +             abovetext = strip(tempstring);
18731 +           end;
18732 +           else do;
18733 +             abovetext = strip(abovetext)||", ...";
18734 +             flag = 1;
18735 +           end;
18736 +         end;
18737 +         branch = numeric_value;
18738 +         output;
18739 +       end;
18740 +       else do;
18741 +         if flag=0 then do;
18742 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18743 +           length = length(strip(tempstring));
18744 +           if length < 32 then do;
18745 +             abovetext = strip(tempstring);
18746 +           end;
18747 +           else do;
18748 +             abovetext = strip(abovetext)||", ...";
18749 +             flag=1;
18750 +           end;
18751 +         end;
18752 +         branch = numeric_value;
18753 +       end;
18754 +    end;
18755 +    keep parent branch abovetext;
18756 +  run;
18758 +  /* MIssing value to abovetext */
18759 +  data tempmissing;
18760 +    set &EM_USER_OUTRULES;
18761 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18762 +    rename node=parent numeric_value=branch character_value=misschar;
18763 +  run;
18766 +  proc sort data=abovetext; by parent branch; run;
18767 +  proc sort data=tempmissing; by parent branch; run;
18768 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18770 +  data tempoutnodes;
18771 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18772 +    by parent branch;
18773 +    length traintotal validtotal 8;
18774 +    retain traintotal validtotal;
18776 +    if _a then do;
18777 +      if ^MISSING(abovetext) then do;
18778 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18779 +      end;
18780 +      else do;
18781 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18782 +      end;
18783 +    end;
18784 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18786 +    if node=1 then do;
18787 +      traintotal = N;
18788 +      validtotal=VN;
18789 +    end;
18791 +    drop role rank stat misschar belowtext;
18792 +  run;
18793 +  proc sort data=tempoutnodes; by node; run;
18794 +  proc sort data=belowtext; by node; run;
18796 +  data tempoutnodes;
18797 +    merge tempoutnodes belowtext;
18798 +    by node;
18800 +  run;
18802 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18803 +  %let adjusted = N;
18804 +  %let npriors = 0;
18805 +  data _null_ ;
18806 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18807 +    if eof then do ;
18808 +      call symput("npriors" , strip(put(_N_,best.))) ;
18809 +    end;
18810 +  run;
18811 +  %if &npriors gt 0 %then %let adjusted=Y;
18814 +  /* create a table with targetUsed and targetLevel columns for each node */
18815 +  data temptarmeta;
18816 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18817 +    %if &multipleTar eq N %then %do;
18818 +      AND USE in ('D', 'Y')
18819 +    %end;
18820 +    ));
18821 +    length TARGET $32;
18822 +    Target=name;
18823 +    keep target level;
18824 +  run;
18826 +  %if &multipleTar eq Y %then %do;
18827 +    data temptargetused;
18828 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18829 +      keep node target;
18830 +    run;
18831 +    proc sort data=temptargetused; by target; run;
18832 +    proc sort data=temptarmeta; by target; run;
18833 +    data temptargetused;
18834 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18835 +      by target;
18836 +      if _a and _b;
18837 +    run;
18838 +  %end;
18839 +  %else %do;
18840 +    data temptargetused;
18841 +      set &EM_USER_OUTSTATS;
18842 +      length target $32 tarlevel $10;
18843 +      target="%EM_TARGET";
18844 +      tarlevel="%EM_TARGET_LEVEL";
18845 +      keep node target tarlevel;
18846 +    run;
18847 +    proc sort data=temptargetused nodupkey; by node; run;
18848 +  %end;
18850 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18851 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18852 +  proc sort data=temptargetused; by node; run;
18855 +  /* create tables for all interval targets as well as all class targets */
18856 +  data tempinterval tempclass;
18857 +    merge tempoutstats temptargetused( rename=(target=targetused));
18858 +    by node;
18859 +    %if "&multipleTar" eq "Y" %then %do;
18860 +      if ((missing(Target)) OR (target=targetused ));
18861 +    %end;
18863 +    if tarlevel="INTERVAL" then output tempinterval;
18864 +    else output tempclass;
18865 +  run;
18867 +  /* iniitalize intTarget and classTarget flags */
18868 +  %let em_intNobs =0;
18869 +  %let em_classNobs = 0;
18870 +  %let em_intTarget= N;
18871 +  %let em_classTarget= N;
18873 +  proc sql;
18874 +    reset noprint;
18875 +    select count(*) into :em_intNobs from tempinterval;
18876 +  quit;
18877 +  proc sql;
18878 +    reset noprint;
18879 +    select count(*) into :em_classNobs from tempclass;
18880 +  quit;
18882 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18883 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18885 +  /* retrieve all information for interval targets */
18886 +  %if &em_intTarget eq Y %then %do;
18888 +    /* determine if leaf variable exists */
18889 +    %let dsid=%sysfunc(open(tempinterval,i));
18890 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18891 +    %let rc=%sysfunc(close(&dsid));
18893 +    proc transpose data=tempinterval
18894 +      %if &leafexists %then %do;
18895 +        (drop=leaf)
18896 +      %end;
18897 +      %if &validexist %then %do;
18898 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18899 +      %end;
18900 +      %else %do;
18901 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18902 +      %end;
18903 +      by node;
18904 +      id statname;
18905 +    run;
18906 +    data tempinterval;
18907 +      set tempinterval;
18908 +      if missing(N) then delete;
18909 +    run;
18910 +  %end;
18912 +  /* retrieve all information for class targets */
18913 +  %if &em_classTarget eq Y %then %do;
18914 +    proc sort data=tempclass; by node category; run;
18915 +    %if &validflag eq N %then %do;
18916 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18917 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18918 +    %end;
18919 +    %else %do;
18920 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18921 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18922 +    %end;
18923 +      set tempclass;
18925 +      %if &validflag eq N %then %do;
18926 +        %if "&adjusted" eq "N" %then %do;
18927 +          if statname="N" then output tempn;
18928 +        %end;
18929 +        %else %do;
18930 +          if statname="NPRIORS" then output tempn;
18931 +        %end;
18932 +        else if statname="PREDICTION" then output temppredict;
18933 +        else if statname="PROBABILITY" then output tempprob;
18934 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18935 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18936 +      %end;
18937 +      %else %do;
18938 +        %if "&adjusted" eq "N" %then %do;
18939 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18940 +        %end;
18941 +        %else %do;
18942 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18943 +        %end;
18944 +        else if statname="PREDICTION" then output temppredict;
18945 +        else if statname="PROBABILITY" then output tempprob;
18946 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18947 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18948 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18949 +      %end;
18950 +    run;
18953 +    /* determine if profit/loss exists in tempprofit */
18954 +    %let em_profitflag=0;
18955 +    %let em_lossflag=0;
18956 +    proc sql;
18957 +      reset noprint;
18958 +      select count(*) into :em_profitflag from tempprofit;
18959 +    quit;
18960 +    proc sql;
18961 +      reset noprint;
18962 +      select count(*) into :em_lossflag from temploss;
18963 +    quit;
18965 +    %if &validFlag eq Y %then %do;
18966 +      proc transpose data=tempn
18967 +        %if "&adjusted" eq "N" %then %do;
18968 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18969 +        %end;
18970 +        %else %do;
18971 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18972 +        %end;
18973 +        by node;
18974 +        id statname;
18975 +      run;
18976 +      %if &em_profitflag ne 0 %then %do;
18977 +        proc transpose data=tempprofit out=tempprofit;
18978 +          by node category;
18979 +          id statname ;
18980 +        run;
18981 +      %end;
18982 +      %if &em_lossflag ne 0 %then %do;
18983 +        proc transpose data=temploss out=temploss;
18984 +          by node category;
18985 +          id statname ;
18986 +        run;
18987 +      %end;
18988 +      data tempprob;
18989 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18990 +        by node
18991 +        %if &multipleTar eq Y %then %do;
18992 +          target
18993 +        %end;
18994 +        category;
18995 +      run;
18996 +    %end;
18998 +    /* store percentcorrect value */
18999 +    data temppredict;
19000 +      merge tempprob temppredict(in=_a);
19001 +      by node category;
19002 +      if _a then do;
19003 +        percentCorrect = statvalue;
19004 +        %if &validFlag eq Y %then %do;
19005 +          vpercentCorrect= vstatvalue;
19006 +        %end;
19007 +      end;
19008 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19009 +      %if &validFlag eq Y %then %do;
19010 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19011 +      %end;
19012 +      ;
19013 +      if missing(percentCorrect) then delete;
19014 +      drop target;
19015 +    run;
19017 +    /* build profittext */
19018 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19019 +      data tempprofittext(keep= node profittext profitloss);
19020 +        length profittext $800 profitloss 8.;
19021 +        retain profittext profitloss;
19023 +        merge tempprob
19024 +        %if &em_profitflag ne 0 %then %do;
19025 +          tempprofit
19026 +        %end;
19027 +        %else %if &em_lossflag ne 0 %then %do;
19028 +          temploss
19029 +        %end;
19030 +        ;
19031 +        by node category;
19033 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19034 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19035 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19036 +          %let profittype = ALL;
19037 +        %end;
19039 +        /* create the profitloss variable for nodecolor if selected */
19040 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19042 +        %if "&profittype" eq "ALL" %then %do;
19043 +          if strip(CATEGORY)="&targetEvent" then do;
19044 +            profitloss=statvalue;
19045 +          end;
19046 +          if first.node then do;
19047 +            %if &validFlag eq N %then %do;
19048 +             %if &em_profitflag ne 0 %then %do;
19049 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19050 +             %end;
19051 +             %if &em_lossflag ne 0 %then %do;
19052 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19053 +             %end;
19054 +            %end;
19055 +            %else %do;
19056 +             %if &em_profitflag ne 0 %then %do;
19057 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19057!+;
19058 +             %end;
19059 +             %if &em_lossflag ne 0 %then %do;
19060 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19061 +             %end;
19062 +            %end;
19063 +          end;
19064 +          else if last.node then do;
19065 +            %if &validFlag eq N %then %do;
19066 +             %if &em_profitflag ne 0 %then %do;
19067 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19068 +             %end;
19069 +             %if &em_lossflag ne 0 %then %do;
19070 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19071 +             %end;
19072 +             /*if CATEGORY="&targetEvent" then do;
19073 +               profitloss=statvalue;
19074 +             end;*/
19075 +            %end;
19076 +            %else %do;
19077 +             %if &em_profitflag ne 0 %then %do;
19078 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19078!+14.&EM_PROPERTY_SPLITPRECISION);
19079 +                if CATEGORY="&targetEvent" then do;
19080 +                 profitloss=ALTERNATIVE_PROFIT;
19081 +                end;
19082 +             %end;
19083 +             %if &em_lossflag ne 0 %then %do;
19084 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19084!+14.&EM_PROPERTY_SPLITPRECISION);
19085 +                if CATEGORY="&targetEvent" then do;
19086 +                  profitloss=ALTERNATIVE_LOSS;
19087 +                end;
19088 +             %end;
19089 +            %end;
19090 +            output;
19091 +          end;
19092 +          else do;
19093 +            %if &validFlag eq N %then %do;
19094 +             %if &em_profitflag ne 0 %then %do;
19095 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19096 +             %end;
19097 +             %if &em_lossflag ne 0 %then %do;
19098 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19099 +             %end;
19100 +            %end;
19101 +            %else %do;
19102 +             %if &em_profitflag ne 0 %then %do;
19103 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19103!+14.&EM_PROPERTY_SPLITPRECISION);
19104 +             %end;
19105 +             %if &em_lossflag ne 0 %then %do;
19106 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19106!+14.&EM_PROPERTY_SPLITPRECISION);
19107 +             %end;
19108 +            %end;
19109 +          end;
19110 +        %end;
19111 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19112 +          if strip(CATEGORY) = "&targetevent" then do;
19113 +            %if &validFlag eq N %then %do;
19114 +             %if &em_profitflag ne 0 %then %do;
19115 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19116 +             %end;
19117 +             %if &em_lossflag ne 0 %then %do;
19118 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19119 +             %end;
19120 +             profitloss=statvalue;
19121 +            %end;
19122 +            %else %do;
19123 +             %if &em_profitflag ne 0 %then %do;
19124 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19124!+;
19125 +                profitloss=ALTERNATIVE_PROFIT;
19126 +             %end;
19127 +             %if &em_lossflag ne 0 %then %do;
19128 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19129 +                profitloss=ALTERNATIVE_LOSS;
19130 +             %end;
19131 +            %end;
19132 +            output;
19133 +          end;
19134 +        %end;
19135 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19136 +          if strip(CATEGORY) = "&targetevent" then do;
19137 +            %if &validFlag eq N %then %do;
19138 +             profitloss=statvalue;
19139 +            %end;
19140 +            %else %do;
19141 +             %if &em_profitflag ne 0 %then %do;
19142 +                profitloss=ALTERNATIVE_PROFIT;
19143 +             %end;
19144 +             %if &em_lossflag ne 0 %then %do;
19145 +                profitloss=ALTERNATIVE_LOSS;
19146 +             %end;
19147 +            %end;
19148 +            output;
19149 +          end;
19150 +        %end;
19151 +      run;
19152 +    %end;
19154 +    data tempprob(keep= node probtext);
19155 +      length probtext $800;
19156 +      retain probtext;
19157 +      set tempprob ;
19158 +      by node;
19160 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19161 +      %let probtype = &EM_PROPERTY_TARGET;
19162 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19163 +        %let probtype = ALL;
19164 +      %end;
19166 +      %if "&probtype" eq "ALL" %then %do;
19167 +        if first.node then do;
19168 +          %if &validFlag eq N %then %do;
19169 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19170 +          %end;
19171 +          %else %do;
19172 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19173 +          %end;
19174 +        end;
19175 +        else if last.node then do;
19176 +          %if &validFlag eq N %then %do;
19177 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19178 +          %end;
19179 +          %else %do;
19180 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19181 +          %end;
19182 +          output;
19183 +        end;
19184 +        else do;
19185 +          %if &validFlag eq N %then %do;
19186 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19187 +          %end;
19188 +          %else %do;
19189 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19190 +          %end;
19191 +        end;
19192 +      %end;
19193 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19194 +        if strip(CATEGORY) = "&targetevent" then do;
19195 +          %if &validFlag eq N %then %do;
19196 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19197 +          %end;
19198 +          %else %do;
19199 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19200 +          %end;
19201 +          output;
19202 +        end;
19203 +      %end;
19204 +      %else %if "&probtype" eq "NONE" %then %do;
19205 +        if last.node then do;
19206 +          output;
19207 +        end;
19208 +      %end;
19209 +    run;
19210 +  %end;
19212 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19214 +  %let oldexists=0;
19215 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19216 +     data old_tree_plot;
19217 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19218 +        rename nodecolor=oldnodecolor;
19219 +     run;
19221 +     proc sort data=old_tree_plot;
19222 +        by node;
19223 +     run;
19225 +     %let oldexists=1;
19226 +  %end;
19228 +  data &EM_USER_TREE_PLOT;
19229 +    length textall $800;
19230 +    merge tempoutnodes temptargetused
19232 +    %if &em_intTarget eq Y %then %do;
19233 +      tempinterval
19234 +    %end;
19236 +    %if &em_classTarget eq Y %then %do;
19238 +      %if &validFlag eq N %then %do;
19239 +        tempn(rename=(statvalue=N))
19240 +      %end;
19241 +      %else %do;
19242 +        tempn
19243 +      %end;
19245 +      temppredict tempprob
19247 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19248 +        tempprofittext
19249 +      %end;
19250 +    %end;
19251 +    ;
19252 +    by node;
19254 +    /* build nodetext based on user selection */
19255 +    textall="";
19257 +    %if &em_intTarget eq Y %then %do;
19258 +    if tarlevel="INTERVAL" then do;
19259 +      /* Nodeid */
19260 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19261 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19262 +      %end;
19264 +      /* Target identifier if multiple targets are used */
19265 +      %if "&multipleTar" eq "Y" %then %do;
19266 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19267 +      %end;
19269 +      %if &validFlag eq Y %then %do;
19270 +         /* Column labels displayed in validflag eq Y only */
19271 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19272 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19272!+noquote ))";
19273 +         %end;
19275 +         /* Average values */
19276 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19277 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19278 +         %end;
19280 +         /* RASE */
19281 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19282 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19283 +         %end;
19285 +         /* Count */
19286 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19287 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19288 +         %end;
19289 +      %end;
19290 +      %else %do;
19291 +         /* Average values */
19292 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19293 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19294 +         %end;
19296 +         /* RASE */
19297 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19298 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19299 +         %end;
19301 +         /* Count */
19302 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19303 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19304 +         %end;
19305 +      %end;
19307 +      /* nodecolor */
19308 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19309 +        nodecolor=PREDICTION;
19310 +      %end;
19311 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19312 +        nodecolor=RASE;
19313 +      %end;
19314 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19315 +        nodecolor=1;
19316 +      %end;
19318 +    end;
19319 +    %end;
19320 +    %if &em_classTarget eq Y %then %do;
19321 +    if tarlevel^="INTERVAL" then  do;
19323 +      /* Nodeid */
19324 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19325 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19326 +      %end;
19327 +      /* Target identifier if multiple targets are used */
19328 +      %if "&multipleTar" eq "Y" %then %do;
19329 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19330 +      %end;
19332 +      /* Predicted values */
19333 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19334 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19335 +      %end;
19337 +      /* Column labels displayed in validflag eq Y only */
19338 +      %if "&ValidFlag" eq "Y" %then %do;
19339 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19340 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19340!+noquote ))";
19341 +        %end;
19342 +      %end;
19344 +      /* Target Values */
19345 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19346 +        textall=strip(textall)||"0A"x||strip(probtext);
19347 +      %end;
19349 +      /* include profit or loss for all target levels */
19350 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19351 +        textall=strip(textall)||"0A"x||strip(profittext);
19352 +      %end;
19354 +      %if &validFlag eq N %then %do;
19355 +        /* Percent Correct */
19356 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19357 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19358 +        %end;
19360 +         /* Count */
19361 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19362 +          %if "&adjusted" eq "N" %then %do;
19363 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19364 +          %end;
19365 +          %else %do;
19366 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19367 +          %end;
19368 +         %end;
19369 +      %end;
19370 +      %else %do;
19371 +        /* Percent Correct */
19372 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19373 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19374 +        %end;
19376 +         /* Count */
19377 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19378 +          %if "&adjusted" eq "N" %then %do;
19379 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19380 +          %end;
19381 +          %else %do;
19382 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19383 +          %end;
19384 +         %end;
19385 +      %end;
19387 +      /* nodecolor */
19388 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19389 +       %if &multipleTar ne Y %then %do;
19390 +        nodecolor=&predTarget;
19391 +       %end;
19392 +       %else %do;
19393 +         nodecolor=percentcorrect;
19394 +       %end;
19395 +      %end;
19396 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19397 +        nodecolor=percentcorrect;
19398 +      %end;
19399 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19400 +        nodecolor=1;
19401 +      %end;
19402 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19403 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19404 +          nodecolor=percentcorrect;
19405 +        %end;
19406 +        %else %do;
19407 +          nodecolor=profitloss;
19408 +        %end;
19409 +      %end;
19411 +    end;
19412 +    %end;
19413 +    %if &em_intTarget eq Y %then %do;
19414 +     drop  PREDICTION  TARGET TARLEVEL
19415 +     %if &ValidFlag eq Y %then %do;
19416 +         VPREDICTION
19417 +     %end;
19418 +     ;
19419 +    %end;
19420 +    %if &em_classTarget eq Y %then %do;
19421 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19422 +     %if &ValidFlag eq Y %then %do;
19423 +         VSTATVALUE
19424 +     %end;
19425 +     ;
19426 +    %end;
19428 +  run;
19430 +  /* add leaf index information to plotds - based on primary target only*/
19431 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19432 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19433 +      set &EM_USER_OUTSTATS;
19434 +      if ((statname="PROBABILITY"
19435 +      %if &validexist %then %do;
19436 +       or statname="VALID: PROBABILITY"
19437 +      %end;
19438 +      ) AND (CATEGORY="&TARGETEVENT")
19439 +      %if "&multipleTar" eq "Y" %then %do;
19440 +        AND (Target="%EM_TARGET")
19441 +      %end;
19442 +      );
19443 +    run;
19445 +    %if &validexist %then %do;
19446 +      proc sort data=tempprob; by node; run;
19447 +      %let vpredTarget = V%substr(&predTarget, 2);
19448 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19449 +         by node;
19450 +         id statname;
19451 +      run;
19452 +    %end;
19453 +  %end;
19454 +  %else %do;
19455 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19456 +      set &EM_USER_OUTSTATS;
19457 +      if ((statname="PREDICTION"
19458 +      %if &validexist %then %do;
19459 +       or statname="VALID: PREDICTION"
19460 +      %end;
19461 +      )
19462 +      %if "&multipleTar" eq "Y" %then %do;
19463 +        AND (Target="%EM_TARGET")
19464 +      %end;
19465 +      );
19466 +    run;
19467 +    %if &validexist %then %do;
19468 +      proc sort data=tempprob; by node; run;
19469 +      %let vpredTarget = V%substr(&predTarget, 2);
19470 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19471 +         by node;
19472 +         id statname;
19473 +      run;
19474 +    %end;
19475 +  %end;
19477 +  proc sort data=tempprob; by node; run;
19478 +  data tempoutnodes;
19479 +    merge tempoutnodes tempprob;
19480 +    by node;
19481 +  run;
19483 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19484 +  data tempnodes;
19485 +    retain traintotal validtotal;
19486 +    set tempnodes(where=(leaf ne . ));
19487 +    tprob=round(&predTarget, .01);
19488 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19489 +      percevent_train=round(tprob*100, .01);
19490 +    %end;
19491 +    %else %do;
19492 +      percevent_train=tprob;
19493 +    %end;
19495 +    perc_train=round((n/traintotal)*100, 0.01);
19496 +    /* leafwidth already has a *10 multiplier */
19497 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19499 +    %if &validexist %then %do;
19500 +      %let vpredTarget = V%substr(&predTarget,2);
19501 +      vprob=round(&vpredTarget, .01);
19502 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19503 +        percevent_valid=round(vprob*100, .01);
19504 +      %end;
19505 +      %else %do;
19506 +        percevent_valid=vprob;
19507 +      %end;
19508 +      perc_valid=round((vn/validtotal)*100, .01);
19509 +    %end;
19511 +    index=_N_;
19512 +    keep node index tprob perc_train percevent_train
19513 +    %if &validexist %then %do;
19514 +        vprob percevent_valid perc_valid
19515 +    %end;
19516 +    ;
19517 +  run;
19518 +  proc sort data=tempnodes; by node; run;
19519 +  data &EM_USER_TREE_PLOT;
19520 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19521 +    by node;
19522 +    if missing(node) then delete;
19523 +    %if &oldexists %then %do;
19524 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19525 +      drop oldnodecolor;
19526 +    %end;
19527 +    abovetext = compbl(abovetext);
19529 +    /* add variable labels */
19530 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19531 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19532 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19533 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19534 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19535 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19537 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19538 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19539 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19540 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19541 +          %end;
19542 +          %else %do;
19543 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19544 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19545 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19546 +          %end;
19547 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19549 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19550 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19551 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19552 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19553 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19554 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19555 +          %end;
19556 +          %else %do;
19557 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19558 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19559 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19560 +          %end;
19561 +    ;
19562 +  run;
19564 +  /* delete temporary tables */
19565 +  proc datasets lib=work nolist;
19566 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19567 +  run;
19569 +%mend em_tree_makePlotDs;
19573 +%macro em_tree_report;
19575 +   /* report properties */
19576 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19577 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19578 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19579 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19580 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19581 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19582 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19583 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19584 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19585 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19586 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19587 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19588 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19590 +   %let validexist=0;
19591 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19592 +     %let validexist=1;
19593 +   %end;
19595 +   /* determine if multiple targets will be processed */
19596 +   %let em_tree_multipleTargets=N;
19597 +   %let em_tree_numTarget=1;
19598 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19599 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19600 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19601 +         %let em_tree_multipleTargets=N;
19602 +      %end;
19603 +      %else %do;
19604 +        data _null_;
19605 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19606 +          if eof then
19607 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19608 +        run;
19610 +        %if &em_tree_numTarget gt 1 %then %do;
19611 +           %let em_tree_multipleTargets=Y;
19612 +        %end;
19613 +     %end;
19614 +   %end;
19616 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19618 +   /* variable importance */
19619 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19620 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19622 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19623 +     /* and the columns may not be generated                                                                                 */
19624 +     %let em_tree_cvexists=;
19625 +     %let em_tree_surrexists=.;
19626 +     data _null_;
19627 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19628 +       if eof then do ;
19629 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19630 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19631 +       end;
19632 +     run;
19634 +     data &EM_USER_OUTIMPORT;
19635 +         set &EM_USER_OUTIMPORT;
19636 +         /* format columns based on Precison value specified */
19637 +         format importance 15.&EM_PROPERTY_PRECISION
19638 +              %if &validexist %then %do;
19639 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19640 +              %end;
19641 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19642 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19643 +              %end;
19644 +         ;
19645 +     run;
19647 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19648 +     proc print data=&EM_USER_OUTIMPORT
19649 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19650 +          (where=((nrules>0) OR (nsurrogates>0)))
19651 +        %end;
19652 +        %else %do;
19653 +           (where=(nrules>0))
19654 +        %end;
19655 +        label noobs
19656 +        ;
19657 +     run;
19658 +     title10;
19660 +   %end;
19662 +   /* Sequence */
19663 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19664 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19665 +   data _null_ ;
19666 +      set &EM_USER_outseq (obs=2) end=eof ;
19667 +      if eof then do ;
19668 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19669 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19670 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19671 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19672 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19673 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19674 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19675 +      end;
19676 +    run;
19678 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19679 +      data &EM_USER_OUTSEQ;
19680 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19681 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19682 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19683 +           _XMISC_=_VMISC_
19684 +        %end;
19685 +        %if "&em_tree_aprof" ne "."  %then %do;
19686 +           _XAPROF_=_VAPROF_
19687 +           _XPROF_ = _VPROF_
19688 +        %end;
19689 +        %if "&em_tree_aloss" ne "."  %then %do;
19690 +           _XALOSS_=_VALOSS_
19691 +        %end;
19692 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19693 +           _XPASE_ = _VPASE_
19694 +           _XPMISC_ = _VPMISC_
19695 +        %end;
19697 +        ));
19698 +     %end;
19699 +     %else %do;
19700 +        set &EM_USER_OUTSEQ;
19701 +     %end;
19703 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19704 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19705 +            _MISC_   15.&EM_PROPERTY_PRECISION
19706 +         %end;
19707 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19708 +            _PASE_  15.&EM_PROPERTY_PRECISION
19709 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19710 +         %end;
19711 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19712 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19713 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19714 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19715 +            %end;
19716 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19717 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19718 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19719 +            %end;
19720 +         %end;
19721 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19722 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19723 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19724 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19725 +            %end;
19726 +         %end;
19727 +         %if "&em_tree_seq" ne "." %then %do;
19728 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19729 +         %end;
19730 +         %if "&em_tree_vseq" ne "." %then %do;
19731 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19732 +         %end;
19733 +         %if "&em_tree_aprof" ne "." %then %do;
19734 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19735 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19736 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19737 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19738 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19739 +           %end;
19740 +         %end;
19741 +         %else %if "&em_tree_aloss" ne "." %then %do;
19742 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19743 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19744 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19745 +           %end;
19746 +         %end;
19747 +      ;
19748 +    run;
19749 +   %end;
19751 +   /* Observation Based Importance */
19752 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19754 +      /* need to check for 0 obs */
19755 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19756 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19757 +      %let rc=%sysfunc(close(&dsid));
19759 +      %if &onobs %then %do;
19760 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19761 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19763 +         data &EM_USER_OUTOBSIMP;
19764 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19765 +           if _a;
19766 +           by _INPUT1_;
19767 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19768 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19769 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19770 +                   %end;
19771 +                   ;
19772 +         run;
19773 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19774 +      %end;
19775 +   %end;
19777 +  %end;
19779 +  /* create dataset to support tree diagram and icicle plot */
19780 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19781 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19783 +  /* display tree diagram */
19784 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19785 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19787 +  /* display icicle diagram */
19788 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19789 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19791 +  /* Leaf Statistics Plot */
19792 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19794 +  /* print leaf information to output window */
19795 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19797 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19798 +       by descending N;
19799 +     run;
19801 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19802 +     %local vn;
19803 +     data _null_;
19804 +       set t (obs=2) end=eof;
19805 +       if eof then do;
19806 +         call symput("vn", strip(put(vn, best.)));
19807 +       end;
19808 +     run;
19810 +     data t;
19811 +       set t;
19812 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19813 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19814 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19815 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19816 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19817 +       %end;
19818 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19819 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19820 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19821 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19822 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19823 +          %end;
19824 +       %end;
19825 +       ;
19826 +     run;
19828 +     /* determine if rase is found in t */
19829 +    %let dsid=%sysfunc(open(t,i));
19830 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19831 +    %let rc=%sysfunc(close(&dsid));
19833 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19834 +     proc print data=t noobs label;
19835 +       where tprob ne .;
19836 +       var node depth N tprob
19837 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19838 +         %if "&vn" ne "." %then %do;
19839 +           VN
19840 +         %end;
19841 +         vprob
19842 +       %end;
19843 +       %if &raseexists %then %do;
19844 +            RASE
19845 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19846 +              VRASE
19847 +            %end;
19848 +       %end;
19849 +       ;
19850 +     run;
19851 +     title10;
19852 +  %end;
19854 +  /* create plots that are done during training of node */
19855 +  /* display iterative plot, including reference line */
19856 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19857 +   /* %if &nleaves eq  %then %do; */
19858 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19859 +      data _null_;
19860 +        set &EM_USER_OUTTOPOLOGY end=eof;
19861 +        if eof then do;
19862 +          call symput('nleaves', LEAF);
19863 +        end;
19864 +      run;
19865 +   /* %end; */
19867 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19868 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19869 +  %end;
19871 +  /* display leaf statistics */
19872 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19874 +  /* stats by node if multiple targets = Y */
19875 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19876 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19877 +    data &EM_USER_OUTSTATS;
19878 +      set &EM_USER_OUTSTATS;
19880 +     * if STATNAME="TARGET" then delete;
19881 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19882 +      drop leaf;
19883 +    run;
19884 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19886 +  %end;
19887 +  %else %do;
19888 +    /* add outstats and outdescribe to spk but not results */
19889 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19890 +  %end;
19892 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set EMWS2.TREE2_OUTIMPORT.
NOTE: The data set EMWS2.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS2.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set EMWS2.TREE2_OUTSEQ.
NOTE: The data set EMWS2.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 386 observations read from the data set EMWS2.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS2.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS2.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS2.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 90 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS2.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 30 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS2.TREE2_TREE_PLOT has 15 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS2.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS2.TREE2_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS2.TREE2_TREE_PLOT has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS2.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 15 observations read from the data set EMWS2.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19893
19894  *------------------------------------------------------------*;
19895  * End REPORT: Tree2;
19896  *------------------------------------------------------------*;
 
19897  /* Reset EM Options */
19898  options formchar="|----|+|---+=|-/\<>*";
19899  options nocenter ls=256 ps=10000;
19900  goptions reset=all device=GIF NODISPLAY;
 
19901  proc sort data=WORK.EM_USER_REPORT;
19902  by ID VIEW;
19903  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19904  proc sort data=EMWS2.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19905  by NAME;
19906  run;
 
NOTE: There were 99 observations read from the data set EMWS2.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19907  proc sort data=EMWS2.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19908  by NAME;
19909  run;
 
NOTE: There were 99 observations read from the data set EMWS2.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19910  data WORK.ASSESS_META;
19911  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19912  by NAME;
19913  run;
 
NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19914  data EM_temp_assessMeta;
19915  set EMWS2.Tree2_CMeta_TRAIN;
19916  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19917  run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19918  data EM_temp_assessdata;
19919  set EMWS2.Tree2_TRAIN(keep=
19920  F_RESPOND
19921  I_RESPOND
19922  P_RESPOND0
19923  P_RESPOND1
19924  Q_RESPOND0
19925  Q_RESPOND1
19926  R_RESPOND0
19927  R_RESPOND1
19928  U_RESPOND
19929  V_RESPOND0
19930  V_RESPOND1
19931  _WARN_
19932  RESPOND
19933  );
19934  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24219   data EM_temp_assessMeta;
24220   set EMWS2.Tree2_CMeta_TRAIN;
24221   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24222   run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24223   data EM_temp_assessdata;
24224   set EMWS2.Tree2_VALIDATE(keep=
24225   F_RESPOND
24226   I_RESPOND
24227   P_RESPOND0
24228   P_RESPOND1
24229   Q_RESPOND0
24230   Q_RESPOND1
24231   R_RESPOND0
24232   R_RESPOND1
24233   U_RESPOND
24234   V_RESPOND0
24235   V_RESPOND1
24236   _WARN_
24237   RESPOND
24238   );
24239   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 16121 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS2.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28533   %let _cn = %sysfunc(getoption(CENTER));
28534   options nocenter;
28535   proc print data=EMWS2.Tree2_EMREPORTFIT noobs label;
28536   var STAT LABEL TRAIN
28537   VALIDATE
28538   ;
28539   by TARGET TARGETLABEL;
28540   title9 ' ';
28541   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28542   run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28543   title10;
28544   options &_cn;
 
28545   proc sort data=EMWS2.Tree2_EMCLASSIFICATION nothreads;
28546   by DATAROLE TARGET TARGETLABEL;
28547   run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS2.TREE2_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28548   %let _cn = %sysfunc(getoption(CENTER));
28549   options nocenter;
28550   proc print data=EMWS2.Tree2_EMCLASSIFICATION noobs label;
28551   var from into pct_row pct_col count percent
28552   ;
28553   by DATAROLE TARGET TARGETLABEL;
28554   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28555   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28556   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28557   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28558   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28559   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28560   where _TYPE_='PREDICTION';
28561   title9 ' ';
28562   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28563   run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28564   title9;
28565   title10;
28566   options &_cn;
 
28567   %let _cn = %sysfunc(getoption(CENTER));
28568   options nocenter;
28569   data EMWS2.Tree2_EMEVENTREPORT;
28570   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28570 !  8;
28571   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28571 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28571 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28571 ! FALSEEVENT
28572   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28572 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28572 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28573      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28574   FALSEEVENT=0;
28575   FALSENEVENT=0;
28576   TRUEEVENT=0;
28577   TRUENEVENT=0;
28578   set EMWS2.Tree2_EMEVENTREPORT;
28579   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS2.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28580   proc print data=EMWS2.Tree2_EMEVENTREPORT noobs label;
28581   title9 ' ';
28582   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28583   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28584   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28585   title10;
28586   options &_cn;
 
28587   proc datasets library=EMWS2 nolist;
28588   modify Tree2_EMRANK;
28589   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28590   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28591   run;
 
NOTE: MODIFY was successful for EMWS2.TREE2_EMRANK.DATA.
28592   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
28593   %let _cn = %sysfunc(getoption(CENTER));
28594   options nocenter;
28595   proc print data=EMWS2.Tree2_EMRANK label noobs;
28596   var
28597   decile gain lift liftc resp respc N _meanP_;
28598   by
28599   notsorted DATAROLE
28600   notsorted TARGET
28601   notsorted TARGETLABEL
28602   ;
28603   title9 ' ';
28604   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28605   run;
 
NOTE: There were 40 observations read from the data set EMWS2.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28606   title10;
28607   options &_cn;
 
28608   proc datasets library=EMWS2 nolist;
28609   modify Tree2_EMSCOREDIST;
28610   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28611   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28612   run;
 
NOTE: MODIFY was successful for EMWS2.TREE2_EMSCOREDIST.DATA.
28613   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
