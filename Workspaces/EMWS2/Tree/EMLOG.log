*------------------------------------------------------------*
User:                pkumari1
Date:                April 19, 2017
Time:                01:36:01
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                April 19, 2017
Time:                01:35:51
*------------------------------------------------------------*
14716  proc freq data=EMWS2.Tree_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.TreeMETA;
14718  run;
 
NOTE: There were 99 observations read from the data set EMWS2.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14719  proc print data=WORK.TreeMETA label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14755  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14756  length ORDER $20;
14757  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14758     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14759  set EMWS2.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
14760  NumLevels=2;
14761  select(upcase(ORDER));
14762  when('DESC') ORDER = 'Descending';
14763  when('ASC') ORDER = 'Ascending';
14764  when('FMTDESC') ORDER = 'Formatted Descending';
14765  when('FMTASC') ORDER = 'Formatted Ascending';
14766  otherwise ORDER = 'Descending';
14767  end;
14768  output;
14769  run;
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14770  title9 ' ';
14771  proc print data=WORK.Tree_EVENT noobs label;
14772  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14773  title9 ' ';
14774  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14775  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14776  title10;
 
"No decisions defined for target "RESPOND"."
14777  proc print data = EMWS2.Ids_RESPOND_DM noobs label;
14778  var _type_ variable label;
14779  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14780  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14781  title9 ' ';
14782  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14783  run;
 
NOTE: There were 7 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14784  title10;
 
14785  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15330  *------------------------------------------------------------*;
15331  * Tree: Generation of macros and macro variables;
15332  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15333  *------------------------------------------------------------*;
 
15334  %let EMEXCEPTIONSTRING=;
15335  *------------------------------------------------------------*;
15336  * TRAIN: Tree;
15337  *------------------------------------------------------------*;
15338  %let EM_ACTION = TRAIN;
15339  %let syscc = 0;
15340  %macro main;
15341
15342    %if %upcase(&EM_ACTION) = CREATE %then %do;
15343      filename temp catalog 'sashelp.emmodl.tree_create.source';
15344      %include temp;
15345      filename temp;
15346
15347      %em_tree_create;
15348    %end;
15349
15350     %else
15351     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15352
15353         filename temp catalog 'sashelp.emmodl.tree_train.source';
15354         %include temp;
15355         filename temp;
15356         %em_tree_train;
15357     %end;
15358
15359    %else
15360    %if %upcase(&EM_ACTION) = SCORE %then %do;
15361      filename temp catalog 'sashelp.emmodl.tree_score.source';
15362      %include temp;
15363      filename temp;
15364
15365      %em_tree_score;
15366
15367    %end;
15368
15369    %else
15370    %if %upcase(&EM_ACTION) = REPORT %then %do;
15371
15372         filename temp catalog 'sashelp.emmodl.tree_report.source';
15373         %include temp;
15374         filename temp;
15375
15376         %em_tree_report;
15377     %end;
15378
15379    %else
15380    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15381
15382         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15383         %include temp;
15384         filename temp;
15385         %EM_TREE_OPENTREEVIEWER;
15386
15387     %end;
15388
15389    %else
15390    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15391
15392         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15393         %include temp;
15394         filename temp;
15395         %EM_TREE_CLOSETREEVIEWER;
15396
15397     %end;
15398
15399
15400     %doendm:
15401  %mend main;
15402
15403  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15405 +%macro em_tree_train;
15407 +   %if &EM_IMPORT_DATA eq %then %do;
15408 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15409 +       %put &em_codebar;
15410 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15411 +       %put &errormsg;
15412 +       %put &em_codebar;
15413 +       %goto doendm;
15414 +   %end;
15415 +   %else
15416 +       %let EMEXCEPTIONSTRING =;
15418 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15419 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15420 +        %put &em_codebar;
15421 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15422 +        %put &errormsg;
15423 +        %put &em_codebar;
15424 +        %goto doendm;
15425 +   %end;
15427 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15428 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15429 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15430 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15431 +        %put &em_codebar;
15432 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15433 +        %put &errormsg;
15434 +        %put &em_codebar;
15435 +        %goto doendm;
15436 +   %end;
15438 +   /* Initialize property macro variables */
15439 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15440 +   %include temp;
15441 +   filename temp;
15443 +   %EM_SetProperties;
15445 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15446 +   %EM_GETNAME(key=EMTREE, type=DATA);
15447 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15448 +     /* if import eq Y and no importtable defined, throw an exception */
15449 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15450 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15451 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15452 +         %put &em_codebar;
15453 +         %put &errmsg;
15454 +         %put &em_codebar;
15455 +         %goto doendm;
15456 +      %end;
15457 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15458 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15459 +         %put &em_codebar;
15460 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15461 +         %put &errormsg;
15462 +         %put &em_codebar;
15463 +         %goto doendm;
15464 +      %end;
15465 +      %else %do;
15466 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15467 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15468 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15469 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15470 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15471 +         %let dsid = %sysfunc(close(&dsid));
15472 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15473 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15474 +            %put &em_codebar;
15475 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15476 +            %put &errormsg;
15477 +            %put &em_codebar;
15478 +            %goto doendm;
15479 +         %end;
15480 +      %end;
15481 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15482 +         proc delete data=&EM_USER_EMTREE;
15483 +         run;
15484 +      %end;
15485 +   %end;
15486 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15487 +      proc delete data=&EM_USER_EMTREE;
15488 +      run;
15489 +   %end;
15491 +   /* load tree macros */
15492 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15493 +   %include temp;
15494 +   filename temp;
15496 +   /* data sets */
15497 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15498 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15499 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15501 +   /* files */
15502 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15504 +   /* check actual num of target levels */
15505 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15506 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15507 +                              nLevel=_nTargetLevel );
15508 +      %if &_nTargetLevel  > 2 %then %do;
15509 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15510 +        %put &em_codebar;
15511 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15512 +        %put &errormsg;
15513 +        %put &em_codebar;
15514 +        %goto doendm;
15515 +      %end;
15516 +   %end;
15518 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15519 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15520 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15521 +        %let costflag=0;
15522 +        data _null_;
15523 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15524 +          if eof then call symput("costflag", _N_);
15525 +        run;
15526 +        %if &costflag gt 0 %then %do;
15527 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15528 +          %put &em_codebar;
15529 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15530 +          %put &errormsg;
15531 +          %put &em_codebar;
15532 +          %goto doendm;
15533 +       %end;
15534 +     %end;
15535 +   %end;
15537 +   /* determine if multiple targets will be processed */
15538 +   %let em_tree_multipleTargets=N;
15539 +   %let em_tree_numTarget = 1;
15540 +   %let em_tree_targetVars=;
15542 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15543 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15544 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15545 +         %let em_tree_multipleTargets=N;
15546 +      %end;
15547 +      %else %do;
15548 +         /* create macro array of targets  */
15549 +         data _null_;
15550 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15551 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15552 +           if eof then
15553 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15554 +        run;
15556 +        %if &em_tree_numTarget gt 1 %then %do;
15557 +           %let em_tree_multipleTargets=Y;
15558 +        %end;
15559 +      %end;
15560 +   %end;
15562 +   /* create view of only necessary variable for performance reasons */
15563 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15564 +   data &tempData / view=&tempData;
15565 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15566 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15567 +       %EM_TARGET
15568 +     %end;
15569 +     %else %do;
15570 +       %if &em_tree_numTarget ne 0 %then %do;
15571 +         %do i=1 %to &em_tree_numTarget;
15572 +            &&em_tree_targetVars&i
15573 +         %end;
15574 +       %end;
15575 +     %end;
15576 +     );
15577 +   run;
15579 +   /* run Tree procedure */
15580 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15582 +   /* Check return code and throw exception if error is detected */
15583 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15584 +   %if &syserr %then %do;
15585 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15586 +     %goto doendm;
15587 +   %end;
15589 +   /* add decision score code if multiple targets are processed */
15590 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15591 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15592 +   %end;
15594 +   /* create outfit dataset if multiple score statements have been executed */
15595 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15597 +   /* create English Rules */
15598 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15599 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15600 +       %em_tree_makeEnglishRules;
15602 +       /* English Rules */
15603 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15605 +     %end;
15606 +   filename x;
15608 +   %doendm:
15609 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15610 +%macro EM_SetProperties;
15612 +   /* train properties */
15613 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15655 +   /* properties for interactive sample */
15656 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15661 +   /* report properties */
15662 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15676 +   /* score properties */
15677 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15680 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15682 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15683 +  %global &nLevel;
15684 +  proc dmdb batch data=&indata
15685 +    classout=_tmp_dmdbout;
15686 +    class &target;
15687 +  run;
15688 +  data _tmp_dmdbout;
15689 +    set _tmp_dmdbout;
15690 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15691 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15692 +  run;
15693 +  data _null_;
15694 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15695 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15696 +    %let dsid = %sysfunc(close(&dsid));
15697 +     call symput("&nLevel", put(&_obs, Best12.));
15698 +  run;
15700 +  proc datasets lib=work nolist;
15701 +     delete _tmp_dmdbout;
15702 +  run;
15703 +  quit;
15704 +%Mend EM_CheckBinaryTargetLevel;
15707 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15709 +  /* determine the number of obs in training data */
15710 +  proc sql;
15711 +    reset noprint;
15712 +    select count(*) into :em_nobs from &indata;
15713 +  quit;
15715 +  /* determine the number of input variables */
15716 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15717 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15719 +  /* retrieve targetEvent from decmeta */
15720 +  %let targetEvent=;
15721 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15722 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15723 +      data _null_;
15724 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15725 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15726 +      run;
15727 +    %end;
15728 +  %end;
15730 +  /* create targetTable if multipleTar eq Y */
15731 +  data temptarget;
15732 +    set &EM_DATA_VARIABLESET;
15733 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15734 +  run;
15736 + /* data sets */
15737 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15738 + %EM_GETNAME(key=EMTREE,        type=DATA);
15739 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15740 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15741 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15742 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15743 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15744 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15745 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15746 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15748 + /* files */
15749 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15750 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15752 + /* turn on pmml if requested */
15753 + %let nnpmml=0;
15754 + %if %symexist(EM_PMML) %then %do;
15755 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15756 +       %let nnpmml=1;
15758 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15759 +%end;
15761 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15763 + %if &nnpmml or &numClassTarget %then %do;
15765 +       /* create dmdb needed for pmml generation */
15766 +       %let tree_maxlevel = 512;
15767 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15768 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15769 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15770 +         %end;
15771 +       %end;
15772 +       %if &tree_maxlevel gt 0 %then %do;
15773 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15774 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15775 +       %end;
15777 +       %let targetOrderString =;
15778 +       %let targetString = ;
15779 +       data _null_;
15780 +          length orderString nameString $10000;
15781 +          retain orderString nameString;
15782 +          set &em_data_variableset end=eof;
15783 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15784 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15785 +          %end;
15786 +          %else %do;
15787 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15788 +          %end;          select(order);
15789 +            when('')        order ='DESC';
15790 +            when('FMTASC')  order='ASCFMT';
15791 +            when('FMTDESC') order='DESFMT';
15792 +            otherwise;
15793 +          end;
15794 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15795 +          nameString = trim(nameString)!!' '!!trim(NAME);
15797 +          if eof then do;
15798 +             call symput('targetOrderString', trim(orderString));
15799 +             call symput('targetString', trim(nameString));
15800 +          end;
15801 +       run;
15803 +       %let arborkluge= "work._treeDMDB";
15805 +       proc dmdb batch data=&indata
15806 +       %if &nnpmml %then %do;
15807 +           PMML
15808 +       %end;
15809 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15812 +   %if &nnpmml %then %do;
15813 +        %if "%EM_ID" ne "" %then %do;
15814 +          id %EM_ID;
15815 +        %end;
15816 +        %if &EM_NUM_CLASS gt 0 %then %do;
15817 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15818 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15819 +               &targetOrderString;
15820 +        %end;
15821 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15822 +          var %EM_INTERVAL;
15823 +        %end;
15824 +        target &targetString %EM_INTERVAL_TARGET;
15825 +        %if "%EM_FREQ" ne "" %then %do;
15826 +          freq %EM_FREQ;
15827 +        %end;
15828 +  %end;
15829 +  %else %do;
15830 +      class  &targetOrderString;
15831 +      target &targetString %EM_INTERVAL_TARGET;
15832 +  %end;
15833 +       run;
15834 +       quit;
15836 +       proc datasets lib=work nolist;
15837 +          delete classout varout;
15838 +       run;
15839 +       quit;
15841 +    %end;
15842 + %end;
15844 + /* run Arbor procedure */
15845 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15846 +  proc arbor data=&INDATA
15848 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15849 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15850 +  %end;
15852 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15853 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15854 +  %end;
15856 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15857 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15858 +  %end;
15860 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15861 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15862 +  %end;
15864 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15865 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15866 +  %end;
15868 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15869 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15870 +  %end;
15871 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15872 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15873 +  %end;
15874 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15875 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15876 +  %end;
15878 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15879 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15880 +      alpha = &EM_PROPERTY_SIGLEVEL
15881 +    %end;
15882 +  %end;
15884 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15885 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15886 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15887 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15888 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15890 +        padjust =
15891 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15892 +          &chaid
15893 +        %end;
15894 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15895 +          DEPTH
15896 +        %end;
15897 +      %end;
15898 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15899 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15900 +         pvars = &num_inputs
15901 +      %end;
15902 +    %end;
15903 +  %end;
15904 +  %else %do;
15905 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15906 +         padjust = NONE
15907 +      %end;
15908 +  %end;
15910 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15911 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15912 +    Maxrules = &num_nrules
15913 +  %end;
15915 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15916 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15917 +    Maxsurrs = &num_nsurrs
15918 +  %end;
15920 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15921 +     Missing=&EM_PROPERTY_MISSINGVALUE
15922 +  %end;
15924 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15925 +     USEVARONCE
15926 +  %end;
15928 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15929 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15930 +  %end;
15933 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15934 +    event = "&targetEvent"
15935 +  %end;
15937 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15938 +     DECSEARCH
15939 +  %end;
15941 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15942 +     PRIORSSEARCH
15943 +  %end;
15945 +  %if &arbor_1 ne %then %do;
15946 +    &arbor_1
15947 +  %end;
15949 +  %if &em_arbor ne %then %do;
15950 +     &em_arbor
15951 +  %end;
15952 +  ;
15953 + %end;
15954 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15955 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15956 +       interact;
15957 + %end;
15958 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15959 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15960 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15961 +    %put &em_codebar;
15962 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15963 +    %put &errormsg;
15964 +    %put &em_codebar;
15965 +    %goto doendm;
15966 +   %end;
15967 +   %else %do;
15968 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15969 +       interact;
15970 +   %end;
15971 + %end;
15973 + %else %do;
15974 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15975 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15976 +    %put &em_codebar;
15977 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15978 +    %put &errormsg;
15979 +    %put &em_codebar;
15980 +    %goto doendm;
15981 +   %end;
15982 +   %else %do;
15983 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15984 +        interact;
15985 +   %end;
15986 + %end;
15988 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15989 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15990 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15991 +    %end;
15993 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15994 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15995 +    %end;
15997 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15998 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15999 +    %end;
16001 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16002 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16003 +    %end;
16005 +    %if "%EM_FREQ" ne "" %then %do;
16006 +       freq %EM_FREQ;
16007 +    %end;
16009 +    %if "&multipleTar" eq "Y" %then %do;
16010 +       /* cycle through all target vars in variableset */
16011 +       %let tdsid = %sysfunc(open(temptarget));
16012 +       %if &tdsid %then %do;
16013 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16014 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16015 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16016 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16017 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16018 +             target &var / level = &lvl
16019 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16020 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16021 +             %end;
16022 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16023 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16024 +             %end;
16025 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16026 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16027 +             %end;
16028 +          %end;
16029 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16030 +       %end;
16031 +       useTarget variable = %EM_TARGET;
16032 +    %end;
16033 +    %else %do;
16034 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16035 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16036 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16037 +      %end;
16038 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16039 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16040 +      %end;
16041 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16042 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16043 +      %end;
16044 +    %end;
16046 +    %if "&multipleTar" eq "N" %then %do;
16047 +      &EM_DEC_STATEMENT;
16048 +    %end;
16050 +    Performance &EM_PROPERTY_PERFORMANCE
16051 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16052 +      nodesize=&EM_PROPERTY_NODESAMPLE
16053 +    %end;
16054 +    ;
16056 +    %if "&intFlag" eq "Y" %then %do;
16057 +       INTERACT Largest;
16058 +       Train maxnewdepth=0;
16059 +    %end;
16061 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16062 +         Assess
16063 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16064 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16065 +              %put &em_codebar;
16066 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16067 +              %put &errormsg;
16068 +              %put &em_codebar;
16069 +            %end;
16070 +            %else %do;
16071 +               Validata=&EM_IMPORT_VALIDATE
16072 +            %end;
16073 +         %end;
16074 +         %else %do;
16075 +           NoValidata
16076 +         %end;
16077 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16078 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16079 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16080 +               %if &dsid %then %do;
16081 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16082 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16083 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16084 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16085 +                   %else %do;
16086 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16087 +                      %else %let measure= MISC;
16088 +                   %end;
16089 +                 %end;
16090 +               %end;
16091 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16092 +            %end;
16093 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16094 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16095 +                 %let measure=ASE;
16096 +              %end;
16097 +              %else %do;
16098 +                 %let measure=MISC;
16099 +              %end;
16100 +            %end;
16101 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16102 +              %let measure=ASE;
16103 +            %end;
16104 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16105 +               %let measure = LIFT;
16106 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16107 +               %if &dsid %then %do;
16108 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16109 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16110 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16111 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16112 +                 %end;
16113 +               %end;
16114 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16115 +            %end;
16116 +            measure=&measure
16117 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16118 +               event = "&targetEvent"
16119 +            %end;
16120 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16121 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16122 +            %end;
16123 +         %end;
16124 +         %if "&multipleTar" eq "N" %then %do;
16125 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16126 +               CV
16127 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16128 +                 CVNITer = &EM_PROPERTY_CVNITER
16129 +               %end;
16130 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16131 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16132 +               %end;
16133 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16134 +                 CVSeed = &EM_PROPERTY_CVSEED
16135 +               %end;
16136 +            %end;
16137 +         %end;
16138 +       %end;
16139 +      ;
16141 +      %if "&intFlag" ne "Y" %then %do;
16142 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16143 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16144 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16145 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16147 +          SUBTREE &subtree
16148 +          %if "&subtree" eq "NLEAVES" %then %do;
16149 +            =&EM_PROPERTY_NSUBTREE
16150 +          %end;
16151 +          ;
16152 +        %end;
16154 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16155 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16156 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16157 +          %end;
16158 +       %end;
16159 +      %end;
16160 + %end;
16163 + MakeMacro nleaves = nleaves;
16164 + save
16165 + %if "&EM_USER_EMTREE" ne "" %then %do;
16166 +   MODEL=&EM_USER_EMTREE
16167 + %end;
16168 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16169 +   SEQUENCE=&EM_USER_OUTSEQ
16170 + %end;
16171 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16172 +   IMPORTANCE=&EM_USER_OUTIMPORT
16173 + %end;
16174 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16175 +   NODESTAT=&EM_USER_OUTNODES
16176 + %end;
16177 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16178 +   SUMMARY=&EM_USER_OUTSUMMARY
16179 + %end;
16180 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16181 +   STATSBYNODE=&EM_USER_OUTSTATS
16182 + %end;
16183 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16184 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16185 + %end;
16186 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16187 +   Pathlistnonmissing=&EM_USER_OUTPATH
16188 + %end;
16189 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16190 +   RULES = &EM_USER_OUTRULES
16191 + %end;
16192 + ;
16194 + %if "&intFlag" ne "Y" %then %do;
16196 +   %let lookupString = ;
16197 +   %if ^%symexist(EM_OPTION) %then
16198 +      %let EM_OPTION=;
16200 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16201 +      %let lookupString = LOOKUP=SELECT;
16202 +   %end;
16204 +   %let codetext=;
16205 +   %let norescodetxt=;
16207 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16208 +     %let codetext=&codetext DUMMY;
16209 +     %let norescodetxt=&norescodetxt DUMMY;
16210 +   %end;
16211 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16212 +     %let codetext=&codetext NOLEAFID;
16213 +     %let norescodetxt=&norescodetxt NOLEAFID;
16214 +   %end;
16215 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16216 +     %let norescodetxt=&norescodetxt NOPRED;
16217 +   %end;
16219 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16220 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16222 +   %if &nnpmml %then %do;
16223 +     code pmml;
16224 +   %end;
16226 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16227 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16228 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16229 +   %end;
16230 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16231 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16232 +   %end;
16233 + %end;
16235 + run;
16236 + quit;
16238 + /*%em_checkerror(); */
16239 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16240 +   /* Delete DMDB catalog */
16241 +   proc datasets lib=work nolist;
16242 +       delete _treeDMDB / mt=cat;
16243 +  run;
16244 +  %end;
16246 + %if &nnpmml %then %do;
16247 +    ods pmml close;
16248 + %end;
16250 +  %doendm:
16252 +%mend em_tree_runTreeProcedure;
16254 +%macro em_tree_createFitStats( multipleTar= );
16257 +  /* create targetTable is multipleTar eq Y */
16258 +  data temptarget;
16259 +    set &EM_DATA_VARIABLESET;
16260 +    where ROLE="TARGET";
16261 +  run;
16263 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16264 +   data &EM_USER_EMOUTFIT;
16265 +     length target $32;
16266 +     merge work.fit_train
16267 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16268 +       work.fit_valid
16269 +     %end;
16270 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16271 +       work.fit_test
16272 +     %end;
16273 +     ;
16274 +     %if "&multipleTar" eq "N" %then %do;
16275 +       target="%EM_TARGET";
16276 +     %end;
16277 +     %else %do;
16278 +       target = _TARGET_;
16279 +     %end;
16280 +     drop _NW_ _SUMW_
16281 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16282 +        _VSUMW_
16283 +     %end;
16284 +     ;
16285 +   run;
16287 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16288 +     proc datasets library=work nolist;
16289 +       delete fit_valid;
16290 +     run;
16291 +   %end;
16292 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16293 +     proc datasets library=work nolist;
16294 +       delete fit_test;
16295 +     run;
16296 +   %end;
16298 +%mend em_tree_createFitStats;
16301 +%macro em_tree_makeEnglishRules;
16303 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16304 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16306 +  /* verify that necessary tables exist and if not, skip processing */
16307 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16308 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16309 +    %goto doendm;
16310 +  %end;
16311 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16312 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16313 +    %goto doendm;
16314 +  %end;
16316 +  /* determine length of variable in outpath dataset */
16317 +  %let vlength= ;
16318 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16319 +  %if &dsid ne %then %do;
16320 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16321 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16322 +  %end;
16323 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16325 +  data tempoutpath;
16326 +    length varname $&vlength;
16327 +    retain varname;
16328 +    set &EM_USER_OUTPATH;
16330 +    if ^missing(variable) then varname=variable;
16331 +    else if ^missing(var_name) then varname=var_name;
16332 +    output;
16333 +  run;
16335 +  /* create an array of generated predicted variable names */
16336 +  %let tree_pred_vars = ;
16337 +  %let tree_pred_label = ;
16338 +  %let numpred= 0;
16339 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16341 +    data _null_;
16342 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16343 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16344 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16345 +     if eof then
16346 +       call symput('numpred', strip(put(_N_, BEST.)));
16347 +    run;
16348 +  %end;
16350 +  /* determine if NPRIORS exists in outnodes  */
16351 +  %local nprior_flag;
16352 +  data _null_;
16353 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16354 +    if eof then do;
16355 +      call symput('nprior_flag', strip(put(npriors, best.)));
16356 +    end;
16357 +  run;
16359 +  proc sort data=tempoutpath; by node; run;
16360 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16362 +  data tempoutpath;
16363 +    merge tempoutpath(in=_a) outnodes(keep= node
16364 +    %if "&nprior_flag" ne "." %then %do;
16365 +      NPRIORS
16366 +    %end;
16367 +    %else %do;
16368 +      N
16369 +    %end;
16370 +    %if &numpred gt 0 %then %do;
16371 +      %do i=1 %to &numpred;
16372 +        &&tree_pred_vars&i
16373 +      %end;
16374 +    %end;
16375 +    );
16376 +    by node;
16377 +    if _a;
16378 +  run;
16380 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16382 +  data _null_;
16383 +    file x;
16384 +    set tempoutpath;
16385 +    by node descending varname;
16386 +    retain origvar oldnode string;
16387 +    length origvar $32 oldnode 8 string $200;
16389 +    if _N_ = 1 then do;
16390 +      origvar = varname;
16391 +      oldnode = node;
16392 +    end;
16394 +    if first.node then do;
16395 +       put "&EM_CODEBAR";
16396 +       put " Node = " node;
16397 +       put "&EM_CODEBAR";
16398 +    end;
16400 +      if first.varname then do;
16401 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16402 +            if MISSING(CHARACTER_VALUE) then do;
16403 +             if NUMERIC_VALUE ne .  then do;
16404 +              if ^first.node then do;
16405 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16406 +              end;
16407 +              else do;
16408 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16409 +              end;
16410 +             end;
16411 +            end;
16412 +            else do;
16413 +              if ^first.node then do;
16414 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16415 +              end;
16416 +              else do;
16417 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16418 +              end;
16419 +             end;
16420 +         end;
16421 +         else if RELATION in ("=") then do;
16422 +            if ^first.node then do;
16423 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16424 +            end;
16425 +            else do;
16426 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16427 +            end;
16428 +         end;
16429 +         else if RELATION in ("ISMISSING") then do;
16430 +            if ^first.node then do;
16431 +              string = " AND "|| strip(varname) || " equals Missing";
16432 +            end;
16433 +            else do;
16434 +              string = "if "|| strip(varname) ||" equals Missing";
16435 +            end;
16436 +         end;
16437 +         else if RELATION in ("ISNOTMISSING") then do;
16438 +            if ^first.node then do;
16439 +              string = " AND "|| strip(varname) || " equals All Values";
16440 +            end;
16441 +            else do;
16442 +              string = "if "|| strip(varname) ||" equals All Values";
16443 +            end;
16444 +         end;
16445 +         if ^missing(varname) then origvar = varname;
16446 +         oldnode=node;
16448 +      end;
16449 +      else do;
16450 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16451 +          if MISSING(CHARACTER_VALUE) then do;
16452 +           if  NUMERIC_VALUE ne .  then do;
16453 +            if ^MISSING(string) then
16454 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16455 +            else
16456 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16457 +           end;
16458 +          end;
16459 +          else do;
16460 +            if ^MISSING(string) then
16461 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16462 +            else
16463 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16464 +          end;
16466 +         end;
16467 +         else if RELATION in ("=") then do;
16468 +           string = strip(string)||", "||strip(character_value);
16469 +         end;
16470 +         else if RELATION in ("ISMISSING") then do;
16472 +         end;
16473 +         if ^missing(varname) then origvar = varname;
16474 +         oldnode=node;
16475 +      end;
16476 +      if last.varname then do;
16477 +         if RELATION in ("ISMISSING") then do;
16478 +           if ^first.varname then do;
16479 +             string = strip(string) || " or MISSING";
16480 +           end;
16481 +         end;
16482 +         put string;
16483 +         if ^missing(varname) then origvar = varname;
16484 +         oldnode=node;
16485 +      end;
16487 +      if last.node then do;
16488 +         put "then ";
16489 +         put " Tree Node Identifier   = " node;
16491 +         %if "&nprior_flag" ne "." %then %do;
16492 +           put " Number of Observations = " NPRIORS;
16493 +         %end;
16494 +         %else %do;
16495 +           put " Number of Observations = " N;
16496 +         %end;
16498 +         %if &numpred gt 0 %then %do;
16499 +           %do i=1 %to &numpred;
16500 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16501 +           %end;
16502 +         %end;
16504 +         put " ";
16505 +         if ^missing(varname) then origvar = varname;
16506 +         oldnode=node;
16507 +      end;
16509 +  run;
16511 +  proc datasets lib=work nolist;
16512 +    delete tempoutpath outnodes;
16513 +  run;
16515 +  %doendm:
16516 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS2.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596687 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633958912 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 70699408 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Created macro variable NLEAVES equal to 4.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: The data set EMWS2.TREE_EMTREE has 2269 observations and 4 variables.
NOTE: The data set EMWS2.TREE_OUTNODES has 7 observations and 24 variables.
NOTE: The data set EMWS2.TREE_OUTPATH has 23 observations and 7 variables.
NOTE: The data set EMWS2.TREE_OUTRULES has 141 observations and 6 variables.
NOTE: The data set EMWS2.TREE_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS2.TREE_OUTSTATS has 49 observations and 5 variables.
NOTE: The data set EMWS2.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS2.TREE_OUTTOPOLOGY has 7 observations and 5 variables.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\TREEFLOW.sas opened.
NOTE: External file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           3.60 seconds
      cpu time            3.42 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           3.62 seconds
      cpu time            3.43 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS2.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS2.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 7 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 7 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=19Apr2017:01:35:56,
      Create Time=19Apr2017:01:35:56
 
NOTE: 45 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16518
16519  *------------------------------------------------------------*;
16520  * End TRAIN: Tree;
16521  *------------------------------------------------------------*;
 
16522  *------------------------------------------------------------*;
16523  * Close any missing semi colons;
16524  *------------------------------------------------------------*;
16525  ;
16526  ;
16527  ;
16528  ;
16529  quit;
16530  *------------------------------------------------------------*;
16531  * Close any unbalanced quotes;
16532  *------------------------------------------------------------*;
16533  /*; *"; *'; */
16534  ;
16535  run;
16536  quit;
16537  /* Reset EM Options */
16538  options formchar="|----|+|---+=|-/\<>*";
16539  options nocenter ls=256 ps=10000;
16540  goptions reset=all device=GIF NODISPLAY;
 
16541  proc sort data=WORK.EM_USER_REPORT;
16542  by ID VIEW;
16543  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 19, 2017
Time:                01:35:56
*------------------------------------------------------------*
16645  %let EMEXCEPTIONSTRING=;
16646  *------------------------------------------------------------*;
16647  * SCORE: Tree;
16648  *------------------------------------------------------------*;
16649  %let EM_ACTION = SCORE;
16650  %let syscc = 0;
16651  %macro main;
16652
16653    %if %upcase(&EM_ACTION) = CREATE %then %do;
16654      filename temp catalog 'sashelp.emmodl.tree_create.source';
16655      %include temp;
16656      filename temp;
16657
16658      %em_tree_create;
16659    %end;
16660
16661     %else
16662     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16663
16664         filename temp catalog 'sashelp.emmodl.tree_train.source';
16665         %include temp;
16666         filename temp;
16667         %em_tree_train;
16668     %end;
16669
16670    %else
16671    %if %upcase(&EM_ACTION) = SCORE %then %do;
16672      filename temp catalog 'sashelp.emmodl.tree_score.source';
16673      %include temp;
16674      filename temp;
16675
16676      %em_tree_score;
16677
16678    %end;
16679
16680    %else
16681    %if %upcase(&EM_ACTION) = REPORT %then %do;
16682
16683         filename temp catalog 'sashelp.emmodl.tree_report.source';
16684         %include temp;
16685         filename temp;
16686
16687         %em_tree_report;
16688     %end;
16689
16690    %else
16691    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16692
16693         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16694         %include temp;
16695         filename temp;
16696         %EM_TREE_OPENTREEVIEWER;
16697
16698     %end;
16699
16700    %else
16701    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16702
16703         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16704         %include temp;
16705         filename temp;
16706         %EM_TREE_CLOSETREEVIEWER;
16707
16708     %end;
16709
16710
16711     %doendm:
16712  %mend main;
16713
16714  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16716 +%macro em_tree_score;
16718 +   /* determine if multiple targets will be processed */
16719 +   %let em_tree_multipleTargets=N;
16720 +   %let em_tree_numTarget=1;
16721 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16722 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16723 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16724 +         %let em_tree_multipleTargets=N;
16725 +      %end;
16726 +      %else %do;
16727 +         /* create macro array of targets  */
16728 +         data _null_;
16729 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16730 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16731 +           if eof then
16732 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16733 +        run;
16735 +        %if &em_tree_numTarget gt 1 %then %do;
16736 +           %let em_tree_multipleTargets=Y;
16737 +        %end;
16738 +      %end;
16739 +   %end;
16741 +   /* build flow and publish scoring code */
16742 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16743 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16745 +   filename treeflow "&EM_USER_TREEFLOW";
16746 +   filename treepub "&EM_USER_TREEPUBLISH";
16748 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16749 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16751 +   %em_copyfile(infref=treeflow, outfref=flowref);
16752 +   %em_copyfile(infref=treepub, outfref=pubref);
16754 +   filename treeflow;
16755 +   filename treepub;
16757 +   /* if priors are used, add code to generate unadjusted residuals in export */
16758 +   %let useAdjPriors = N;
16759 +   data _null_;
16760 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16761 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16762 +   run;
16763 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16764 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16765 +      %include temp;
16766 +      filename temp;
16768 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16769 +      filename adjref "&EM_USER_adjResidualCode";
16770 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16772 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16774 +      filename adjref;
16775 +   %end;
16777 +   /* LEAF */
16778 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16779 +      data _null_;
16780 +        file flowref mod;
16781 +        put 'drop _LEAF_;';
16782 +      run;
16784 +      data _null_;
16785 +        file pubref mod;
16786 +        put 'drop _LEAF_;';
16787 +      run;
16789 +   %end;
16791 +   filename flowref;
16792 +   filename pubref;
16794 +   /* em_metachange code */
16795 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16796 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16797 +   %end;
16799 +   /* variable selection based on importance stat    */
16800 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16801 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16802 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16803 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16804 +     %let obs = %sysfunc(fetch(&dsid));
16805 +     %do %while(&obs=0);
16806 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16807 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16808 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16809 +       %let obs = %sysfunc(fetch(&dsid));
16810 +     %end;
16811 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16812 +   %end;
16814 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16815 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16816 +    %let tree_pred_vars = ;
16817 +    %let tree_pred_lvl =;
16818 +    %let numpred= 0;
16820 +    data _null_;
16821 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16822 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16823 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16824 +     if eof then
16825 +       call symput('numpred', strip(put(_N_, BEST.)));
16826 +    run;
16827 +   %end;
16829 +   %if &numpred ne 0 %then %do;
16830 +    %do i=1 %to &numpred;
16831 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16832 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16833 +    %end;
16834 +   %end;
16836 +   /* determine if multiple targets will be processed */
16837 +   %let em_tree_multipleTargets=N;
16838 +   %let em_tree_numTarget=1;
16839 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16840 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16841 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16842 +         %let em_tree_multipleTargets=N;
16843 +      %end;
16844 +      %else %do;
16845 +        data _null_;
16846 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16847 +          if eof then
16848 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16849 +        run;
16851 +        %if &em_tree_numTarget gt 1 %then %do;
16852 +           %let em_tree_multipleTargets=Y;
16853 +        %end;
16854 +     %end;
16855 +   %end;
16857 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16858 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16860 +      /* variable importance */
16861 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16862 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16864 +         %let validexist=0;
16865 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16866 +           %let validexist=1;
16867 +         %end;
16869 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16870 +         /* and the columns may not be generated                                                                                 */
16871 +         %let em_tree_cvexists=;
16872 +         %let em_tree_surrexists=.;
16873 +         data _null_;
16874 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16875 +            if eof then do ;
16876 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16877 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16878 +            end;
16879 +         run;
16881 +         data &EM_USER_OUTIMPORT;
16882 +            set &EM_USER_OUTIMPORT;
16884 +            /* format columns based on Precison value specified */
16885 +            format importance 15.&EM_PROPERTY_PRECISION
16886 +                 %if &validexist %then %do;
16887 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16888 +                 %end;
16889 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16890 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16891 +                 %end;
16892 +            ;
16893 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16894 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16895 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16896 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16897 +                 %if "&em_tree_surrexists" ne "" %then %do;
16898 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16899 +                 %end;
16900 +                 %if &validexist %then %do;
16901 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16902 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16903 +                 %end;
16904 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16905 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16906 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16907 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16908 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16909 +                 %end;
16910 +            ;
16911 +         run;
16913 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16914 +      %end;
16915 +   %end;
16917 +   %doendm:
16918 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=19Apr2017:01:35:56,
      Create Time=19Apr2017:01:35:56
 
NOTE: 110 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=19Apr2017:01:35:56,
      Create Time=19Apr2017:01:35:56
 
NOTE: 88 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=3803,
      Last Modified=19Apr2017:01:35:56,
      Create Time=19Apr2017:01:35:56
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=3174,
      Last Modified=19Apr2017:01:35:56,
      Create Time=19Apr2017:01:35:56
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 75 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 76 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 77 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 77 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 78 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 79 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 80 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 81 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 82 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 82 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 83 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 83 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 84 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 85 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 85 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 86 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 88 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 88 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 89 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 89 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 90 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 90 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16919
16920  *------------------------------------------------------------*;
16921  * End SCORE: Tree;
16922  *------------------------------------------------------------*;
 
16923  proc sort data=WORK.EM_METACHANGE;
16924  by key uname;
16925  run;
 
NOTE: There were 90 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 90 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16926  filename x "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas";
16927  data _null_;
16928  file x;
16929  put 'if upcase(NAME) = "ACTBUY" then do;';
16930  put 'ROLE = "REJECTED";';
16931  put 'end;';
16932  put 'else ';
16933  put 'if upcase(NAME) = "BOTHPAYM" then do;';
16934  put 'ROLE = "REJECTED";';
16935  put 'end;';
16936  put 'else ';
16937  put 'if upcase(NAME) = "BUYPROP" then do;';
16938  put 'ROLE = "REJECTED";';
16939  put 'end;';
16940  put 'else ';
16941  put 'if upcase(NAME) = "CATALOGCNT" then do;';
16942  put 'ROLE = "REJECTED";';
16943  put 'end;';
16944  put 'else ';
16945  put 'if upcase(NAME) = "CCPAYM" then do;';
16946  put 'ROLE = "REJECTED";';
16947  put 'end;';
16948  put 'else ';
16949  put 'if upcase(NAME) = "DEPT01" then do;';
16950  put 'ROLE = "REJECTED";';
16951  put 'end;';
16952  put 'else ';
16953  put 'if upcase(NAME) = "DEPT02" then do;';
16954  put 'ROLE = "REJECTED";';
16955  put 'end;';
16956  put 'else ';
16957  put 'if upcase(NAME) = "DEPT03" then do;';
16958  put 'ROLE = "REJECTED";';
16959  put 'end;';
16960  put 'else ';
16961  put 'if upcase(NAME) = "DEPT04" then do;';
16962  put 'ROLE = "REJECTED";';
16963  put 'end;';
16964  put 'else ';
16965  put 'if upcase(NAME) = "DEPT05" then do;';
16966  put 'ROLE = "REJECTED";';
16967  put 'end;';
16968  put 'else ';
16969  put 'if upcase(NAME) = "DEPT06" then do;';
16970  put 'ROLE = "REJECTED";';
16971  put 'end;';
16972  put 'else ';
16973  put 'if upcase(NAME) = "DEPT07" then do;';
16974  put 'ROLE = "REJECTED";';
16975  put 'end;';
16976  put 'else ';
16977  put 'if upcase(NAME) = "DEPT08" then do;';
16978  put 'ROLE = "REJECTED";';
16979  put 'end;';
16980  put 'else ';
16981  put 'if upcase(NAME) = "DEPT09" then do;';
16982  put 'ROLE = "REJECTED";';
16983  put 'end;';
16984  put 'else ';
16985  put 'if upcase(NAME) = "DEPT10" then do;';
16986  put 'ROLE = "REJECTED";';
16987  put 'end;';
16988  put 'else ';
16989  put 'if upcase(NAME) = "DEPT11" then do;';
16990  put 'ROLE = "REJECTED";';
16991  put 'end;';
16992  put 'else ';
16993  put 'if upcase(NAME) = "DEPT12" then do;';
16994  put 'ROLE = "REJECTED";';
16995  put 'end;';
16996  put 'else ';
16997  put 'if upcase(NAME) = "DEPT13" then do;';
16998  put 'ROLE = "REJECTED";';
16999  put 'end;';
17000  put 'else ';
17001  put 'if upcase(NAME) = "DEPT14" then do;';
17002  put 'ROLE = "REJECTED";';
17003  put 'end;';
17004  put 'else ';
17005  put 'if upcase(NAME) = "DEPT15" then do;';
17006  put 'ROLE = "REJECTED";';
17007  put 'end;';
17008  put 'else ';
17009  put 'if upcase(NAME) = "DEPT16" then do;';
17010  put 'ROLE = "REJECTED";';
17011  put 'end;';
17012  put 'else ';
17013  put 'if upcase(NAME) = "DEPT17" then do;';
17014  put 'ROLE = "REJECTED";';
17015  put 'end;';
17016  put 'else ';
17017  put 'if upcase(NAME) = "DEPT18" then do;';
17018  put 'ROLE = "REJECTED";';
17019  put 'end;';
17020  put 'else ';
17021  put 'if upcase(NAME) = "DEPT19" then do;';
17022  put 'ROLE = "REJECTED";';
17023  put 'end;';
17024  put 'else ';
17025  put 'if upcase(NAME) = "DEPT20" then do;';
17026  put 'ROLE = "REJECTED";';
17027  put 'end;';
17028  put 'else ';
17029  put 'if upcase(NAME) = "DEPT21" then do;';
17030  put 'ROLE = "REJECTED";';
17031  put 'end;';
17032  put 'else ';
17033  put 'if upcase(NAME) = "DEPT22" then do;';
17034  put 'ROLE = "REJECTED";';
17035  put 'end;';
17036  put 'else ';
17037  put 'if upcase(NAME) = "DEPT23" then do;';
17038  put 'ROLE = "REJECTED";';
17039  put 'end;';
17040  put 'else ';
17041  put 'if upcase(NAME) = "DEPT24" then do;';
17042  put 'ROLE = "REJECTED";';
17043  put 'end;';
17044  put 'else ';
17045  put 'if upcase(NAME) = "DEPT25" then do;';
17046  put 'ROLE = "REJECTED";';
17047  put 'end;';
17048  put 'else ';
17049  put 'if upcase(NAME) = "DEPT26" then do;';
17050  put 'ROLE = "REJECTED";';
17051  put 'end;';
17052  put 'else ';
17053  put 'if upcase(NAME) = "DEPT27" then do;';
17054  put 'ROLE = "REJECTED";';
17055  put 'end;';
17056  put 'else ';
17057  put 'if upcase(NAME) = "DOLINDEA" then do;';
17058  put 'ROLE = "REJECTED";';
17059  put 'end;';
17060  put 'else ';
17061  put 'if upcase(NAME) = "DOLINDET" then do;';
17062  put 'ROLE = "REJECTED";';
17063  put 'end;';
17064  put 'else ';
17065  put 'if upcase(NAME) = "DOLLARQ01" then do;';
17066  put 'ROLE = "REJECTED";';
17067  put 'end;';
17068  put 'else ';
17069  put 'if upcase(NAME) = "DOLLARQ02" then do;';
17070  put 'ROLE = "REJECTED";';
17071  put 'end;';
17072  put 'else ';
17073  put 'if upcase(NAME) = "DOLLARQ03" then do;';
17074  put 'ROLE = "REJECTED";';
17075  put 'end;';
17076  put 'else ';
17077  put 'if upcase(NAME) = "DOLLARQ04" then do;';
17078  put 'ROLE = "REJECTED";';
17079  put 'end;';
17080  put 'else ';
17081  put 'if upcase(NAME) = "DOLLARQ05" then do;';
17082  put 'ROLE = "REJECTED";';
17083  put 'end;';
17084  put 'else ';
17085  put 'if upcase(NAME) = "DOLLARQ06" then do;';
17086  put 'ROLE = "REJECTED";';
17087  put 'end;';
17088  put 'else ';
17089  put 'if upcase(NAME) = "DOLLARQ07" then do;';
17090  put 'ROLE = "REJECTED";';
17091  put 'end;';
17092  put 'else ';
17093  put 'if upcase(NAME) = "DOLLARQ08" then do;';
17094  put 'ROLE = "REJECTED";';
17095  put 'end;';
17096  put 'else ';
17097  put 'if upcase(NAME) = "DOLLARQ09" then do;';
17098  put 'ROLE = "REJECTED";';
17099  put 'end;';
17100  put 'else ';
17101  put 'if upcase(NAME) = "DOLLARQ10" then do;';
17102  put 'ROLE = "REJECTED";';
17103  put 'end;';
17104  put 'else ';
17105  put 'if upcase(NAME) = "DOLLARQ11" then do;';
17106  put 'ROLE = "REJECTED";';
17107  put 'end;';
17108  put 'else ';
17109  put 'if upcase(NAME) = "DOLLARQ12" then do;';
17110  put 'ROLE = "REJECTED";';
17111  put 'end;';
17112  put 'else ';
17113  put 'if upcase(NAME) = "DOLLARQ13" then do;';
17114  put 'ROLE = "REJECTED";';
17115  put 'end;';
17116  put 'else ';
17117  put 'if upcase(NAME) = "DOLLARQ14" then do;';
17118  put 'ROLE = "REJECTED";';
17119  put 'end;';
17120  put 'else ';
17121  put 'if upcase(NAME) = "DOLLARQ15" then do;';
17122  put 'ROLE = "REJECTED";';
17123  put 'end;';
17124  put 'else ';
17125  put 'if upcase(NAME) = "DOLLARQ16" then do;';
17126  put 'ROLE = "REJECTED";';
17127  put 'end;';
17128  put 'else ';
17129  put 'if upcase(NAME) = "DOLLARQ17" then do;';
17130  put 'ROLE = "REJECTED";';
17131  put 'end;';
17132  put 'else ';
17133  put 'if upcase(NAME) = "DOLLARQ18" then do;';
17134  put 'ROLE = "REJECTED";';
17135  put 'end;';
17136  put 'else ';
17137  put 'if upcase(NAME) = "DOLLARQ19" then do;';
17138  put 'ROLE = "REJECTED";';
17139  put 'end;';
17140  put 'else ';
17141  put 'if upcase(NAME) = "DOLLARQ20" then do;';
17142  put 'ROLE = "REJECTED";';
17143  put 'end;';
17144  put 'else ';
17145  put 'if upcase(NAME) = "DOLLARQ21" then do;';
17146  put 'ROLE = "REJECTED";';
17147  put 'end;';
17148  put 'else ';
17149  put 'if upcase(NAME) = "DOLLARQ22" then do;';
17150  put 'ROLE = "REJECTED";';
17151  put 'end;';
17152  put 'else ';
17153  put 'if upcase(NAME) = "DOLNETDA" then do;';
17154  put 'ROLE = "REJECTED";';
17155  put 'end;';
17156  put 'else ';
17157  put 'if upcase(NAME) = "DOLNETDT" then do;';
17158  put 'ROLE = "REJECTED";';
17159  put 'end;';
17160  put 'else ';
17161  put 'if upcase(NAME) = "FREQPRCH" then do;';
17162  put 'ROLE = "REJECTED";';
17163  put 'end;';
17164  put 'else ';
17165  put 'if upcase(NAME) = "METHPAYM" then do;';
17166  put 'ROLE = "REJECTED";';
17167  put 'end;';
17168  put 'else ';
17169  put 'if upcase(NAME) = "MONLAST" then do;';
17170  put 'ROLE = "REJECTED";';
17171  put 'end;';
17172  put 'else ';
17173  put 'if upcase(NAME) = "PCPAYM" then do;';
17174  put 'ROLE = "REJECTED";';
17175  put 'end;';
17176  put 'else ';
17177  put 'if upcase(NAME) = "Q_RESPOND0" then do;';
17178  put 'ROLE = "ASSESS";';
17179  put 'end;';
17180  put 'else ';
17181  put 'if upcase(NAME) = "Q_RESPOND1" then do;';
17182  put 'ROLE = "ASSESS";';
17183  put 'end;';
17184  put 'else ';
17185  put 'if upcase(NAME) = "TOTORDQ01" then do;';
17186  put 'ROLE = "REJECTED";';
17187  put 'end;';
17188  put 'else ';
17189  put 'if upcase(NAME) = "TOTORDQ02" then do;';
17190  put 'ROLE = "REJECTED";';
17191  put 'end;';
17192  put 'else ';
17193  put 'if upcase(NAME) = "TOTORDQ03" then do;';
17194  put 'ROLE = "REJECTED";';
17195  put 'end;';
17196  put 'else ';
17197  put 'if upcase(NAME) = "TOTORDQ04" then do;';
17198  put 'ROLE = "REJECTED";';
17199  put 'end;';
17200  put 'else ';
17201  put 'if upcase(NAME) = "TOTORDQ05" then do;';
17202  put 'ROLE = "REJECTED";';
17203  put 'end;';
17204  put 'else ';
17205  put 'if upcase(NAME) = "TOTORDQ06" then do;';
17206  put 'ROLE = "REJECTED";';
17207  put 'end;';
17208  put 'else ';
17209  put 'if upcase(NAME) = "TOTORDQ07" then do;';
17210  put 'ROLE = "REJECTED";';
17211  put 'end;';
17212  put 'else ';
17213  put 'if upcase(NAME) = "TOTORDQ08" then do;';
17214  put 'ROLE = "REJECTED";';
17215  put 'end;';
17216  put 'else ';
17217  put 'if upcase(NAME) = "TOTORDQ09" then do;';
17218  put 'ROLE = "REJECTED";';
17219  put 'end;';
17220  put 'else ';
17221  put 'if upcase(NAME) = "TOTORDQ10" then do;';
17222  put 'ROLE = "REJECTED";';
17223  put 'end;';
17224  put 'else ';
17225  put 'if upcase(NAME) = "TOTORDQ11" then do;';
17226  put 'ROLE = "REJECTED";';
17227  put 'end;';
17228  put 'else ';
17229  put 'if upcase(NAME) = "TOTORDQ12" then do;';
17230  put 'ROLE = "REJECTED";';
17231  put 'end;';
17232  put 'else ';
17233  put 'if upcase(NAME) = "TOTORDQ13" then do;';
17234  put 'ROLE = "REJECTED";';
17235  put 'end;';
17236  put 'else ';
17237  put 'if upcase(NAME) = "TOTORDQ14" then do;';
17238  put 'ROLE = "REJECTED";';
17239  put 'end;';
17240  put 'else ';
17241  put 'if upcase(NAME) = "TOTORDQ15" then do;';
17242  put 'ROLE = "REJECTED";';
17243  put 'end;';
17244  put 'else ';
17245  put 'if upcase(NAME) = "TOTORDQ16" then do;';
17246  put 'ROLE = "REJECTED";';
17247  put 'end;';
17248  put 'else ';
17249  put 'if upcase(NAME) = "TOTORDQ17" then do;';
17250  put 'ROLE = "REJECTED";';
17251  put 'end;';
17252  put 'else ';
17253  put 'if upcase(NAME) = "TOTORDQ18" then do;';
17254  put 'ROLE = "REJECTED";';
17255  put 'end;';
17256  put 'else ';
17257  put 'if upcase(NAME) = "TOTORDQ19" then do;';
17258  put 'ROLE = "REJECTED";';
17259  put 'end;';
17260  put 'else ';
17261  put 'if upcase(NAME) = "TOTORDQ20" then do;';
17262  put 'ROLE = "REJECTED";';
17263  put 'end;';
17264  put 'else ';
17265  put 'if upcase(NAME) = "TOTORDQ21" then do;';
17266  put 'ROLE = "REJECTED";';
17267  put 'end;';
17268  put 'else ';
17269  put 'if upcase(NAME) = "TOTORDQ22" then do;';
17270  put 'ROLE = "REJECTED";';
17271  put 'end;';
17272  put 'else ';
17273  put 'if upcase(NAME) = "UNITSIDD" then do;';
17274  put 'ROLE = "REJECTED";';
17275  put 'end;';
17276  put 'else ';
17277  put 'if upcase(NAME) = "UNITSLAP" then do;';
17278  put 'ROLE = "REJECTED";';
17279  put 'end;';
17280  put 'else ';
17281  put 'if upcase(NAME) = "UNTLANPO" then do;';
17282  put 'ROLE = "REJECTED";';
17283  put 'end;';
17284  put 'else ';
17285  put 'if upcase(NAME) = "_NODE_" then do;';
17286  put 'ROLE = "SEGMENT";';
17287  put 'LEVEL = "NOMINAL";';
17288  put 'end;';
17289  run;
 
NOTE: The file X is:
      Filename=H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=19Apr2017:01:35:57,
      Create Time=19Apr2017:01:35:35
 
NOTE: 360 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17290  filename x;
NOTE: Fileref X has been deassigned.
 
17291  filename emflow "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
17292  *------------------------------------------------------------*;
17293  * Tree: Scoring DATA data;
17294  *------------------------------------------------------------*;
17295  data EMWS2.Tree_TRAIN
17296  / view=EMWS2.Tree_TRAIN
17297  ;
17298  set EMWS2.Part_TRAIN
17299  ;
17300  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas.
17301 +****************************************************************;
17302 +******             DECISION TREE SCORING CODE             ******;
17303 +****************************************************************;
17304 +
17305 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17306 +LENGTH F_RESPOND  $   12;
17307 +LENGTH I_RESPOND  $   12;
17308 +LENGTH _WARN_  $    4;
17309 +
17310 +******              LABELS FOR NEW VARIABLES              ******;
17311 +label _NODE_ = 'Node' ;
17312 +label _LEAF_ = 'Leaf' ;
17313 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17314 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17315 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17316 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17317 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17318 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17319 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17320 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17321 +label F_RESPOND = 'From: RESPOND' ;
17322 +label I_RESPOND = 'Into: RESPOND' ;
17323 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17324 +label _WARN_ = 'Warnings' ;
17325 +
17326 +
17327 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17328 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17329 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17330 +
17331 +
17332 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17333 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17334 +
17335 +******             ASSIGN OBSERVATION TO NODE             ******;
17336 +IF  NOT MISSING(DOLL24 ) AND
17337 +                 121.2 <= DOLL24  THEN DO;
17338 +  _NODE_  =                    3;
17339 +  _LEAF_  =                    4;
17340 +  P_RESPOND1  =     0.13338973491257;
17341 +  P_RESPOND0  =     0.86661026508742;
17342 +  Q_RESPOND1  =     0.13338973491257;
17343 +  Q_RESPOND0  =     0.86661026508742;
17344 +  V_RESPOND1  =     0.12445414847161;
17345 +  V_RESPOND0  =     0.87554585152838;
17346 +  I_RESPOND  = '0' ;
17347 +  U_RESPOND  =                    0;
17348 +  END;
17349 +ELSE DO;
17350 +  IF  NOT MISSING(TENURE ) AND
17351 +    TENURE  <                  1.5 THEN DO;
17352 +    IF  NOT MISSING(DAYLAST ) AND
17353 +                      46.5 <= DAYLAST  THEN DO;
17354 +      _NODE_  =                    9;
17355 +      _LEAF_  =                    2;
17356 +      P_RESPOND1  =     0.11111111111111;
17357 +      P_RESPOND0  =     0.88888888888888;
17358 +      Q_RESPOND1  =     0.11111111111111;
17359 +      Q_RESPOND0  =     0.88888888888888;
17360 +      V_RESPOND1  =                    0;
17361 +      V_RESPOND0  =                    1;
17362 +      I_RESPOND  = '0' ;
17363 +      U_RESPOND  =                    0;
17364 +      END;
17365 +    ELSE DO;
17366 +      _NODE_  =                    8;
17367 +      _LEAF_  =                    1;
17368 +      P_RESPOND1  =     0.95454545454545;
17369 +      P_RESPOND0  =     0.04545454545454;
17370 +      Q_RESPOND1  =     0.95454545454545;
17371 +      Q_RESPOND0  =     0.04545454545454;
17372 +      V_RESPOND1  =                    1;
17373 +      V_RESPOND0  =                    0;
17374 +      I_RESPOND  = '1' ;
17375 +      U_RESPOND  =                    1;
17376 +      END;
17377 +    END;
17378 +  ELSE DO;
17379 +    _NODE_  =                    5;
17380 +    _LEAF_  =                    3;
17381 +    P_RESPOND1  =     0.04640937957987;
17382 +    P_RESPOND0  =     0.95359062042012;
17383 +    Q_RESPOND1  =     0.04640937957987;
17384 +    Q_RESPOND0  =     0.95359062042012;
17385 +    V_RESPOND1  =     0.04756567425569;
17386 +    V_RESPOND0  =      0.9524343257443;
17387 +    I_RESPOND  = '0' ;
17388 +    U_RESPOND  =                    0;
17389 +    END;
17390 +  END;
17391 +
17392 +*****  RESIDUALS R_ *************;
17393 +IF  F_RESPOND  NE '1'
17394 +AND F_RESPOND  NE '0'  THEN DO;
17395 +        R_RESPOND1  = .;
17396 +        R_RESPOND0  = .;
17397 + END;
17398 + ELSE DO;
17399 +       R_RESPOND1  =  -P_RESPOND1 ;
17400 +       R_RESPOND0  =  -P_RESPOND0 ;
17401 +       SELECT( F_RESPOND  );
17402 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17403 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17404 +       END;
17405 + END;
17406 +
17407 +****************************************************************;
17408 +******          END OF DECISION TREE SCORING CODE         ******;
17409 +****************************************************************;
17410 +
17411 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17412  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17413  quit;
17414  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17415  filename emflow "H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
17416  *------------------------------------------------------------*;
17417  * Tree: Scoring VALIDATE data;
17418  *------------------------------------------------------------*;
17419  data EMWS2.Tree_VALIDATE
17420  / view=EMWS2.Tree_VALIDATE
17421  ;
17422  set EMWS2.Part_VALIDATE
17423  ;
17424  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\Bia_Priya\Project_PredictiveAnalysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas.
17425 +****************************************************************;
17426 +******             DECISION TREE SCORING CODE             ******;
17427 +****************************************************************;
17428 +
17429 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17430 +LENGTH F_RESPOND  $   12;
17431 +LENGTH I_RESPOND  $   12;
17432 +LENGTH _WARN_  $    4;
17433 +
17434 +******              LABELS FOR NEW VARIABLES              ******;
17435 +label _NODE_ = 'Node' ;
17436 +label _LEAF_ = 'Leaf' ;
17437 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17438 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17439 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17440 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17441 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17442 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17443 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17444 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17445 +label F_RESPOND = 'From: RESPOND' ;
17446 +label I_RESPOND = 'Into: RESPOND' ;
17447 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17448 +label _WARN_ = 'Warnings' ;
17449 +
17450 +
17451 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17452 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17453 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17454 +
17455 +
17456 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17457 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17458 +
17459 +******             ASSIGN OBSERVATION TO NODE             ******;
17460 +IF  NOT MISSING(DOLL24 ) AND
17461 +                 121.2 <= DOLL24  THEN DO;
17462 +  _NODE_  =                    3;
17463 +  _LEAF_  =                    4;
17464 +  P_RESPOND1  =     0.13338973491257;
17465 +  P_RESPOND0  =     0.86661026508742;
17466 +  Q_RESPOND1  =     0.13338973491257;
17467 +  Q_RESPOND0  =     0.86661026508742;
17468 +  V_RESPOND1  =     0.12445414847161;
17469 +  V_RESPOND0  =     0.87554585152838;
17470 +  I_RESPOND  = '0' ;
17471 +  U_RESPOND  =                    0;
17472 +  END;
17473 +ELSE DO;
17474 +  IF  NOT MISSING(TENURE ) AND
17475 +    TENURE  <                  1.5 THEN DO;
17476 +    IF  NOT MISSING(DAYLAST ) AND
17477 +                      46.5 <= DAYLAST  THEN DO;
17478 +      _NODE_  =                    9;
17479 +      _LEAF_  =                    2;
17480 +      P_RESPOND1  =     0.11111111111111;
17481 +      P_RESPOND0  =     0.88888888888888;
17482 +      Q_RESPOND1  =     0.11111111111111;
17483 +      Q_RESPOND0  =     0.88888888888888;
17484 +      V_RESPOND1  =                    0;
17485 +      V_RESPOND0  =                    1;
17486 +      I_RESPOND  = '0' ;
17487 +      U_RESPOND  =                    0;
17488 +      END;
17489 +    ELSE DO;
17490 +      _NODE_  =                    8;
17491 +      _LEAF_  =                    1;
17492 +      P_RESPOND1  =     0.95454545454545;
17493 +      P_RESPOND0  =     0.04545454545454;
17494 +      Q_RESPOND1  =     0.95454545454545;
17495 +      Q_RESPOND0  =     0.04545454545454;
17496 +      V_RESPOND1  =                    1;
17497 +      V_RESPOND0  =                    0;
17498 +      I_RESPOND  = '1' ;
17499 +      U_RESPOND  =                    1;
17500 +      END;
17501 +    END;
17502 +  ELSE DO;
17503 +    _NODE_  =                    5;
17504 +    _LEAF_  =                    3;
17505 +    P_RESPOND1  =     0.04640937957987;
17506 +    P_RESPOND0  =     0.95359062042012;
17507 +    Q_RESPOND1  =     0.04640937957987;
17508 +    Q_RESPOND0  =     0.95359062042012;
17509 +    V_RESPOND1  =     0.04756567425569;
17510 +    V_RESPOND0  =      0.9524343257443;
17511 +    I_RESPOND  = '0' ;
17512 +    U_RESPOND  =                    0;
17513 +    END;
17514 +  END;
17515 +
17516 +*****  RESIDUALS R_ *************;
17517 +IF  F_RESPOND  NE '1'
17518 +AND F_RESPOND  NE '0'  THEN DO;
17519 +        R_RESPOND1  = .;
17520 +        R_RESPOND0  = .;
17521 + END;
17522 + ELSE DO;
17523 +       R_RESPOND1  =  -P_RESPOND1 ;
17524 +       R_RESPOND0  =  -P_RESPOND0 ;
17525 +       SELECT( F_RESPOND  );
17526 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17527 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17528 +       END;
17529 + END;
17530 +
17531 +****************************************************************;
17532 +******          END OF DECISION TREE SCORING CODE         ******;
17533 +****************************************************************;
17534 +
17535 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17536  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17537  quit;
17538  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17540  proc sort data=WORK.EM_USER_REPORT;
17541  by ID VIEW;
17542  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17543  *------------------------------------------------------------*;
17544  * Tree: Computing metadata for TRAIN data;
17545  *------------------------------------------------------------*;
 
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18250  data EMWS2.Tree_EMINFO;
18251  length TARGET KEY $32 DATA $43;
18252  input TARGET KEY DATA $;
18253  cards;
 
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18257  run;
18258  proc sort data = EMWS2.Tree_EMINFO NOTHREADS;
18259  by TARGET KEY;
18260  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18261  proc sort data = EMWS2.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18262  by TARGET KEY;
18263  run;
 
NOTE: There were 4 observations read from the data set EMWS2.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18264  proc sort data = EMWS2.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18265  by TARGET KEY;
18266  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18267  data EMWS2.Tree_EMINFO;
18268  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18269  by TARGET KEY;
18270  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS2.TREE_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18271  proc datasets lib=work nolist;
18272  delete TEMP_INFO SORTEDEMINFO;
18273  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18274  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS2.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 19, 2017
Time:                01:35:58
*------------------------------------------------------------*
18298  data EMWS2.Tree_EMOUTFIT;
18299  set EMWS2.Tree_EMOUTFIT;
18300  length TargetLabel $200;
18301  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18302  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18303  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_EMOUTFIT.
NOTE: The data set EMWS2.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
18304  proc sort data=EMWS2.Tree_EMREPORTFIT nothreads;
18305  by TARGET;
18306  run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE_EMREPORTFIT.
NOTE: The data set EMWS2.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18307  %let _EMwarndup = 0;
18308  %let _EMtargetdup =;
18309  %let _EMASEtargetdup =;
18310  data _null_;
18311  set EMWS2.Tree_EMOUTFIT;
18312  if .<_ASE_<0.000001 then do;
18313  call symput('_EMwarndup', '1');
18314  call symput('_EMtargetdup', target);
18315  call symput('_EMASEtargetdup', put(_ASE_, best.));
18316  end;
18317  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18318  %let EMEXCEPTIONSTRING=;
18319  *------------------------------------------------------------*;
18320  * REPORT: Tree;
18321  *------------------------------------------------------------*;
18322  %let EM_ACTION = REPORT;
18323  %let syscc = 0;
18324  %macro main;
18325
18326    %if %upcase(&EM_ACTION) = CREATE %then %do;
18327      filename temp catalog 'sashelp.emmodl.tree_create.source';
18328      %include temp;
18329      filename temp;
18330
18331      %em_tree_create;
18332    %end;
18333
18334     %else
18335     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18336
18337         filename temp catalog 'sashelp.emmodl.tree_train.source';
18338         %include temp;
18339         filename temp;
18340         %em_tree_train;
18341     %end;
18342
18343    %else
18344    %if %upcase(&EM_ACTION) = SCORE %then %do;
18345      filename temp catalog 'sashelp.emmodl.tree_score.source';
18346      %include temp;
18347      filename temp;
18348
18349      %em_tree_score;
18350
18351    %end;
18352
18353    %else
18354    %if %upcase(&EM_ACTION) = REPORT %then %do;
18355
18356         filename temp catalog 'sashelp.emmodl.tree_report.source';
18357         %include temp;
18358         filename temp;
18359
18360         %em_tree_report;
18361     %end;
18362
18363    %else
18364    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18365
18366         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18367         %include temp;
18368         filename temp;
18369         %EM_TREE_OPENTREEVIEWER;
18370
18371     %end;
18372
18373    %else
18374    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18375
18376         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18377         %include temp;
18378         filename temp;
18379         %EM_TREE_CLOSETREEVIEWER;
18380
18381     %end;
18382
18383
18384     %doendm:
18385  %mend main;
18386
18387  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18389 +%macro em_tree_makePlotDs( multipleTar= );
18391 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18392 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18393 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18394 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18396 +  /* determine if validation statistics will be displayed */
18397 +  %let validflag=N;
18398 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18399 +    /* determine if validation data exists */
18400 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18401 +      %let validflag=Y;
18402 +    %end;
18403 +  %end;
18405 +   /* retrieve name of decmeta even in presence of multiple targets */
18406 +   %let decmeta = ;
18407 +   %if &EM_DEC_DECMETA eq %then %do;
18408 +     data _Target;
18409 +       set &em_data_variableset;
18410 +       where ROLE='TARGET' and USE in('D', 'Y');
18411 +       keep NAME;
18412 +     run;
18413 +     proc sort data=_Target;
18414 +       by NAME;
18415 +     run;
18416 +     proc sort data=EM_TARGETDECINFO;
18417 +       by TARGET;
18418 +     run;
18419 +     data _Target;
18420 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18421 +       by NAME;
18422 +       if _a then do;
18423 +         call symput('decmeta', trim(DECMETA));
18424 +       end;
18425 +     run;
18426 +     proc delete data=_Target;run;
18427 +   %end;
18428 +   %else %let decmeta = &EM_DEC_DECMETA;
18431 +  /* retrieve targetEvent from decmeta */
18432 +  %let targetEvent=;
18433 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18434 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18435 +      data _null_;
18436 +       set &DECMETA(where=(_TYPE_="TARGET"));
18437 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18438 +      run;
18439 +    %end;
18440 +  %end;
18442 +  /* retrieve predicted var for targetEvent from decmeta */
18443 +  %let predTarget=;
18444 +  %let predLvl=;
18445 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18446 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18447 +      data _null_;
18448 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18449 +       call symput('predTarget', strip(VARIABLE));
18450 +       call symput('predLvl', strip(LEVEL));
18451 +      run;
18452 +    %end;
18453 +  %end;
18454 +  %else %do;
18455 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18456 +      data _null_;
18457 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18458 +       call symput('predTarget', strip(VARIABLE));
18459 +      run;
18460 +    %end;
18461 +  %end;
18463 +  /* create BelowText value */
18464 +  data belowtext;
18465 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18466 +    keep node belowtext;
18467 +  run;
18469 +  /* relace belowtext with variable label if it exists */
18470 +  data belowtext2;
18471 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18472 +    keep node belowtextlbl;
18473 +  run;
18475 +  proc sort data=belowtext; by node; run;
18476 +  proc sort data=belowtext2; by node; run;
18478 +  data belowtext;
18479 +    merge belowtext belowtext2(in=_a);
18480 +    by node;
18481 +    if _a then belowtext=belowtextlbl;
18482 +    keep node belowtext;
18483 +  run;
18485 +  /* create AboveText value */
18486 +  data abovetext;
18487 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18488 +  run;
18489 +  proc sort data=abovetext; by node numeric_value; run;
18491 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18492 +  data abovetext;
18493 +    set abovetext(rename=(node=parent));
18494 +    by parent numeric_value;
18495 +    retain abovetext tempstring flag branch origval origchar ;
18496 +    length abovetext $256;
18497 +    length tempstring origchar $64;
18499 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18500 +      if first.parent then do;
18501 +        if missing(character_value) then do;
18502 +          numeric_value = round(numeric_value, &sp_precision);
18503 +          abovetext = "< "||strip(NUMERIC_VALUE);
18504 +          branch = 1;
18505 +          origval = numeric_value;
18506 +          output;
18507 +        end;
18508 +        else do;
18509 +          abovetext = "< "||strip(CHARACTER_VALUE);
18510 +          branch = 1;
18511 +          origchar = character_value;
18512 +          output;
18513 +        end;
18515 +        if first.parent AND last.parent then do;
18516 +          if missing(character_value) then do;
18517 +            numeric_value = round(numeric_value, &sp_precision);
18518 +            branch = branch + 1;
18519 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18520 +            output;
18521 +          end;
18522 +          else do;
18523 +            branch = branch + 1;
18524 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18525 +            output;
18526 +          end;
18527 +        end;
18528 +      end;
18529 +      else if last.parent then do;
18530 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18531 +          if missing(character_value) then do;
18532 +            numeric_value = round(numeric_value, &sp_precision);
18533 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18534 +          end;
18535 +          else do;
18536 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18537 +          end;
18538 +          branch = branch + 1;
18539 +          output;
18541 +          if missing(character_value) then do;
18542 +            numeric_value = round(numeric_value, &sp_precision);
18543 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18544 +          end;
18545 +          else do;
18546 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18547 +          end;
18548 +          branch = branch + 1;
18549 +          output;
18550 +        end;
18551 +        else do;
18552 +          if missing(character_value) then do;
18553 +            numeric_value = round(numeric_value, &sp_precision);
18554 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18555 +          end;
18556 +          else do;
18557 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18558 +          end;
18559 +          branch = branch + 1;
18560 +          output;
18561 +        end;
18562 +      end;
18563 +      else do;
18564 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18565 +          if missing(character_value) then do;
18566 +            numeric_value = round(numeric_value,&sp_precision);
18567 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18568 +            origval = numeric_value;
18569 +          end;
18570 +          else do;
18571 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18572 +            origchar = character_value;
18573 +          end;
18574 +          branch = branch + 1;
18575 +          output;
18577 +        end;
18578 +        else do;
18579 +          if missing(character_value) then do;
18580 +            numeric_value = round(numeric_value, &sp_precision);
18581 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18582 +            origval = numeric_value;
18583 +          end;
18584 +          else do;
18585 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18586 +            origval = character_value;
18587 +          end;
18588 +          branch = branch + 1;
18589 +          output;
18590 +        end;
18591 +      end;
18592 +    end;
18593 +    else do;
18594 +       if first.numeric_value then do;
18595 +         flag = 0;
18596 +         abovetext = strip(CHARACTER_VALUE);
18597 +         branch = numeric_value;
18598 +         if first.numeric_value AND last.numeric_value then do;
18599 +           output;
18600 +         end;
18601 +       end;
18602 +       else if last.numeric_value then do;
18603 +         if flag=0 then do;
18604 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18605 +           length = length(strip(tempstring));
18606 +           if length < 32 then do;
18607 +             abovetext = strip(tempstring);
18608 +           end;
18609 +           else do;
18610 +             abovetext = strip(abovetext)||", ...";
18611 +             flag = 1;
18612 +           end;
18613 +         end;
18614 +         branch = numeric_value;
18615 +         output;
18616 +       end;
18617 +       else do;
18618 +         if flag=0 then do;
18619 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18620 +           length = length(strip(tempstring));
18621 +           if length < 32 then do;
18622 +             abovetext = strip(tempstring);
18623 +           end;
18624 +           else do;
18625 +             abovetext = strip(abovetext)||", ...";
18626 +             flag=1;
18627 +           end;
18628 +         end;
18629 +         branch = numeric_value;
18630 +       end;
18631 +    end;
18632 +    keep parent branch abovetext;
18633 +  run;
18635 +  /* MIssing value to abovetext */
18636 +  data tempmissing;
18637 +    set &EM_USER_OUTRULES;
18638 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18639 +    rename node=parent numeric_value=branch character_value=misschar;
18640 +  run;
18643 +  proc sort data=abovetext; by parent branch; run;
18644 +  proc sort data=tempmissing; by parent branch; run;
18645 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18647 +  data tempoutnodes;
18648 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18649 +    by parent branch;
18650 +    length traintotal validtotal 8;
18651 +    retain traintotal validtotal;
18653 +    if _a then do;
18654 +      if ^MISSING(abovetext) then do;
18655 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18656 +      end;
18657 +      else do;
18658 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18659 +      end;
18660 +    end;
18661 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18663 +    if node=1 then do;
18664 +      traintotal = N;
18665 +      validtotal=VN;
18666 +    end;
18668 +    drop role rank stat misschar belowtext;
18669 +  run;
18670 +  proc sort data=tempoutnodes; by node; run;
18671 +  proc sort data=belowtext; by node; run;
18673 +  data tempoutnodes;
18674 +    merge tempoutnodes belowtext;
18675 +    by node;
18677 +  run;
18679 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18680 +  %let adjusted = N;
18681 +  %let npriors = 0;
18682 +  data _null_ ;
18683 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18684 +    if eof then do ;
18685 +      call symput("npriors" , strip(put(_N_,best.))) ;
18686 +    end;
18687 +  run;
18688 +  %if &npriors gt 0 %then %let adjusted=Y;
18691 +  /* create a table with targetUsed and targetLevel columns for each node */
18692 +  data temptarmeta;
18693 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18694 +    %if &multipleTar eq N %then %do;
18695 +      AND USE in ('D', 'Y')
18696 +    %end;
18697 +    ));
18698 +    length TARGET $32;
18699 +    Target=name;
18700 +    keep target level;
18701 +  run;
18703 +  %if &multipleTar eq Y %then %do;
18704 +    data temptargetused;
18705 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18706 +      keep node target;
18707 +    run;
18708 +    proc sort data=temptargetused; by target; run;
18709 +    proc sort data=temptarmeta; by target; run;
18710 +    data temptargetused;
18711 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18712 +      by target;
18713 +      if _a and _b;
18714 +    run;
18715 +  %end;
18716 +  %else %do;
18717 +    data temptargetused;
18718 +      set &EM_USER_OUTSTATS;
18719 +      length target $32 tarlevel $10;
18720 +      target="%EM_TARGET";
18721 +      tarlevel="%EM_TARGET_LEVEL";
18722 +      keep node target tarlevel;
18723 +    run;
18724 +    proc sort data=temptargetused nodupkey; by node; run;
18725 +  %end;
18727 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18728 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18729 +  proc sort data=temptargetused; by node; run;
18732 +  /* create tables for all interval targets as well as all class targets */
18733 +  data tempinterval tempclass;
18734 +    merge tempoutstats temptargetused( rename=(target=targetused));
18735 +    by node;
18736 +    %if "&multipleTar" eq "Y" %then %do;
18737 +      if ((missing(Target)) OR (target=targetused ));
18738 +    %end;
18740 +    if tarlevel="INTERVAL" then output tempinterval;
18741 +    else output tempclass;
18742 +  run;
18744 +  /* iniitalize intTarget and classTarget flags */
18745 +  %let em_intNobs =0;
18746 +  %let em_classNobs = 0;
18747 +  %let em_intTarget= N;
18748 +  %let em_classTarget= N;
18750 +  proc sql;
18751 +    reset noprint;
18752 +    select count(*) into :em_intNobs from tempinterval;
18753 +  quit;
18754 +  proc sql;
18755 +    reset noprint;
18756 +    select count(*) into :em_classNobs from tempclass;
18757 +  quit;
18759 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18760 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18762 +  /* retrieve all information for interval targets */
18763 +  %if &em_intTarget eq Y %then %do;
18765 +    /* determine if leaf variable exists */
18766 +    %let dsid=%sysfunc(open(tempinterval,i));
18767 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18768 +    %let rc=%sysfunc(close(&dsid));
18770 +    proc transpose data=tempinterval
18771 +      %if &leafexists %then %do;
18772 +        (drop=leaf)
18773 +      %end;
18774 +      %if &validexist %then %do;
18775 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18776 +      %end;
18777 +      %else %do;
18778 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18779 +      %end;
18780 +      by node;
18781 +      id statname;
18782 +    run;
18783 +    data tempinterval;
18784 +      set tempinterval;
18785 +      if missing(N) then delete;
18786 +    run;
18787 +  %end;
18789 +  /* retrieve all information for class targets */
18790 +  %if &em_classTarget eq Y %then %do;
18791 +    proc sort data=tempclass; by node category; run;
18792 +    %if &validflag eq N %then %do;
18793 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18794 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18795 +    %end;
18796 +    %else %do;
18797 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18798 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18799 +    %end;
18800 +      set tempclass;
18802 +      %if &validflag eq N %then %do;
18803 +        %if "&adjusted" eq "N" %then %do;
18804 +          if statname="N" then output tempn;
18805 +        %end;
18806 +        %else %do;
18807 +          if statname="NPRIORS" then output tempn;
18808 +        %end;
18809 +        else if statname="PREDICTION" then output temppredict;
18810 +        else if statname="PROBABILITY" then output tempprob;
18811 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18812 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18813 +      %end;
18814 +      %else %do;
18815 +        %if "&adjusted" eq "N" %then %do;
18816 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18817 +        %end;
18818 +        %else %do;
18819 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18820 +        %end;
18821 +        else if statname="PREDICTION" then output temppredict;
18822 +        else if statname="PROBABILITY" then output tempprob;
18823 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18824 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18825 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18826 +      %end;
18827 +    run;
18830 +    /* determine if profit/loss exists in tempprofit */
18831 +    %let em_profitflag=0;
18832 +    %let em_lossflag=0;
18833 +    proc sql;
18834 +      reset noprint;
18835 +      select count(*) into :em_profitflag from tempprofit;
18836 +    quit;
18837 +    proc sql;
18838 +      reset noprint;
18839 +      select count(*) into :em_lossflag from temploss;
18840 +    quit;
18842 +    %if &validFlag eq Y %then %do;
18843 +      proc transpose data=tempn
18844 +        %if "&adjusted" eq "N" %then %do;
18845 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18846 +        %end;
18847 +        %else %do;
18848 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18849 +        %end;
18850 +        by node;
18851 +        id statname;
18852 +      run;
18853 +      %if &em_profitflag ne 0 %then %do;
18854 +        proc transpose data=tempprofit out=tempprofit;
18855 +          by node category;
18856 +          id statname ;
18857 +        run;
18858 +      %end;
18859 +      %if &em_lossflag ne 0 %then %do;
18860 +        proc transpose data=temploss out=temploss;
18861 +          by node category;
18862 +          id statname ;
18863 +        run;
18864 +      %end;
18865 +      data tempprob;
18866 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18867 +        by node
18868 +        %if &multipleTar eq Y %then %do;
18869 +          target
18870 +        %end;
18871 +        category;
18872 +      run;
18873 +    %end;
18875 +    /* store percentcorrect value */
18876 +    data temppredict;
18877 +      merge tempprob temppredict(in=_a);
18878 +      by node category;
18879 +      if _a then do;
18880 +        percentCorrect = statvalue;
18881 +        %if &validFlag eq Y %then %do;
18882 +          vpercentCorrect= vstatvalue;
18883 +        %end;
18884 +      end;
18885 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18886 +      %if &validFlag eq Y %then %do;
18887 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18888 +      %end;
18889 +      ;
18890 +      if missing(percentCorrect) then delete;
18891 +      drop target;
18892 +    run;
18894 +    /* build profittext */
18895 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18896 +      data tempprofittext(keep= node profittext profitloss);
18897 +        length profittext $800 profitloss 8.;
18898 +        retain profittext profitloss;
18900 +        merge tempprob
18901 +        %if &em_profitflag ne 0 %then %do;
18902 +          tempprofit
18903 +        %end;
18904 +        %else %if &em_lossflag ne 0 %then %do;
18905 +          temploss
18906 +        %end;
18907 +        ;
18908 +        by node category;
18910 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18911 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18912 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18913 +          %let profittype = ALL;
18914 +        %end;
18916 +        /* create the profitloss variable for nodecolor if selected */
18917 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18919 +        %if "&profittype" eq "ALL" %then %do;
18920 +          if strip(CATEGORY)="&targetEvent" then do;
18921 +            profitloss=statvalue;
18922 +          end;
18923 +          if first.node then do;
18924 +            %if &validFlag eq N %then %do;
18925 +             %if &em_profitflag ne 0 %then %do;
18926 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18927 +             %end;
18928 +             %if &em_lossflag ne 0 %then %do;
18929 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18930 +             %end;
18931 +            %end;
18932 +            %else %do;
18933 +             %if &em_profitflag ne 0 %then %do;
18934 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18934!+;
18935 +             %end;
18936 +             %if &em_lossflag ne 0 %then %do;
18937 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18938 +             %end;
18939 +            %end;
18940 +          end;
18941 +          else if last.node then do;
18942 +            %if &validFlag eq N %then %do;
18943 +             %if &em_profitflag ne 0 %then %do;
18944 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18945 +             %end;
18946 +             %if &em_lossflag ne 0 %then %do;
18947 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18948 +             %end;
18949 +             /*if CATEGORY="&targetEvent" then do;
18950 +               profitloss=statvalue;
18951 +             end;*/
18952 +            %end;
18953 +            %else %do;
18954 +             %if &em_profitflag ne 0 %then %do;
18955 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18955!+14.&EM_PROPERTY_SPLITPRECISION);
18956 +                if CATEGORY="&targetEvent" then do;
18957 +                 profitloss=ALTERNATIVE_PROFIT;
18958 +                end;
18959 +             %end;
18960 +             %if &em_lossflag ne 0 %then %do;
18961 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18961!+14.&EM_PROPERTY_SPLITPRECISION);
18962 +                if CATEGORY="&targetEvent" then do;
18963 +                  profitloss=ALTERNATIVE_LOSS;
18964 +                end;
18965 +             %end;
18966 +            %end;
18967 +            output;
18968 +          end;
18969 +          else do;
18970 +            %if &validFlag eq N %then %do;
18971 +             %if &em_profitflag ne 0 %then %do;
18972 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18973 +             %end;
18974 +             %if &em_lossflag ne 0 %then %do;
18975 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18976 +             %end;
18977 +            %end;
18978 +            %else %do;
18979 +             %if &em_profitflag ne 0 %then %do;
18980 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18980!+14.&EM_PROPERTY_SPLITPRECISION);
18981 +             %end;
18982 +             %if &em_lossflag ne 0 %then %do;
18983 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18983!+14.&EM_PROPERTY_SPLITPRECISION);
18984 +             %end;
18985 +            %end;
18986 +          end;
18987 +        %end;
18988 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18989 +          if strip(CATEGORY) = "&targetevent" then do;
18990 +            %if &validFlag eq N %then %do;
18991 +             %if &em_profitflag ne 0 %then %do;
18992 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18993 +             %end;
18994 +             %if &em_lossflag ne 0 %then %do;
18995 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18996 +             %end;
18997 +             profitloss=statvalue;
18998 +            %end;
18999 +            %else %do;
19000 +             %if &em_profitflag ne 0 %then %do;
19001 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19001!+;
19002 +                profitloss=ALTERNATIVE_PROFIT;
19003 +             %end;
19004 +             %if &em_lossflag ne 0 %then %do;
19005 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19006 +                profitloss=ALTERNATIVE_LOSS;
19007 +             %end;
19008 +            %end;
19009 +            output;
19010 +          end;
19011 +        %end;
19012 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19013 +          if strip(CATEGORY) = "&targetevent" then do;
19014 +            %if &validFlag eq N %then %do;
19015 +             profitloss=statvalue;
19016 +            %end;
19017 +            %else %do;
19018 +             %if &em_profitflag ne 0 %then %do;
19019 +                profitloss=ALTERNATIVE_PROFIT;
19020 +             %end;
19021 +             %if &em_lossflag ne 0 %then %do;
19022 +                profitloss=ALTERNATIVE_LOSS;
19023 +             %end;
19024 +            %end;
19025 +            output;
19026 +          end;
19027 +        %end;
19028 +      run;
19029 +    %end;
19031 +    data tempprob(keep= node probtext);
19032 +      length probtext $800;
19033 +      retain probtext;
19034 +      set tempprob ;
19035 +      by node;
19037 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19038 +      %let probtype = &EM_PROPERTY_TARGET;
19039 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19040 +        %let probtype = ALL;
19041 +      %end;
19043 +      %if "&probtype" eq "ALL" %then %do;
19044 +        if first.node then do;
19045 +          %if &validFlag eq N %then %do;
19046 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19047 +          %end;
19048 +          %else %do;
19049 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19050 +          %end;
19051 +        end;
19052 +        else if last.node then do;
19053 +          %if &validFlag eq N %then %do;
19054 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19055 +          %end;
19056 +          %else %do;
19057 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19058 +          %end;
19059 +          output;
19060 +        end;
19061 +        else do;
19062 +          %if &validFlag eq N %then %do;
19063 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19064 +          %end;
19065 +          %else %do;
19066 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19067 +          %end;
19068 +        end;
19069 +      %end;
19070 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19071 +        if strip(CATEGORY) = "&targetevent" then do;
19072 +          %if &validFlag eq N %then %do;
19073 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19074 +          %end;
19075 +          %else %do;
19076 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19077 +          %end;
19078 +          output;
19079 +        end;
19080 +      %end;
19081 +      %else %if "&probtype" eq "NONE" %then %do;
19082 +        if last.node then do;
19083 +          output;
19084 +        end;
19085 +      %end;
19086 +    run;
19087 +  %end;
19089 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19091 +  %let oldexists=0;
19092 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19093 +     data old_tree_plot;
19094 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19095 +        rename nodecolor=oldnodecolor;
19096 +     run;
19098 +     proc sort data=old_tree_plot;
19099 +        by node;
19100 +     run;
19102 +     %let oldexists=1;
19103 +  %end;
19105 +  data &EM_USER_TREE_PLOT;
19106 +    length textall $800;
19107 +    merge tempoutnodes temptargetused
19109 +    %if &em_intTarget eq Y %then %do;
19110 +      tempinterval
19111 +    %end;
19113 +    %if &em_classTarget eq Y %then %do;
19115 +      %if &validFlag eq N %then %do;
19116 +        tempn(rename=(statvalue=N))
19117 +      %end;
19118 +      %else %do;
19119 +        tempn
19120 +      %end;
19122 +      temppredict tempprob
19124 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19125 +        tempprofittext
19126 +      %end;
19127 +    %end;
19128 +    ;
19129 +    by node;
19131 +    /* build nodetext based on user selection */
19132 +    textall="";
19134 +    %if &em_intTarget eq Y %then %do;
19135 +    if tarlevel="INTERVAL" then do;
19136 +      /* Nodeid */
19137 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19138 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19139 +      %end;
19141 +      /* Target identifier if multiple targets are used */
19142 +      %if "&multipleTar" eq "Y" %then %do;
19143 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19144 +      %end;
19146 +      %if &validFlag eq Y %then %do;
19147 +         /* Column labels displayed in validflag eq Y only */
19148 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19149 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19149!+noquote ))";
19150 +         %end;
19152 +         /* Average values */
19153 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19154 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19155 +         %end;
19157 +         /* RASE */
19158 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19159 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19160 +         %end;
19162 +         /* Count */
19163 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19164 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19165 +         %end;
19166 +      %end;
19167 +      %else %do;
19168 +         /* Average values */
19169 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19170 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19171 +         %end;
19173 +         /* RASE */
19174 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19175 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19176 +         %end;
19178 +         /* Count */
19179 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19180 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19181 +         %end;
19182 +      %end;
19184 +      /* nodecolor */
19185 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19186 +        nodecolor=PREDICTION;
19187 +      %end;
19188 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19189 +        nodecolor=RASE;
19190 +      %end;
19191 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19192 +        nodecolor=1;
19193 +      %end;
19195 +    end;
19196 +    %end;
19197 +    %if &em_classTarget eq Y %then %do;
19198 +    if tarlevel^="INTERVAL" then  do;
19200 +      /* Nodeid */
19201 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19202 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19203 +      %end;
19204 +      /* Target identifier if multiple targets are used */
19205 +      %if "&multipleTar" eq "Y" %then %do;
19206 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19207 +      %end;
19209 +      /* Predicted values */
19210 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19211 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19212 +      %end;
19214 +      /* Column labels displayed in validflag eq Y only */
19215 +      %if "&ValidFlag" eq "Y" %then %do;
19216 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19217 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19217!+noquote ))";
19218 +        %end;
19219 +      %end;
19221 +      /* Target Values */
19222 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19223 +        textall=strip(textall)||"0A"x||strip(probtext);
19224 +      %end;
19226 +      /* include profit or loss for all target levels */
19227 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19228 +        textall=strip(textall)||"0A"x||strip(profittext);
19229 +      %end;
19231 +      %if &validFlag eq N %then %do;
19232 +        /* Percent Correct */
19233 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19234 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19235 +        %end;
19237 +         /* Count */
19238 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19239 +          %if "&adjusted" eq "N" %then %do;
19240 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19241 +          %end;
19242 +          %else %do;
19243 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19244 +          %end;
19245 +         %end;
19246 +      %end;
19247 +      %else %do;
19248 +        /* Percent Correct */
19249 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19250 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19251 +        %end;
19253 +         /* Count */
19254 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19255 +          %if "&adjusted" eq "N" %then %do;
19256 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19257 +          %end;
19258 +          %else %do;
19259 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19260 +          %end;
19261 +         %end;
19262 +      %end;
19264 +      /* nodecolor */
19265 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19266 +       %if &multipleTar ne Y %then %do;
19267 +        nodecolor=&predTarget;
19268 +       %end;
19269 +       %else %do;
19270 +         nodecolor=percentcorrect;
19271 +       %end;
19272 +      %end;
19273 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19274 +        nodecolor=percentcorrect;
19275 +      %end;
19276 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19277 +        nodecolor=1;
19278 +      %end;
19279 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19280 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19281 +          nodecolor=percentcorrect;
19282 +        %end;
19283 +        %else %do;
19284 +          nodecolor=profitloss;
19285 +        %end;
19286 +      %end;
19288 +    end;
19289 +    %end;
19290 +    %if &em_intTarget eq Y %then %do;
19291 +     drop  PREDICTION  TARGET TARLEVEL
19292 +     %if &ValidFlag eq Y %then %do;
19293 +         VPREDICTION
19294 +     %end;
19295 +     ;
19296 +    %end;
19297 +    %if &em_classTarget eq Y %then %do;
19298 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19299 +     %if &ValidFlag eq Y %then %do;
19300 +         VSTATVALUE
19301 +     %end;
19302 +     ;
19303 +    %end;
19305 +  run;
19307 +  /* add leaf index information to plotds - based on primary target only*/
19308 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19309 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19310 +      set &EM_USER_OUTSTATS;
19311 +      if ((statname="PROBABILITY"
19312 +      %if &validexist %then %do;
19313 +       or statname="VALID: PROBABILITY"
19314 +      %end;
19315 +      ) AND (CATEGORY="&TARGETEVENT")
19316 +      %if "&multipleTar" eq "Y" %then %do;
19317 +        AND (Target="%EM_TARGET")
19318 +      %end;
19319 +      );
19320 +    run;
19322 +    %if &validexist %then %do;
19323 +      proc sort data=tempprob; by node; run;
19324 +      %let vpredTarget = V%substr(&predTarget, 2);
19325 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19326 +         by node;
19327 +         id statname;
19328 +      run;
19329 +    %end;
19330 +  %end;
19331 +  %else %do;
19332 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19333 +      set &EM_USER_OUTSTATS;
19334 +      if ((statname="PREDICTION"
19335 +      %if &validexist %then %do;
19336 +       or statname="VALID: PREDICTION"
19337 +      %end;
19338 +      )
19339 +      %if "&multipleTar" eq "Y" %then %do;
19340 +        AND (Target="%EM_TARGET")
19341 +      %end;
19342 +      );
19343 +    run;
19344 +    %if &validexist %then %do;
19345 +      proc sort data=tempprob; by node; run;
19346 +      %let vpredTarget = V%substr(&predTarget, 2);
19347 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19348 +         by node;
19349 +         id statname;
19350 +      run;
19351 +    %end;
19352 +  %end;
19354 +  proc sort data=tempprob; by node; run;
19355 +  data tempoutnodes;
19356 +    merge tempoutnodes tempprob;
19357 +    by node;
19358 +  run;
19360 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19361 +  data tempnodes;
19362 +    retain traintotal validtotal;
19363 +    set tempnodes(where=(leaf ne . ));
19364 +    tprob=round(&predTarget, .01);
19365 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19366 +      percevent_train=round(tprob*100, .01);
19367 +    %end;
19368 +    %else %do;
19369 +      percevent_train=tprob;
19370 +    %end;
19372 +    perc_train=round((n/traintotal)*100, 0.01);
19373 +    /* leafwidth already has a *10 multiplier */
19374 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19376 +    %if &validexist %then %do;
19377 +      %let vpredTarget = V%substr(&predTarget,2);
19378 +      vprob=round(&vpredTarget, .01);
19379 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19380 +        percevent_valid=round(vprob*100, .01);
19381 +      %end;
19382 +      %else %do;
19383 +        percevent_valid=vprob;
19384 +      %end;
19385 +      perc_valid=round((vn/validtotal)*100, .01);
19386 +    %end;
19388 +    index=_N_;
19389 +    keep node index tprob perc_train percevent_train
19390 +    %if &validexist %then %do;
19391 +        vprob percevent_valid perc_valid
19392 +    %end;
19393 +    ;
19394 +  run;
19395 +  proc sort data=tempnodes; by node; run;
19396 +  data &EM_USER_TREE_PLOT;
19397 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19398 +    by node;
19399 +    if missing(node) then delete;
19400 +    %if &oldexists %then %do;
19401 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19402 +      drop oldnodecolor;
19403 +    %end;
19404 +    abovetext = compbl(abovetext);
19406 +    /* add variable labels */
19407 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19408 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19409 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19410 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19411 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19412 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19414 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19415 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19416 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19417 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19418 +          %end;
19419 +          %else %do;
19420 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19421 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19422 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19423 +          %end;
19424 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19426 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19427 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19428 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19429 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19430 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19431 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19432 +          %end;
19433 +          %else %do;
19434 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19435 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19436 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19437 +          %end;
19438 +    ;
19439 +  run;
19441 +  /* delete temporary tables */
19442 +  proc datasets lib=work nolist;
19443 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19444 +  run;
19446 +%mend em_tree_makePlotDs;
19450 +%macro em_tree_report;
19452 +   /* report properties */
19453 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19454 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19455 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19456 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19457 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19458 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19459 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19460 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19461 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19462 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19463 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19464 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19465 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19467 +   %let validexist=0;
19468 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19469 +     %let validexist=1;
19470 +   %end;
19472 +   /* determine if multiple targets will be processed */
19473 +   %let em_tree_multipleTargets=N;
19474 +   %let em_tree_numTarget=1;
19475 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19476 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19477 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19478 +         %let em_tree_multipleTargets=N;
19479 +      %end;
19480 +      %else %do;
19481 +        data _null_;
19482 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19483 +          if eof then
19484 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19485 +        run;
19487 +        %if &em_tree_numTarget gt 1 %then %do;
19488 +           %let em_tree_multipleTargets=Y;
19489 +        %end;
19490 +     %end;
19491 +   %end;
19493 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19495 +   /* variable importance */
19496 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19497 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19499 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19500 +     /* and the columns may not be generated                                                                                 */
19501 +     %let em_tree_cvexists=;
19502 +     %let em_tree_surrexists=.;
19503 +     data _null_;
19504 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19505 +       if eof then do ;
19506 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19507 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19508 +       end;
19509 +     run;
19511 +     data &EM_USER_OUTIMPORT;
19512 +         set &EM_USER_OUTIMPORT;
19513 +         /* format columns based on Precison value specified */
19514 +         format importance 15.&EM_PROPERTY_PRECISION
19515 +              %if &validexist %then %do;
19516 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19517 +              %end;
19518 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19519 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19520 +              %end;
19521 +         ;
19522 +     run;
19524 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19525 +     proc print data=&EM_USER_OUTIMPORT
19526 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19527 +          (where=((nrules>0) OR (nsurrogates>0)))
19528 +        %end;
19529 +        %else %do;
19530 +           (where=(nrules>0))
19531 +        %end;
19532 +        label noobs
19533 +        ;
19534 +     run;
19535 +     title10;
19537 +   %end;
19539 +   /* Sequence */
19540 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19541 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19542 +   data _null_ ;
19543 +      set &EM_USER_outseq (obs=2) end=eof ;
19544 +      if eof then do ;
19545 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19546 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19547 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19548 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19549 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19550 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19551 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19552 +      end;
19553 +    run;
19555 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19556 +      data &EM_USER_OUTSEQ;
19557 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19558 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19559 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19560 +           _XMISC_=_VMISC_
19561 +        %end;
19562 +        %if "&em_tree_aprof" ne "."  %then %do;
19563 +           _XAPROF_=_VAPROF_
19564 +           _XPROF_ = _VPROF_
19565 +        %end;
19566 +        %if "&em_tree_aloss" ne "."  %then %do;
19567 +           _XALOSS_=_VALOSS_
19568 +        %end;
19569 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19570 +           _XPASE_ = _VPASE_
19571 +           _XPMISC_ = _VPMISC_
19572 +        %end;
19574 +        ));
19575 +     %end;
19576 +     %else %do;
19577 +        set &EM_USER_OUTSEQ;
19578 +     %end;
19580 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19581 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19582 +            _MISC_   15.&EM_PROPERTY_PRECISION
19583 +         %end;
19584 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19585 +            _PASE_  15.&EM_PROPERTY_PRECISION
19586 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19587 +         %end;
19588 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19589 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19590 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19591 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19592 +            %end;
19593 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19594 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19595 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19596 +            %end;
19597 +         %end;
19598 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19599 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19600 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19601 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19602 +            %end;
19603 +         %end;
19604 +         %if "&em_tree_seq" ne "." %then %do;
19605 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19606 +         %end;
19607 +         %if "&em_tree_vseq" ne "." %then %do;
19608 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19609 +         %end;
19610 +         %if "&em_tree_aprof" ne "." %then %do;
19611 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19612 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19613 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19614 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19615 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19616 +           %end;
19617 +         %end;
19618 +         %else %if "&em_tree_aloss" ne "." %then %do;
19619 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19620 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19621 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19622 +           %end;
19623 +         %end;
19624 +      ;
19625 +    run;
19626 +   %end;
19628 +   /* Observation Based Importance */
19629 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19631 +      /* need to check for 0 obs */
19632 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19633 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19634 +      %let rc=%sysfunc(close(&dsid));
19636 +      %if &onobs %then %do;
19637 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19638 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19640 +         data &EM_USER_OUTOBSIMP;
19641 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19642 +           if _a;
19643 +           by _INPUT1_;
19644 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19645 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19646 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19647 +                   %end;
19648 +                   ;
19649 +         run;
19650 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19651 +      %end;
19652 +   %end;
19654 +  %end;
19656 +  /* create dataset to support tree diagram and icicle plot */
19657 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19658 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19660 +  /* display tree diagram */
19661 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19662 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19664 +  /* display icicle diagram */
19665 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19666 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19668 +  /* Leaf Statistics Plot */
19669 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19671 +  /* print leaf information to output window */
19672 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19674 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19675 +       by descending N;
19676 +     run;
19678 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19679 +     %local vn;
19680 +     data _null_;
19681 +       set t (obs=2) end=eof;
19682 +       if eof then do;
19683 +         call symput("vn", strip(put(vn, best.)));
19684 +       end;
19685 +     run;
19687 +     data t;
19688 +       set t;
19689 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19690 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19691 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19692 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19693 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19694 +       %end;
19695 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19696 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19697 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19698 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19699 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19700 +          %end;
19701 +       %end;
19702 +       ;
19703 +     run;
19705 +     /* determine if rase is found in t */
19706 +    %let dsid=%sysfunc(open(t,i));
19707 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19708 +    %let rc=%sysfunc(close(&dsid));
19710 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19711 +     proc print data=t noobs label;
19712 +       where tprob ne .;
19713 +       var node depth N tprob
19714 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19715 +         %if "&vn" ne "." %then %do;
19716 +           VN
19717 +         %end;
19718 +         vprob
19719 +       %end;
19720 +       %if &raseexists %then %do;
19721 +            RASE
19722 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19723 +              VRASE
19724 +            %end;
19725 +       %end;
19726 +       ;
19727 +     run;
19728 +     title10;
19729 +  %end;
19731 +  /* create plots that are done during training of node */
19732 +  /* display iterative plot, including reference line */
19733 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19734 +   /* %if &nleaves eq  %then %do; */
19735 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19736 +      data _null_;
19737 +        set &EM_USER_OUTTOPOLOGY end=eof;
19738 +        if eof then do;
19739 +          call symput('nleaves', LEAF);
19740 +        end;
19741 +      run;
19742 +   /* %end; */
19744 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19745 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19746 +  %end;
19748 +  /* display leaf statistics */
19749 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19751 +  /* stats by node if multiple targets = Y */
19752 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19753 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19754 +    data &EM_USER_OUTSTATS;
19755 +      set &EM_USER_OUTSTATS;
19757 +     * if STATNAME="TARGET" then delete;
19758 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19759 +      drop leaf;
19760 +    run;
19761 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19763 +  %end;
19764 +  %else %do;
19765 +    /* add outstats and outdescribe to spk but not results */
19766 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19767 +  %end;
19769 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set EMWS2.TREE_OUTSEQ.
NOTE: The data set EMWS2.TREE_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 141 observations read from the data set EMWS2.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS2.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 49 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 42 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 49 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 49 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 49 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 49 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: There were 14 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 7 observations read from the data set WORK.TEMPN.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS2.TREE_TREE_PLOT has 7 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_TREE_PLOT.
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS2.TREE_TREE_PLOT has 7 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 7 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 7 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 7 observations read from the data set EMWS2.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19770
19771  *------------------------------------------------------------*;
19772  * End REPORT: Tree;
19773  *------------------------------------------------------------*;
 
19774  /* Reset EM Options */
19775  options formchar="|----|+|---+=|-/\<>*";
19776  options nocenter ls=256 ps=10000;
19777  goptions reset=all device=GIF NODISPLAY;
 
19778  proc sort data=WORK.EM_USER_REPORT;
19779  by ID VIEW;
19780  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19781  proc sort data=EMWS2.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19782  by NAME;
19783  run;
 
NOTE: There were 99 observations read from the data set EMWS2.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19784  proc sort data=EMWS2.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19785  by NAME;
19786  run;
 
NOTE: There were 99 observations read from the data set EMWS2.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19787  data WORK.ASSESS_META;
19788  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19789  by NAME;
19790  run;
 
NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19791  data EM_temp_assessMeta;
19792  set EMWS2.Tree_CMeta_TRAIN;
19793  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19794  run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19795  data EM_temp_assessdata;
19796  set EMWS2.Tree_TRAIN(keep=
19797  F_RESPOND
19798  I_RESPOND
19799  P_RESPOND0
19800  P_RESPOND1
19801  Q_RESPOND0
19802  Q_RESPOND1
19803  R_RESPOND0
19804  R_RESPOND1
19805  U_RESPOND
19806  V_RESPOND0
19807  V_RESPOND1
19808  _WARN_
19809  RESPOND
19810  );
19811  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS2.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24096   data EM_temp_assessMeta;
24097   set EMWS2.Tree_CMeta_TRAIN;
24098   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24099   run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24100   data EM_temp_assessdata;
24101   set EMWS2.Tree_VALIDATE(keep=
24102   F_RESPOND
24103   I_RESPOND
24104   P_RESPOND0
24105   P_RESPOND1
24106   Q_RESPOND0
24107   Q_RESPOND1
24108   R_RESPOND0
24109   R_RESPOND1
24110   U_RESPOND
24111   V_RESPOND0
24112   V_RESPOND1
24113   _WARN_
24114   RESPOND
24115   );
24116   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 16121 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS2.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28410   %let _cn = %sysfunc(getoption(CENTER));
28411   options nocenter;
28412   proc print data=EMWS2.Tree_EMREPORTFIT noobs label;
28413   var STAT LABEL TRAIN
28414   VALIDATE
28415   ;
28416   by TARGET TARGETLABEL;
28417   title9 ' ';
28418   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28419   run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28420   title10;
28421   options &_cn;
 
28422   proc sort data=EMWS2.Tree_EMCLASSIFICATION nothreads;
28423   by DATAROLE TARGET TARGETLABEL;
28424   run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS2.TREE_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28425   %let _cn = %sysfunc(getoption(CENTER));
28426   options nocenter;
28427   proc print data=EMWS2.Tree_EMCLASSIFICATION noobs label;
28428   var from into pct_row pct_col count percent
28429   ;
28430   by DATAROLE TARGET TARGETLABEL;
28431   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28432   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28433   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28434   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28435   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28436   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28437   where _TYPE_='PREDICTION';
28438   title9 ' ';
28439   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28440   run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28441   title9;
28442   title10;
28443   options &_cn;
 
28444   %let _cn = %sysfunc(getoption(CENTER));
28445   options nocenter;
28446   data EMWS2.Tree_EMEVENTREPORT;
28447   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28447 !  8;
28448   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28448 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28448 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28448 ! FALSEEVENT
28449   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28449 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28449 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28450      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28451   FALSEEVENT=0;
28452   FALSENEVENT=0;
28453   TRUEEVENT=0;
28454   TRUENEVENT=0;
28455   set EMWS2.Tree_EMEVENTREPORT;
28456   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_EMEVENTREPORT.
NOTE: The data set EMWS2.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28457   proc print data=EMWS2.Tree_EMEVENTREPORT noobs label;
28458   title9 ' ';
28459   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28460   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28461   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28462   title10;
28463   options &_cn;
 
28464   proc datasets library=EMWS2 nolist;
28465   modify Tree_EMRANK;
28466   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28467   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28468   run;
 
NOTE: MODIFY was successful for EMWS2.TREE_EMRANK.DATA.
28469   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
28470   %let _cn = %sysfunc(getoption(CENTER));
28471   options nocenter;
28472   proc print data=EMWS2.Tree_EMRANK label noobs;
28473   var
28474   decile gain lift liftc resp respc N _meanP_;
28475   by
28476   notsorted DATAROLE
28477   notsorted TARGET
28478   notsorted TARGETLABEL
28479   ;
28480   title9 ' ';
28481   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28482   run;
 
NOTE: There were 40 observations read from the data set EMWS2.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28483   title10;
28484   options &_cn;
 
28485   proc datasets library=EMWS2 nolist;
28486   modify Tree_EMSCOREDIST;
28487   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28488   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28489   run;
 
NOTE: MODIFY was successful for EMWS2.TREE_EMSCOREDIST.DATA.
28490   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
